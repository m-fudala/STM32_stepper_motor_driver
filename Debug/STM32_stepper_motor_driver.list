
STM32_stepper_motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ee0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08008074  08008074  00018074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080ec  080080ec  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  080080ec  080080ec  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080080ec  080080ec  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080ec  080080ec  000180ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080f0  080080f0  000180f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  080080f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          000011c4  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001340  20001340  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d301  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027da  00000000  00000000  0002d4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e8  00000000  00000000  0002fc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008b0  00000000  00000000  00030670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f4d  00000000  00000000  00030f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e4e4  00000000  00000000  00052e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bfa53  00000000  00000000  00061351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00120da4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000260c  00000000  00000000  00120df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000017c 	.word	0x2000017c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800805c 	.word	0x0800805c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000180 	.word	0x20000180
 80001d0:	0800805c 	.word	0x0800805c

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 f926 	bl	8000428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f805 	bl	80001ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f864 	bl	80002ac <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80001e4:	f007 fa06 	bl	80075f4 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e8:	e7fe      	b.n	80001e8 <main+0x14>

080001ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ea:	b580      	push	{r7, lr}
 80001ec:	b0a6      	sub	sp, #152	; 0x98
 80001ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80001f4:	2228      	movs	r2, #40	; 0x28
 80001f6:	2100      	movs	r1, #0
 80001f8:	4618      	mov	r0, r3
 80001fa:	f007 ff27 	bl	800804c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]
 800020c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	2258      	movs	r2, #88	; 0x58
 8000212:	2100      	movs	r1, #0
 8000214:	4618      	mov	r0, r3
 8000216:	f007 ff19 	bl	800804c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021a:	2301      	movs	r3, #1
 800021c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800021e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000222:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000228:	2302      	movs	r3, #2
 800022a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800022e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000232:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000236:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800023a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000244:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000248:	4618      	mov	r0, r3
 800024a:	f001 ff39 	bl	80020c0 <HAL_RCC_OscConfig>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000254:	f000 f84e 	bl	80002f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000258:	230f      	movs	r3, #15
 800025a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800025c:	2302      	movs	r3, #2
 800025e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000268:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800026e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000272:	2101      	movs	r1, #1
 8000274:	4618      	mov	r0, r3
 8000276:	f002 ff77 	bl	8003168 <HAL_RCC_ClockConfig>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000280:	f000 f838 	bl	80002f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000284:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000288:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800028a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800028e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	4618      	mov	r0, r3
 8000294:	f003 f94e 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800029e:	f000 f829 	bl	80002f4 <Error_Handler>
  }
}
 80002a2:	bf00      	nop
 80002a4:	3798      	adds	r7, #152	; 0x98
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002b2:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <MX_GPIO_Init+0x44>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	4a0e      	ldr	r2, [pc, #56]	; (80002f0 <MX_GPIO_Init+0x44>)
 80002b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002bc:	6153      	str	r3, [r2, #20]
 80002be:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <MX_GPIO_Init+0x44>)
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ca:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <MX_GPIO_Init+0x44>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	4a08      	ldr	r2, [pc, #32]	; (80002f0 <MX_GPIO_Init+0x44>)
 80002d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d4:	6153      	str	r3, [r2, #20]
 80002d6:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <MX_GPIO_Init+0x44>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002de:	603b      	str	r3, [r7, #0]
 80002e0:	683b      	ldr	r3, [r7, #0]

}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40021000 	.word	0x40021000

080002f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f8:	b672      	cpsid	i
}
 80002fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002fc:	e7fe      	b.n	80002fc <Error_Handler+0x8>
	...

08000300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000306:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <HAL_MspInit+0x44>)
 8000308:	699b      	ldr	r3, [r3, #24]
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <HAL_MspInit+0x44>)
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	6193      	str	r3, [r2, #24]
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <HAL_MspInit+0x44>)
 8000314:	699b      	ldr	r3, [r3, #24]
 8000316:	f003 0301 	and.w	r3, r3, #1
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <HAL_MspInit+0x44>)
 8000320:	69db      	ldr	r3, [r3, #28]
 8000322:	4a08      	ldr	r2, [pc, #32]	; (8000344 <HAL_MspInit+0x44>)
 8000324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000328:	61d3      	str	r3, [r2, #28]
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <HAL_MspInit+0x44>)
 800032c:	69db      	ldr	r3, [r3, #28]
 800032e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000332:	603b      	str	r3, [r7, #0]
 8000334:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000

08000348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800034c:	e7fe      	b.n	800034c <NMI_Handler+0x4>

0800034e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000352:	e7fe      	b.n	8000352 <HardFault_Handler+0x4>

08000354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000358:	e7fe      	b.n	8000358 <MemManage_Handler+0x4>

0800035a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800035e:	e7fe      	b.n	800035e <BusFault_Handler+0x4>

08000360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000364:	e7fe      	b.n	8000364 <UsageFault_Handler+0x4>

08000366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000366:	b480      	push	{r7}
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800036a:	bf00      	nop
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr

08000382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000386:	bf00      	nop
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr

08000390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000394:	f000 f88e 	bl	80004b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}

0800039c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003a0:	4802      	ldr	r0, [pc, #8]	; (80003ac <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80003a2:	f000 fabc 	bl	800091e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000e34 	.word	0x20000e34

080003b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <SystemInit+0x20>)
 80003b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ba:	4a05      	ldr	r2, [pc, #20]	; (80003d0 <SystemInit+0x20>)
 80003bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	e000ed00 	.word	0xe000ed00

080003d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800040c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d8:	480d      	ldr	r0, [pc, #52]	; (8000410 <LoopForever+0x6>)
  ldr r1, =_edata
 80003da:	490e      	ldr	r1, [pc, #56]	; (8000414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003dc:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <LoopForever+0xe>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e0:	e002      	b.n	80003e8 <LoopCopyDataInit>

080003e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e6:	3304      	adds	r3, #4

080003e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ec:	d3f9      	bcc.n	80003e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ee:	4a0b      	ldr	r2, [pc, #44]	; (800041c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f0:	4c0b      	ldr	r4, [pc, #44]	; (8000420 <LoopForever+0x16>)
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f4:	e001      	b.n	80003fa <LoopFillZerobss>

080003f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f8:	3204      	adds	r2, #4

080003fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003fc:	d3fb      	bcc.n	80003f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003fe:	f7ff ffd7 	bl	80003b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000402:	f007 fdf1 	bl	8007fe8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000406:	f7ff fee5 	bl	80001d4 <main>

0800040a <LoopForever>:

LoopForever:
    b LoopForever
 800040a:	e7fe      	b.n	800040a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800040c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000414:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000418:	080080f4 	.word	0x080080f4
  ldr r2, =_sbss
 800041c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000420:	20001340 	.word	0x20001340

08000424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000424:	e7fe      	b.n	8000424 <ADC1_2_IRQHandler>
	...

08000428 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <HAL_Init+0x28>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a07      	ldr	r2, [pc, #28]	; (8000450 <HAL_Init+0x28>)
 8000432:	f043 0310 	orr.w	r3, r3, #16
 8000436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000438:	2003      	movs	r0, #3
 800043a:	f000 f92b 	bl	8000694 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800043e:	200f      	movs	r0, #15
 8000440:	f000 f808 	bl	8000454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000444:	f7ff ff5c 	bl	8000300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000448:	2300      	movs	r3, #0
}
 800044a:	4618      	mov	r0, r3
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40022000 	.word	0x40022000

08000454 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <HAL_InitTick+0x54>)
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	4b12      	ldr	r3, [pc, #72]	; (80004ac <HAL_InitTick+0x58>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	4619      	mov	r1, r3
 8000466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800046a:	fbb3 f3f1 	udiv	r3, r3, r1
 800046e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000472:	4618      	mov	r0, r3
 8000474:	f000 f943 	bl	80006fe <HAL_SYSTICK_Config>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800047e:	2301      	movs	r3, #1
 8000480:	e00e      	b.n	80004a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	2b0f      	cmp	r3, #15
 8000486:	d80a      	bhi.n	800049e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000488:	2200      	movs	r2, #0
 800048a:	6879      	ldr	r1, [r7, #4]
 800048c:	f04f 30ff 	mov.w	r0, #4294967295
 8000490:	f000 f90b 	bl	80006aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000494:	4a06      	ldr	r2, [pc, #24]	; (80004b0 <HAL_InitTick+0x5c>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800049a:	2300      	movs	r3, #0
 800049c:	e000      	b.n	80004a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800049e:	2301      	movs	r3, #1
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000000 	.word	0x20000000
 80004ac:	20000008 	.word	0x20000008
 80004b0:	20000004 	.word	0x20000004

080004b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <HAL_IncTick+0x20>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	461a      	mov	r2, r3
 80004be:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <HAL_IncTick+0x24>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4413      	add	r3, r2
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <HAL_IncTick+0x24>)
 80004c6:	6013      	str	r3, [r2, #0]
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	20000008 	.word	0x20000008
 80004d8:	20000198 	.word	0x20000198

080004dc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return uwTick;  
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <HAL_GetTick+0x14>)
 80004e2:	681b      	ldr	r3, [r3, #0]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	20000198 	.word	0x20000198

080004f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f003 0307 	and.w	r3, r3, #7
 8000502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <__NVIC_SetPriorityGrouping+0x44>)
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800050a:	68ba      	ldr	r2, [r7, #8]
 800050c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000510:	4013      	ands	r3, r2
 8000512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800051c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000526:	4a04      	ldr	r2, [pc, #16]	; (8000538 <__NVIC_SetPriorityGrouping+0x44>)
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	60d3      	str	r3, [r2, #12]
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	e000ed00 	.word	0xe000ed00

0800053c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <__NVIC_GetPriorityGrouping+0x18>)
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	0a1b      	lsrs	r3, r3, #8
 8000546:	f003 0307 	and.w	r3, r3, #7
}
 800054a:	4618      	mov	r0, r3
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000566:	2b00      	cmp	r3, #0
 8000568:	db0b      	blt.n	8000582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	f003 021f 	and.w	r2, r3, #31
 8000570:	4907      	ldr	r1, [pc, #28]	; (8000590 <__NVIC_EnableIRQ+0x38>)
 8000572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000576:	095b      	lsrs	r3, r3, #5
 8000578:	2001      	movs	r0, #1
 800057a:	fa00 f202 	lsl.w	r2, r0, r2
 800057e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e000e100 	.word	0xe000e100

08000594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	6039      	str	r1, [r7, #0]
 800059e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	db0a      	blt.n	80005be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	490c      	ldr	r1, [pc, #48]	; (80005e0 <__NVIC_SetPriority+0x4c>)
 80005ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b2:	0112      	lsls	r2, r2, #4
 80005b4:	b2d2      	uxtb	r2, r2
 80005b6:	440b      	add	r3, r1
 80005b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005bc:	e00a      	b.n	80005d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4908      	ldr	r1, [pc, #32]	; (80005e4 <__NVIC_SetPriority+0x50>)
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	f003 030f 	and.w	r3, r3, #15
 80005ca:	3b04      	subs	r3, #4
 80005cc:	0112      	lsls	r2, r2, #4
 80005ce:	b2d2      	uxtb	r2, r2
 80005d0:	440b      	add	r3, r1
 80005d2:	761a      	strb	r2, [r3, #24]
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	e000e100 	.word	0xe000e100
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b089      	sub	sp, #36	; 0x24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f003 0307 	and.w	r3, r3, #7
 80005fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005fc:	69fb      	ldr	r3, [r7, #28]
 80005fe:	f1c3 0307 	rsb	r3, r3, #7
 8000602:	2b04      	cmp	r3, #4
 8000604:	bf28      	it	cs
 8000606:	2304      	movcs	r3, #4
 8000608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060a:	69fb      	ldr	r3, [r7, #28]
 800060c:	3304      	adds	r3, #4
 800060e:	2b06      	cmp	r3, #6
 8000610:	d902      	bls.n	8000618 <NVIC_EncodePriority+0x30>
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	3b03      	subs	r3, #3
 8000616:	e000      	b.n	800061a <NVIC_EncodePriority+0x32>
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800061c:	f04f 32ff 	mov.w	r2, #4294967295
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	fa02 f303 	lsl.w	r3, r2, r3
 8000626:	43da      	mvns	r2, r3
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	401a      	ands	r2, r3
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000630:	f04f 31ff 	mov.w	r1, #4294967295
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	fa01 f303 	lsl.w	r3, r1, r3
 800063a:	43d9      	mvns	r1, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000640:	4313      	orrs	r3, r2
         );
}
 8000642:	4618      	mov	r0, r3
 8000644:	3724      	adds	r7, #36	; 0x24
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
	...

08000650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3b01      	subs	r3, #1
 800065c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000660:	d301      	bcc.n	8000666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000662:	2301      	movs	r3, #1
 8000664:	e00f      	b.n	8000686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000666:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <SysTick_Config+0x40>)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3b01      	subs	r3, #1
 800066c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800066e:	210f      	movs	r1, #15
 8000670:	f04f 30ff 	mov.w	r0, #4294967295
 8000674:	f7ff ff8e 	bl	8000594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <SysTick_Config+0x40>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800067e:	4b04      	ldr	r3, [pc, #16]	; (8000690 <SysTick_Config+0x40>)
 8000680:	2207      	movs	r2, #7
 8000682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	e000e010 	.word	0xe000e010

08000694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f7ff ff29 	bl	80004f4 <__NVIC_SetPriorityGrouping>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b086      	sub	sp, #24
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	4603      	mov	r3, r0
 80006b2:	60b9      	str	r1, [r7, #8]
 80006b4:	607a      	str	r2, [r7, #4]
 80006b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006bc:	f7ff ff3e 	bl	800053c <__NVIC_GetPriorityGrouping>
 80006c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	68b9      	ldr	r1, [r7, #8]
 80006c6:	6978      	ldr	r0, [r7, #20]
 80006c8:	f7ff ff8e 	bl	80005e8 <NVIC_EncodePriority>
 80006cc:	4602      	mov	r2, r0
 80006ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006d2:	4611      	mov	r1, r2
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff5d 	bl	8000594 <__NVIC_SetPriority>
}
 80006da:	bf00      	nop
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b082      	sub	sp, #8
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	4603      	mov	r3, r0
 80006ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ff31 	bl	8000558 <__NVIC_EnableIRQ>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ffa2 	bl	8000650 <SysTick_Config>
 800070c:	4603      	mov	r3, r0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000716:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000718:	b08b      	sub	sp, #44	; 0x2c
 800071a:	af06      	add	r7, sp, #24
 800071c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d101      	bne.n	8000728 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000724:	2301      	movs	r3, #1
 8000726:	e0d0      	b.n	80008ca <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	d106      	bne.n	8000742 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2200      	movs	r2, #0
 8000738:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f007 f9a1 	bl	8007a84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2203      	movs	r2, #3
 8000746:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4618      	mov	r0, r3
 8000750:	f003 f925 	bl	800399e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000754:	2300      	movs	r3, #0
 8000756:	73fb      	strb	r3, [r7, #15]
 8000758:	e04c      	b.n	80007f4 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	4613      	mov	r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4413      	add	r3, r2
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	440b      	add	r3, r1
 800076a:	3301      	adds	r3, #1
 800076c:	2201      	movs	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	1c5a      	adds	r2, r3, #1
 8000776:	4613      	mov	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	4413      	add	r3, r2
 800077c:	00db      	lsls	r3, r3, #3
 800077e:	440b      	add	r3, r1
 8000780:	7bfa      	ldrb	r2, [r7, #15]
 8000782:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000784:	7bfa      	ldrb	r2, [r7, #15]
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	b298      	uxth	r0, r3
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	4613      	mov	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	440b      	add	r3, r1
 8000796:	3336      	adds	r3, #54	; 0x36
 8000798:	4602      	mov	r2, r0
 800079a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	4613      	mov	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	440b      	add	r3, r1
 80007ac:	3303      	adds	r3, #3
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80007b2:	7bfa      	ldrb	r2, [r7, #15]
 80007b4:	6879      	ldr	r1, [r7, #4]
 80007b6:	4613      	mov	r3, r2
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4413      	add	r3, r2
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	440b      	add	r3, r1
 80007c0:	3338      	adds	r3, #56	; 0x38
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80007c6:	7bfa      	ldrb	r2, [r7, #15]
 80007c8:	6879      	ldr	r1, [r7, #4]
 80007ca:	4613      	mov	r3, r2
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	4413      	add	r3, r2
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	440b      	add	r3, r1
 80007d4:	333c      	adds	r3, #60	; 0x3c
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80007da:	7bfa      	ldrb	r2, [r7, #15]
 80007dc:	6879      	ldr	r1, [r7, #4]
 80007de:	4613      	mov	r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	440b      	add	r3, r1
 80007e8:	3340      	adds	r3, #64	; 0x40
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	3301      	adds	r3, #1
 80007f2:	73fb      	strb	r3, [r7, #15]
 80007f4:	7bfa      	ldrb	r2, [r7, #15]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d3ad      	bcc.n	800075a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007fe:	2300      	movs	r3, #0
 8000800:	73fb      	strb	r3, [r7, #15]
 8000802:	e044      	b.n	800088e <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000804:	7bfa      	ldrb	r2, [r7, #15]
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	4613      	mov	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4413      	add	r3, r2
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	440b      	add	r3, r1
 8000812:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800081a:	7bfa      	ldrb	r2, [r7, #15]
 800081c:	6879      	ldr	r1, [r7, #4]
 800081e:	4613      	mov	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	440b      	add	r3, r1
 8000828:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800082c:	7bfa      	ldrb	r2, [r7, #15]
 800082e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000830:	7bfa      	ldrb	r2, [r7, #15]
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	4613      	mov	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	440b      	add	r3, r1
 800083e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000846:	7bfa      	ldrb	r2, [r7, #15]
 8000848:	6879      	ldr	r1, [r7, #4]
 800084a:	4613      	mov	r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4413      	add	r3, r2
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	440b      	add	r3, r1
 8000854:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800085c:	7bfa      	ldrb	r2, [r7, #15]
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	4613      	mov	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	4413      	add	r3, r2
 8000866:	00db      	lsls	r3, r3, #3
 8000868:	440b      	add	r3, r1
 800086a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000872:	7bfa      	ldrb	r2, [r7, #15]
 8000874:	6879      	ldr	r1, [r7, #4]
 8000876:	4613      	mov	r3, r2
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	4413      	add	r3, r2
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	440b      	add	r3, r1
 8000880:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	3301      	adds	r3, #1
 800088c:	73fb      	strb	r3, [r7, #15]
 800088e:	7bfa      	ldrb	r2, [r7, #15]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	429a      	cmp	r2, r3
 8000896:	d3b5      	bcc.n	8000804 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	687e      	ldr	r6, [r7, #4]
 80008a0:	466d      	mov	r5, sp
 80008a2:	f106 0410 	add.w	r4, r6, #16
 80008a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008aa:	6823      	ldr	r3, [r4, #0]
 80008ac:	602b      	str	r3, [r5, #0]
 80008ae:	1d33      	adds	r3, r6, #4
 80008b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008b2:	6838      	ldr	r0, [r7, #0]
 80008b4:	f003 f88e 	bl	80039d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2201      	movs	r2, #1
 80008c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d101      	bne.n	80008e8 <HAL_PCD_Start+0x16>
 80008e4:	2302      	movs	r3, #2
 80008e6:	e016      	b.n	8000916 <HAL_PCD_Start+0x44>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2201      	movs	r2, #1
 80008ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f003 f83b 	bl	8003970 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80008fa:	2101      	movs	r1, #1
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f007 fb3b 	bl	8007f78 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f005 fa50 	bl	8005dac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4618      	mov	r0, r3
 800092c:	f005 fa49 	bl	8005dc2 <USB_ReadInterrupts>
 8000930:	4603      	mov	r3, r0
 8000932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800093a:	d102      	bne.n	8000942 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 faf6 	bl	8000f2e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f005 fa3b 	bl	8005dc2 <USB_ReadInterrupts>
 800094c:	4603      	mov	r3, r0
 800094e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000956:	d112      	bne.n	800097e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000960:	b29a      	uxth	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800096a:	b292      	uxth	r2, r2
 800096c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f007 f902 	bl	8007b7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000976:	2100      	movs	r1, #0
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f000 f8c7 	bl	8000b0c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f005 fa1d 	bl	8005dc2 <USB_ReadInterrupts>
 8000988:	4603      	mov	r3, r0
 800098a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000992:	d10b      	bne.n	80009ac <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800099c:	b29a      	uxth	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80009a6:	b292      	uxth	r2, r2
 80009a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f005 fa06 	bl	8005dc2 <USB_ReadInterrupts>
 80009b6:	4603      	mov	r3, r0
 80009b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009c0:	d10b      	bne.n	80009da <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80009d4:	b292      	uxth	r2, r2
 80009d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4618      	mov	r0, r3
 80009e0:	f005 f9ef 	bl	8005dc2 <USB_ReadInterrupts>
 80009e4:	4603      	mov	r3, r0
 80009e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009ee:	d126      	bne.n	8000a3e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f022 0204 	bic.w	r2, r2, #4
 8000a02:	b292      	uxth	r2, r2
 8000a04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f022 0208 	bic.w	r2, r2, #8
 8000a1a:	b292      	uxth	r2, r2
 8000a1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f007 f8e3 	bl	8007bec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a38:	b292      	uxth	r2, r2
 8000a3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f005 f9bd 	bl	8005dc2 <USB_ReadInterrupts>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a52:	d126      	bne.n	8000aa2 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f042 0208 	orr.w	r2, r2, #8
 8000a66:	b292      	uxth	r2, r2
 8000a68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a7e:	b292      	uxth	r2, r2
 8000a80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f042 0204 	orr.w	r2, r2, #4
 8000a96:	b292      	uxth	r2, r2
 8000a98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f007 f88b 	bl	8007bb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f005 f98b 	bl	8005dc2 <USB_ReadInterrupts>
 8000aac:	4603      	mov	r3, r0
 8000aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ab6:	d10e      	bne.n	8000ad6 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000aca:	b292      	uxth	r2, r2
 8000acc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f007 f844 	bl	8007b5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f005 f971 	bl	8005dc2 <USB_ReadInterrupts>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000aea:	d10b      	bne.n	8000b04 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000afe:	b292      	uxth	r2, r2
 8000b00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d101      	bne.n	8000b26 <HAL_PCD_SetAddress+0x1a>
 8000b22:	2302      	movs	r3, #2
 8000b24:	e013      	b.n	8000b4e <HAL_PCD_SetAddress+0x42>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	78fa      	ldrb	r2, [r7, #3]
 8000b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	78fa      	ldrb	r2, [r7, #3]
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f005 f920 	bl	8005d84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b084      	sub	sp, #16
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 8000b5e:	4608      	mov	r0, r1
 8000b60:	4611      	mov	r1, r2
 8000b62:	461a      	mov	r2, r3
 8000b64:	4603      	mov	r3, r0
 8000b66:	70fb      	strb	r3, [r7, #3]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	803b      	strh	r3, [r7, #0]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000b74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	da0e      	bge.n	8000b9a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000b7c:	78fb      	ldrb	r3, [r7, #3]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	1c5a      	adds	r2, r3, #1
 8000b84:	4613      	mov	r3, r2
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2201      	movs	r2, #1
 8000b96:	705a      	strb	r2, [r3, #1]
 8000b98:	e00e      	b.n	8000bb8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000b9a:	78fb      	ldrb	r3, [r7, #3]
 8000b9c:	f003 0207 	and.w	r2, r3, #7
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4413      	add	r3, r2
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	4413      	add	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000bb8:	78fb      	ldrb	r3, [r7, #3]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000bc4:	883a      	ldrh	r2, [r7, #0]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	78ba      	ldrb	r2, [r7, #2]
 8000bce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	785b      	ldrb	r3, [r3, #1]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d004      	beq.n	8000be2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000be2:	78bb      	ldrb	r3, [r7, #2]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d102      	bne.n	8000bee <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2200      	movs	r2, #0
 8000bec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d101      	bne.n	8000bfc <HAL_PCD_EP_Open+0xa6>
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	e00e      	b.n	8000c1a <HAL_PCD_EP_Open+0xc4>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68f9      	ldr	r1, [r7, #12]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 ff04 	bl	8003a18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000c18:	7afb      	ldrb	r3, [r7, #11]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b084      	sub	sp, #16
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	da0e      	bge.n	8000c54 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c36:	78fb      	ldrb	r3, [r7, #3]
 8000c38:	f003 0307 	and.w	r3, r3, #7
 8000c3c:	1c5a      	adds	r2, r3, #1
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	705a      	strb	r2, [r3, #1]
 8000c52:	e00e      	b.n	8000c72 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c54:	78fb      	ldrb	r3, [r7, #3]
 8000c56:	f003 0207 	and.w	r2, r3, #7
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000c72:	78fb      	ldrb	r3, [r7, #3]
 8000c74:	f003 0307 	and.w	r3, r3, #7
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d101      	bne.n	8000c8c <HAL_PCD_EP_Close+0x6a>
 8000c88:	2302      	movs	r3, #2
 8000c8a:	e00e      	b.n	8000caa <HAL_PCD_EP_Close+0x88>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	68f9      	ldr	r1, [r7, #12]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f003 fa50 	bl	8004140 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cc2:	7afb      	ldrb	r3, [r7, #11]
 8000cc4:	f003 0207 	and.w	r2, r3, #7
 8000cc8:	4613      	mov	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	683a      	ldr	r2, [r7, #0]
 8000ce4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000cf2:	7afb      	ldrb	r3, [r7, #11]
 8000cf4:	f003 0307 	and.w	r3, r3, #7
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000cfe:	7afb      	ldrb	r3, [r7, #11]
 8000d00:	f003 0307 	and.w	r3, r3, #7
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d106      	bne.n	8000d16 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6979      	ldr	r1, [r7, #20]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f003 fc03 	bl	800451a <USB_EPStartXfer>
 8000d14:	e005      	b.n	8000d22 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6979      	ldr	r1, [r7, #20]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f003 fbfc 	bl	800451a <USB_EPStartXfer>
  }

  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000d38:	78fb      	ldrb	r3, [r7, #3]
 8000d3a:	f003 0207 	and.w	r2, r3, #7
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	440b      	add	r3, r1
 8000d4a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d6c:	7afb      	ldrb	r3, [r7, #11]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	4613      	mov	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	2201      	movs	r2, #1
 8000d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	2201      	movs	r2, #1
 8000da6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000da8:	7afb      	ldrb	r3, [r7, #11]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000db4:	7afb      	ldrb	r3, [r7, #11]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d106      	bne.n	8000dcc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6979      	ldr	r1, [r7, #20]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f003 fba8 	bl	800451a <USB_EPStartXfer>
 8000dca:	e005      	b.n	8000dd8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6979      	ldr	r1, [r7, #20]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 fba1 	bl	800451a <USB_EPStartXfer>
  }

  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b084      	sub	sp, #16
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	460b      	mov	r3, r1
 8000dec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000dee:	78fb      	ldrb	r3, [r7, #3]
 8000df0:	f003 0207 	and.w	r2, r3, #7
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d901      	bls.n	8000e00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e03e      	b.n	8000e7e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	da0e      	bge.n	8000e26 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e08:	78fb      	ldrb	r3, [r7, #3]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2201      	movs	r2, #1
 8000e22:	705a      	strb	r2, [r3, #1]
 8000e24:	e00c      	b.n	8000e40 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e26:	78fa      	ldrb	r2, [r7, #3]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2201      	movs	r2, #1
 8000e44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e46:	78fb      	ldrb	r3, [r7, #3]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d101      	bne.n	8000e60 <HAL_PCD_EP_SetStall+0x7e>
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	e00e      	b.n	8000e7e <HAL_PCD_EP_SetStall+0x9c>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2201      	movs	r2, #1
 8000e64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68f9      	ldr	r1, [r7, #12]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f004 fe89 	bl	8005b86 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b084      	sub	sp, #16
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000e92:	78fb      	ldrb	r3, [r7, #3]
 8000e94:	f003 020f 	and.w	r2, r3, #15
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d901      	bls.n	8000ea4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e040      	b.n	8000f26 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	da0e      	bge.n	8000eca <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000eac:	78fb      	ldrb	r3, [r7, #3]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	705a      	strb	r2, [r3, #1]
 8000ec8:	e00e      	b.n	8000ee8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000eca:	78fb      	ldrb	r3, [r7, #3]
 8000ecc:	f003 0207 	and.w	r2, r3, #7
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2200      	movs	r2, #0
 8000eec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000eee:	78fb      	ldrb	r3, [r7, #3]
 8000ef0:	f003 0307 	and.w	r3, r3, #7
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d101      	bne.n	8000f08 <HAL_PCD_EP_ClrStall+0x82>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e00e      	b.n	8000f26 <HAL_PCD_EP_ClrStall+0xa0>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	68f9      	ldr	r1, [r7, #12]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f004 fe86 	bl	8005c28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b096      	sub	sp, #88	; 0x58
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000f36:	e39b      	b.n	8001670 <PCD_EP_ISR_Handler+0x742>
  {
    wIstr = hpcd->Instance->ISTR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f40:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000f44:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8000f52:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f040 815e 	bne.w	8001218 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000f5c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000f60:	f003 0310 	and.w	r3, r3, #16
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d150      	bne.n	800100a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f78:	81fb      	strh	r3, [r7, #14]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	89fb      	ldrh	r3, [r7, #14]
 8000f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3328      	adds	r3, #40	; 0x28
 8000f90:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	6812      	ldr	r2, [r2, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fb8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8000fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fbc:	695a      	ldr	r2, [r3, #20]
 8000fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	441a      	add	r2, r3
 8000fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fc6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000fc8:	2100      	movs	r1, #0
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f006 fdad 	bl	8007b2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 8349 	beq.w	8001670 <PCD_EP_ISR_Handler+0x742>
 8000fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f040 8344 	bne.w	8001670 <PCD_EP_ISR_Handler+0x742>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001008:	e332      	b.n	8001670 <PCD_EP_ISR_Handler+0x742>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001010:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800101c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001024:	2b00      	cmp	r3, #0
 8001026:	d032      	beq.n	800108e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001030:	b29b      	uxth	r3, r3
 8001032:	461a      	mov	r2, r3
 8001034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4413      	add	r3, r2
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	4413      	add	r3, r2
 8001042:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800104c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800104e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800105a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800105c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800105e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001060:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001062:	b29b      	uxth	r3, r3
 8001064:	f004 feff 	bl	8005e66 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	b29a      	uxth	r2, r3
 8001070:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001074:	4013      	ands	r3, r2
 8001076:	823b      	strh	r3, [r7, #16]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	8a3a      	ldrh	r2, [r7, #16]
 800107e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001082:	b292      	uxth	r2, r2
 8001084:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f006 fd22 	bl	8007ad0 <HAL_PCD_SetupStageCallback>
 800108c:	e2f0      	b.n	8001670 <PCD_EP_ISR_Handler+0x742>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800108e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001092:	2b00      	cmp	r3, #0
 8001094:	f280 82ec 	bge.w	8001670 <PCD_EP_ISR_Handler+0x742>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80010a4:	4013      	ands	r3, r2
 80010a6:	83fb      	strh	r3, [r7, #30]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	8bfa      	ldrh	r2, [r7, #30]
 80010ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010b2:	b292      	uxth	r2, r2
 80010b4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010be:	b29b      	uxth	r3, r3
 80010c0:	461a      	mov	r2, r3
 80010c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	4413      	add	r3, r2
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6812      	ldr	r2, [r2, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010dc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80010de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d019      	beq.n	800111a <PCD_EP_ISR_Handler+0x1ec>
 80010e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d015      	beq.n	800111a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010f4:	6959      	ldr	r1, [r3, #20]
 80010f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010f8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80010fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010fc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80010fe:	b29b      	uxth	r3, r3
 8001100:	f004 feb1 	bl	8005e66 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001106:	695a      	ldr	r2, [r3, #20]
 8001108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	441a      	add	r2, r3
 800110e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001110:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001112:	2100      	movs	r1, #0
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f006 fced 	bl	8007af4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	b29b      	uxth	r3, r3
 8001122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001126:	2b00      	cmp	r3, #0
 8001128:	f040 82a2 	bne.w	8001670 <PCD_EP_ISR_Handler+0x742>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	61bb      	str	r3, [r7, #24]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800113a:	b29b      	uxth	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	4413      	add	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d112      	bne.n	800117a <PCD_EP_ISR_Handler+0x24c>
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	b29b      	uxth	r3, r3
 800115a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800115e:	b29a      	uxth	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	801a      	strh	r2, [r3, #0]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	b29b      	uxth	r3, r3
 800116a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800116e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001172:	b29a      	uxth	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	801a      	strh	r2, [r3, #0]
 8001178:	e02f      	b.n	80011da <PCD_EP_ISR_Handler+0x2ac>
 800117a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	2b3e      	cmp	r3, #62	; 0x3e
 8001180:	d813      	bhi.n	80011aa <PCD_EP_ISR_Handler+0x27c>
 8001182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	085b      	lsrs	r3, r3, #1
 8001188:	647b      	str	r3, [r7, #68]	; 0x44
 800118a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d002      	beq.n	800119c <PCD_EP_ISR_Handler+0x26e>
 8001196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001198:	3301      	adds	r3, #1
 800119a:	647b      	str	r3, [r7, #68]	; 0x44
 800119c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800119e:	b29b      	uxth	r3, r3
 80011a0:	029b      	lsls	r3, r3, #10
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	801a      	strh	r2, [r3, #0]
 80011a8:	e017      	b.n	80011da <PCD_EP_ISR_Handler+0x2ac>
 80011aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	647b      	str	r3, [r7, #68]	; 0x44
 80011b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d102      	bne.n	80011c4 <PCD_EP_ISR_Handler+0x296>
 80011be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011c0:	3b01      	subs	r3, #1
 80011c2:	647b      	str	r3, [r7, #68]	; 0x44
 80011c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	029b      	lsls	r3, r3, #10
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80011d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011ea:	827b      	strh	r3, [r7, #18]
 80011ec:	8a7b      	ldrh	r3, [r7, #18]
 80011ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80011f2:	827b      	strh	r3, [r7, #18]
 80011f4:	8a7b      	ldrh	r3, [r7, #18]
 80011f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80011fa:	827b      	strh	r3, [r7, #18]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	8a7b      	ldrh	r3, [r7, #18]
 8001202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800120a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800120e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001212:	b29b      	uxth	r3, r3
 8001214:	8013      	strh	r3, [r2, #0]
 8001216:	e22b      	b.n	8001670 <PCD_EP_ISR_Handler+0x742>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800122c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001230:	2b00      	cmp	r3, #0
 8001232:	f280 80f6 	bge.w	8001422 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	b29a      	uxth	r2, r3
 8001248:	f640 738f 	movw	r3, #3983	; 0xf8f
 800124c:	4013      	ands	r3, r2
 800124e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001264:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001268:	b292      	uxth	r2, r2
 800126a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800126c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	4413      	add	r3, r2
 8001280:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001284:	7b1b      	ldrb	r3, [r3, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d123      	bne.n	80012d2 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001292:	b29b      	uxth	r3, r3
 8001294:	461a      	mov	r2, r3
 8001296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	4413      	add	r3, r2
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80012b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 808e 	beq.w	80013d8 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6818      	ldr	r0, [r3, #0]
 80012c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012c2:	6959      	ldr	r1, [r3, #20]
 80012c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012c6:	88da      	ldrh	r2, [r3, #6]
 80012c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80012cc:	f004 fdcb 	bl	8005e66 <USB_ReadPMA>
 80012d0:	e082      	b.n	80013d8 <PCD_EP_ISR_Handler+0x4aa>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80012d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012d4:	78db      	ldrb	r3, [r3, #3]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d10a      	bne.n	80012f0 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80012da:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80012de:	461a      	mov	r2, r3
 80012e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 f9d2 	bl	800168c <HAL_PCD_EP_DB_Receive>
 80012e8:	4603      	mov	r3, r0
 80012ea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80012ee:	e073      	b.n	80013d8 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	b29b      	uxth	r3, r3
 8001302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800130a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	441a      	add	r2, r3
 800131c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800132c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001330:	b29b      	uxth	r3, r3
 8001332:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	b29b      	uxth	r3, r3
 8001346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d022      	beq.n	8001394 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001356:	b29b      	uxth	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4413      	add	r3, r2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	4413      	add	r3, r2
 8001368:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001372:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001376:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800137a:	2b00      	cmp	r3, #0
 800137c:	d02c      	beq.n	80013d8 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6818      	ldr	r0, [r3, #0]
 8001382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001384:	6959      	ldr	r1, [r3, #20]
 8001386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001388:	891a      	ldrh	r2, [r3, #8]
 800138a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800138e:	f004 fd6a 	bl	8005e66 <USB_ReadPMA>
 8001392:	e021      	b.n	80013d8 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800139c:	b29b      	uxth	r3, r3
 800139e:	461a      	mov	r2, r3
 80013a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	4413      	add	r3, r2
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	6812      	ldr	r2, [r2, #0]
 80013ac:	4413      	add	r3, r2
 80013ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013b8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80013bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d009      	beq.n	80013d8 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ca:	6959      	ldr	r1, [r3, #20]
 80013cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ce:	895a      	ldrh	r2, [r3, #10]
 80013d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80013d4:	f004 fd47 	bl	8005e66 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80013d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013da:	69da      	ldr	r2, [r3, #28]
 80013dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80013e0:	441a      	add	r2, r3
 80013e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80013e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013e8:	695a      	ldr	r2, [r3, #20]
 80013ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80013ee:	441a      	add	r2, r3
 80013f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013f2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80013f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d005      	beq.n	8001408 <PCD_EP_ISR_Handler+0x4da>
 80013fc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	429a      	cmp	r2, r3
 8001406:	d206      	bcs.n	8001416 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f006 fb70 	bl	8007af4 <HAL_PCD_DataOutStageCallback>
 8001414:	e005      	b.n	8001422 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800141c:	4618      	mov	r0, r3
 800141e:	f003 f87c 	bl	800451a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001422:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 8120 	beq.w	8001670 <PCD_EP_ISR_Handler+0x742>
      {
        ep = &hpcd->IN_ep[epindex];
 8001430:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001434:	1c5a      	adds	r2, r3, #1
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	b29b      	uxth	r3, r3
 8001456:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800145a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800145e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	441a      	add	r2, r3
 8001470:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800147c:	b29b      	uxth	r3, r3
 800147e:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8001480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001482:	78db      	ldrb	r3, [r3, #3]
 8001484:	2b02      	cmp	r3, #2
 8001486:	f000 809d 	beq.w	80015c4 <PCD_EP_ISR_Handler+0x696>
        {
          ep->xfer_len = 0U;
 800148a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001490:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001498:	2b00      	cmp	r3, #0
 800149a:	d046      	beq.n	800152a <PCD_EP_ISR_Handler+0x5fc>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800149c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800149e:	785b      	ldrb	r3, [r3, #1]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d126      	bne.n	80014f2 <PCD_EP_ISR_Handler+0x5c4>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	4413      	add	r3, r2
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
 80014bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	00da      	lsls	r2, r3, #3
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	4413      	add	r3, r2
 80014c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80014ca:	623b      	str	r3, [r7, #32]
 80014cc:	6a3b      	ldr	r3, [r7, #32]
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	801a      	strh	r2, [r3, #0]
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	801a      	strh	r2, [r3, #0]
 80014f0:	e061      	b.n	80015b6 <PCD_EP_ISR_Handler+0x688>
 80014f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014f4:	785b      	ldrb	r3, [r3, #1]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d15d      	bne.n	80015b6 <PCD_EP_ISR_Handler+0x688>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001508:	b29b      	uxth	r3, r3
 800150a:	461a      	mov	r2, r3
 800150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150e:	4413      	add	r3, r2
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	00da      	lsls	r2, r3, #3
 8001518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151a:	4413      	add	r3, r2
 800151c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
 8001522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001524:	2200      	movs	r2, #0
 8001526:	801a      	strh	r2, [r3, #0]
 8001528:	e045      	b.n	80015b6 <PCD_EP_ISR_Handler+0x688>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001532:	785b      	ldrb	r3, [r3, #1]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d126      	bne.n	8001586 <PCD_EP_ISR_Handler+0x658>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	637b      	str	r3, [r7, #52]	; 0x34
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001546:	b29b      	uxth	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154c:	4413      	add	r3, r2
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
 8001550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	00da      	lsls	r2, r3, #3
 8001556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001558:	4413      	add	r3, r2
 800155a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800155e:	633b      	str	r3, [r7, #48]	; 0x30
 8001560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	b29b      	uxth	r3, r3
 8001566:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800156a:	b29a      	uxth	r2, r3
 800156c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800156e:	801a      	strh	r2, [r3, #0]
 8001570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	b29b      	uxth	r3, r3
 8001576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800157a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800157e:	b29a      	uxth	r2, r3
 8001580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001582:	801a      	strh	r2, [r3, #0]
 8001584:	e017      	b.n	80015b6 <PCD_EP_ISR_Handler+0x688>
 8001586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001588:	785b      	ldrb	r3, [r3, #1]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d113      	bne.n	80015b6 <PCD_EP_ISR_Handler+0x688>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001596:	b29b      	uxth	r3, r3
 8001598:	461a      	mov	r2, r3
 800159a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800159c:	4413      	add	r3, r2
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	00da      	lsls	r2, r3, #3
 80015a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015a8:	4413      	add	r3, r2
 80015aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80015ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80015b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b2:	2200      	movs	r2, #0
 80015b4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	4619      	mov	r1, r3
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f006 fab4 	bl	8007b2a <HAL_PCD_DataInStageCallback>
 80015c2:	e055      	b.n	8001670 <PCD_EP_ISR_Handler+0x742>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 80015c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015c6:	78db      	ldrb	r3, [r3, #3]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d14a      	bne.n	8001662 <PCD_EP_ISR_Handler+0x734>
 80015cc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80015d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d144      	bne.n	8001662 <PCD_EP_ISR_Handler+0x734>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4413      	add	r3, r2
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6812      	ldr	r2, [r2, #0]
 80015f0:	4413      	add	r3, r2
 80015f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 8001600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001602:	699a      	ldr	r2, [r3, #24]
 8001604:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001608:	429a      	cmp	r2, r3
 800160a:	d907      	bls.n	800161c <PCD_EP_ISR_Handler+0x6ee>
          {
            ep->xfer_len -= TxByteNbre;
 800160c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800160e:	699a      	ldr	r2, [r3, #24]
 8001610:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001614:	1ad2      	subs	r2, r2, r3
 8001616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001618:	619a      	str	r2, [r3, #24]
 800161a:	e002      	b.n	8001622 <PCD_EP_ISR_Handler+0x6f4>
          }
          else
          {
            ep->xfer_len = 0U;
 800161c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d106      	bne.n	8001638 <PCD_EP_ISR_Handler+0x70a>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800162a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	4619      	mov	r1, r3
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f006 fa7a 	bl	8007b2a <HAL_PCD_DataInStageCallback>
 8001636:	e01b      	b.n	8001670 <PCD_EP_ISR_Handler+0x742>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800163a:	695a      	ldr	r2, [r3, #20]
 800163c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001640:	441a      	add	r2, r3
 8001642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001644:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001648:	69da      	ldr	r2, [r3, #28]
 800164a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800164e:	441a      	add	r2, r3
 8001650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001652:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800165a:	4618      	mov	r0, r3
 800165c:	f002 ff5d 	bl	800451a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001660:	e006      	b.n	8001670 <PCD_EP_ISR_Handler+0x742>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001662:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001666:	461a      	mov	r2, r3
 8001668:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f917 	bl	800189e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001678:	b29b      	uxth	r3, r3
 800167a:	b21b      	sxth	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	f6ff ac5b 	blt.w	8000f38 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3758      	adds	r7, #88	; 0x58
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	4613      	mov	r3, r2
 8001698:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d07c      	beq.n	800179e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	4413      	add	r3, r2
 80016be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016c8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	699a      	ldr	r2, [r3, #24]
 80016ce:	8b7b      	ldrh	r3, [r7, #26]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d306      	bcc.n	80016e2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	699a      	ldr	r2, [r3, #24]
 80016d8:	8b7b      	ldrh	r3, [r7, #26]
 80016da:	1ad2      	subs	r2, r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	619a      	str	r2, [r3, #24]
 80016e0:	e002      	b.n	80016e8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d123      	bne.n	8001738 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	b29b      	uxth	r3, r3
 8001702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800170a:	833b      	strh	r3, [r7, #24]
 800170c:	8b3b      	ldrh	r3, [r7, #24]
 800170e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001712:	833b      	strh	r3, [r7, #24]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	441a      	add	r2, r3
 8001722:	8b3b      	ldrh	r3, [r7, #24]
 8001724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800172c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001734:	b29b      	uxth	r3, r3
 8001736:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173e:	2b00      	cmp	r3, #0
 8001740:	d01f      	beq.n	8001782 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800175c:	82fb      	strh	r3, [r7, #22]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	441a      	add	r2, r3
 800176c:	8afb      	ldrh	r3, [r7, #22]
 800176e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800177a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800177e:	b29b      	uxth	r3, r3
 8001780:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001782:	8b7b      	ldrh	r3, [r7, #26]
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 8085 	beq.w	8001894 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	6959      	ldr	r1, [r3, #20]
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	891a      	ldrh	r2, [r3, #8]
 8001796:	8b7b      	ldrh	r3, [r7, #26]
 8001798:	f004 fb65 	bl	8005e66 <USB_ReadPMA>
 800179c:	e07a      	b.n	8001894 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	461a      	mov	r2, r3
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4413      	add	r3, r2
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017c2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	699a      	ldr	r2, [r3, #24]
 80017c8:	8b7b      	ldrh	r3, [r7, #26]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d306      	bcc.n	80017dc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	699a      	ldr	r2, [r3, #24]
 80017d2:	8b7b      	ldrh	r3, [r7, #26]
 80017d4:	1ad2      	subs	r2, r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	619a      	str	r2, [r3, #24]
 80017da:	e002      	b.n	80017e2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d123      	bne.n	8001832 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001804:	83fb      	strh	r3, [r7, #30]
 8001806:	8bfb      	ldrh	r3, [r7, #30]
 8001808:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800180c:	83fb      	strh	r3, [r7, #30]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	441a      	add	r2, r3
 800181c:	8bfb      	ldrh	r3, [r7, #30]
 800181e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800182a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182e:	b29b      	uxth	r3, r3
 8001830:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001838:	2b00      	cmp	r3, #0
 800183a:	d11f      	bne.n	800187c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	b29b      	uxth	r3, r3
 800184e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001856:	83bb      	strh	r3, [r7, #28]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	441a      	add	r2, r3
 8001866:	8bbb      	ldrh	r3, [r7, #28]
 8001868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800186c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001874:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001878:	b29b      	uxth	r3, r3
 800187a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800187c:	8b7b      	ldrh	r3, [r7, #26]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d008      	beq.n	8001894 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	6959      	ldr	r1, [r3, #20]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	895a      	ldrh	r2, [r3, #10]
 800188e:	8b7b      	ldrh	r3, [r7, #26]
 8001890:	f004 fae9 	bl	8005e66 <USB_ReadPMA>
    }
  }

  return count;
 8001894:	8b7b      	ldrh	r3, [r7, #26]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3720      	adds	r7, #32
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b0a2      	sub	sp, #136	; 0x88
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	4613      	mov	r3, r2
 80018aa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 81c5 	beq.w	8001c42 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	461a      	mov	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4413      	add	r3, r2
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	4413      	add	r3, r2
 80018d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	699a      	ldr	r2, [r3, #24]
 80018e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d907      	bls.n	80018fc <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	699a      	ldr	r2, [r3, #24]
 80018f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80018f4:	1ad2      	subs	r2, r2, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	619a      	str	r2, [r3, #24]
 80018fa:	e002      	b.n	8001902 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 80b9 	bne.w	8001a7e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	785b      	ldrb	r3, [r3, #1]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d126      	bne.n	8001962 <HAL_PCD_EP_DB_Transmit+0xc4>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001922:	b29b      	uxth	r3, r3
 8001924:	461a      	mov	r2, r3
 8001926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001928:	4413      	add	r3, r2
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	00da      	lsls	r2, r3, #3
 8001932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001934:	4413      	add	r3, r2
 8001936:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	b29b      	uxth	r3, r3
 8001942:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001946:	b29a      	uxth	r2, r3
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	801a      	strh	r2, [r3, #0]
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	b29b      	uxth	r3, r3
 8001952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800195a:	b29a      	uxth	r2, r3
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	801a      	strh	r2, [r3, #0]
 8001960:	e01a      	b.n	8001998 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	785b      	ldrb	r3, [r3, #1]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d116      	bne.n	8001998 <HAL_PCD_EP_DB_Transmit+0xfa>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001978:	b29b      	uxth	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800197e:	4413      	add	r3, r2
 8001980:	633b      	str	r3, [r7, #48]	; 0x30
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	00da      	lsls	r2, r3, #3
 8001988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198a:	4413      	add	r3, r2
 800198c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001994:	2200      	movs	r2, #0
 8001996:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	623b      	str	r3, [r7, #32]
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	785b      	ldrb	r3, [r3, #1]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d126      	bne.n	80019f4 <HAL_PCD_EP_DB_Transmit+0x156>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	461a      	mov	r2, r3
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	4413      	add	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	00da      	lsls	r2, r3, #3
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	4413      	add	r3, r2
 80019c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80019d8:	b29a      	uxth	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	801a      	strh	r2, [r3, #0]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	801a      	strh	r2, [r3, #0]
 80019f2:	e017      	b.n	8001a24 <HAL_PCD_EP_DB_Transmit+0x186>
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	785b      	ldrb	r3, [r3, #1]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d113      	bne.n	8001a24 <HAL_PCD_EP_DB_Transmit+0x186>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	461a      	mov	r2, r3
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	623b      	str	r3, [r7, #32]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	00da      	lsls	r2, r3, #3
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	4413      	add	r3, r2
 8001a18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a1c:	61fb      	str	r3, [r7, #28]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	2200      	movs	r2, #0
 8001a22:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f006 f87d 	bl	8007b2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 82d2 	beq.w	8001fe0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a56:	827b      	strh	r3, [r7, #18]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	441a      	add	r2, r3
 8001a66:	8a7b      	ldrh	r3, [r7, #18]
 8001a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	8013      	strh	r3, [r2, #0]
 8001a7c:	e2b0      	b.n	8001fe0 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d021      	beq.n	8001acc <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aa2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	441a      	add	r2, r3
 8001ab4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	f040 8284 	bne.w	8001fe0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	695a      	ldr	r2, [r3, #20]
 8001adc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ae0:	441a      	add	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	69da      	ldr	r2, [r3, #28]
 8001aea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001aee:	441a      	add	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	6a1a      	ldr	r2, [r3, #32]
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d309      	bcc.n	8001b14 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	6a1a      	ldr	r2, [r3, #32]
 8001b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b0c:	1ad2      	subs	r2, r2, r3
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	621a      	str	r2, [r3, #32]
 8001b12:	e015      	b.n	8001b40 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d107      	bne.n	8001b2c <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 8001b1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b20:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b2a:	e009      	b.n	8001b40 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	785b      	ldrb	r3, [r3, #1]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d155      	bne.n	8001bf4 <HAL_PCD_EP_DB_Transmit+0x356>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b5c:	4413      	add	r3, r2
 8001b5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	00da      	lsls	r2, r3, #3
 8001b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b68:	4413      	add	r3, r2
 8001b6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d112      	bne.n	8001b9c <HAL_PCD_EP_DB_Transmit+0x2fe>
 8001b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b84:	801a      	strh	r2, [r3, #0]
 8001b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b98:	801a      	strh	r2, [r3, #0]
 8001b9a:	e047      	b.n	8001c2c <HAL_PCD_EP_DB_Transmit+0x38e>
 8001b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b9e:	2b3e      	cmp	r3, #62	; 0x3e
 8001ba0:	d811      	bhi.n	8001bc6 <HAL_PCD_EP_DB_Transmit+0x328>
 8001ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba4:	085b      	lsrs	r3, r3, #1
 8001ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <HAL_PCD_EP_DB_Transmit+0x31a>
 8001bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	029b      	lsls	r3, r3, #10
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc2:	801a      	strh	r2, [r3, #0]
 8001bc4:	e032      	b.n	8001c2c <HAL_PCD_EP_DB_Transmit+0x38e>
 8001bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bc8:	095b      	lsrs	r3, r3, #5
 8001bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d102      	bne.n	8001bdc <HAL_PCD_EP_DB_Transmit+0x33e>
 8001bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	029b      	lsls	r3, r3, #10
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf0:	801a      	strh	r2, [r3, #0]
 8001bf2:	e01b      	b.n	8001c2c <HAL_PCD_EP_DB_Transmit+0x38e>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	785b      	ldrb	r3, [r3, #1]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d117      	bne.n	8001c2c <HAL_PCD_EP_DB_Transmit+0x38e>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	643b      	str	r3, [r7, #64]	; 0x40
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c10:	4413      	add	r3, r2
 8001c12:	643b      	str	r3, [r7, #64]	; 0x40
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	00da      	lsls	r2, r3, #3
 8001c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c2a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	6959      	ldr	r1, [r3, #20]
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	891a      	ldrh	r2, [r3, #8]
 8001c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	f004 f8d1 	bl	8005de2 <USB_WritePMA>
 8001c40:	e1ce      	b.n	8001fe0 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4413      	add	r3, r2
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	699a      	ldr	r2, [r3, #24]
 8001c6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d307      	bcc.n	8001c86 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c7e:	1ad2      	subs	r2, r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	619a      	str	r2, [r3, #24]
 8001c84:	e002      	b.n	8001c8c <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f040 80c4 	bne.w	8001e1e <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	785b      	ldrb	r3, [r3, #1]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d126      	bne.n	8001cec <HAL_PCD_EP_DB_Transmit+0x44e>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cb2:	4413      	add	r3, r2
 8001cb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	00da      	lsls	r2, r3, #3
 8001cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001cc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8001cc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cd4:	801a      	strh	r2, [r3, #0]
 8001cd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ce8:	801a      	strh	r2, [r3, #0]
 8001cea:	e01a      	b.n	8001d22 <HAL_PCD_EP_DB_Transmit+0x484>
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	785b      	ldrb	r3, [r3, #1]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d116      	bne.n	8001d22 <HAL_PCD_EP_DB_Transmit+0x484>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	677b      	str	r3, [r7, #116]	; 0x74
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d08:	4413      	add	r3, r2
 8001d0a:	677b      	str	r3, [r7, #116]	; 0x74
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	00da      	lsls	r2, r3, #3
 8001d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d14:	4413      	add	r3, r2
 8001d16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d1a:	673b      	str	r3, [r7, #112]	; 0x70
 8001d1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d1e:	2200      	movs	r2, #0
 8001d20:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	785b      	ldrb	r3, [r3, #1]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d12f      	bne.n	8001d90 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d48:	4413      	add	r3, r2
 8001d4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	00da      	lsls	r2, r3, #3
 8001d54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d58:	4413      	add	r3, r2
 8001d5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001d62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d74:	801a      	strh	r2, [r3, #0]
 8001d76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d8c:	801a      	strh	r2, [r3, #0]
 8001d8e:	e017      	b.n	8001dc0 <HAL_PCD_EP_DB_Transmit+0x522>
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	785b      	ldrb	r3, [r3, #1]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d113      	bne.n	8001dc0 <HAL_PCD_EP_DB_Transmit+0x522>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	461a      	mov	r2, r3
 8001da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001da6:	4413      	add	r3, r2
 8001da8:	67bb      	str	r3, [r7, #120]	; 0x78
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	00da      	lsls	r2, r3, #3
 8001db0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001db2:	4413      	add	r3, r2
 8001db4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001db8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001dba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f005 feaf 	bl	8007b2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 8104 	bne.w	8001fe0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	441a      	add	r2, r3
 8001e04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001e08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	8013      	strh	r3, [r2, #0]
 8001e1c:	e0e0      	b.n	8001fe0 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d121      	bne.n	8001e6c <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e42:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	441a      	add	r2, r3
 8001e54:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	f040 80b4 	bne.w	8001fe0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e80:	441a      	add	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	69da      	ldr	r2, [r3, #28]
 8001e8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e8e:	441a      	add	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	6a1a      	ldr	r2, [r3, #32]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d309      	bcc.n	8001eb4 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	6a1a      	ldr	r2, [r3, #32]
 8001eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eac:	1ad2      	subs	r2, r2, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	621a      	str	r2, [r3, #32]
 8001eb2:	e015      	b.n	8001ee0 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d107      	bne.n	8001ecc <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 8001ebc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ec0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001eca:	e009      	b.n	8001ee0 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	667b      	str	r3, [r7, #100]	; 0x64
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	785b      	ldrb	r3, [r3, #1]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d155      	bne.n	8001f9a <HAL_PCD_EP_DB_Transmit+0x6fc>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	461a      	mov	r2, r3
 8001f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f02:	4413      	add	r3, r2
 8001f04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	00da      	lsls	r2, r3, #3
 8001f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f0e:	4413      	add	r3, r2
 8001f10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f14:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d112      	bne.n	8001f42 <HAL_PCD_EP_DB_Transmit+0x6a4>
 8001f1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f2a:	801a      	strh	r2, [r3, #0]
 8001f2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f3e:	801a      	strh	r2, [r3, #0]
 8001f40:	e044      	b.n	8001fcc <HAL_PCD_EP_DB_Transmit+0x72e>
 8001f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f44:	2b3e      	cmp	r3, #62	; 0x3e
 8001f46:	d811      	bhi.n	8001f6c <HAL_PCD_EP_DB_Transmit+0x6ce>
 8001f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f4a:	085b      	lsrs	r3, r3, #1
 8001f4c:	657b      	str	r3, [r7, #84]	; 0x54
 8001f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HAL_PCD_EP_DB_Transmit+0x6c0>
 8001f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	657b      	str	r3, [r7, #84]	; 0x54
 8001f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	029b      	lsls	r3, r3, #10
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f68:	801a      	strh	r2, [r3, #0]
 8001f6a:	e02f      	b.n	8001fcc <HAL_PCD_EP_DB_Transmit+0x72e>
 8001f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	657b      	str	r3, [r7, #84]	; 0x54
 8001f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <HAL_PCD_EP_DB_Transmit+0x6e4>
 8001f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	657b      	str	r3, [r7, #84]	; 0x54
 8001f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	029b      	lsls	r3, r3, #10
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f96:	801a      	strh	r2, [r3, #0]
 8001f98:	e018      	b.n	8001fcc <HAL_PCD_EP_DB_Transmit+0x72e>
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	785b      	ldrb	r3, [r3, #1]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d114      	bne.n	8001fcc <HAL_PCD_EP_DB_Transmit+0x72e>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fb0:	4413      	add	r3, r2
 8001fb2:	667b      	str	r3, [r7, #100]	; 0x64
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	00da      	lsls	r2, r3, #3
 8001fba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001fc2:	663b      	str	r3, [r7, #96]	; 0x60
 8001fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fca:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	6959      	ldr	r1, [r3, #20]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	895a      	ldrh	r2, [r3, #10]
 8001fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	f003 ff01 	bl	8005de2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ffa:	823b      	strh	r3, [r7, #16]
 8001ffc:	8a3b      	ldrh	r3, [r7, #16]
 8001ffe:	f083 0310 	eor.w	r3, r3, #16
 8002002:	823b      	strh	r3, [r7, #16]
 8002004:	8a3b      	ldrh	r3, [r7, #16]
 8002006:	f083 0320 	eor.w	r3, r3, #32
 800200a:	823b      	strh	r3, [r7, #16]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	441a      	add	r2, r3
 800201a:	8a3b      	ldrh	r3, [r7, #16]
 800201c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202c:	b29b      	uxth	r3, r3
 800202e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3788      	adds	r7, #136	; 0x88
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800203a:	b480      	push	{r7}
 800203c:	b087      	sub	sp, #28
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	817b      	strh	r3, [r7, #10]
 8002048:	4613      	mov	r3, r2
 800204a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800204c:	897b      	ldrh	r3, [r7, #10]
 800204e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002052:	b29b      	uxth	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00b      	beq.n	8002070 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002058:	897b      	ldrh	r3, [r7, #10]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	e009      	b.n	8002084 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002070:	897a      	ldrh	r2, [r7, #10]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4413      	add	r3, r2
 8002082:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002084:	893b      	ldrh	r3, [r7, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d107      	bne.n	800209a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2200      	movs	r2, #0
 800208e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	b29a      	uxth	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	80da      	strh	r2, [r3, #6]
 8002098:	e00b      	b.n	80020b2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2201      	movs	r2, #1
 800209e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	0c1b      	lsrs	r3, r3, #16
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020d0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d102      	bne.n	80020e6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	f001 b83a 	b.w	800315a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 816f 	beq.w	80023da <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020fc:	4bb5      	ldr	r3, [pc, #724]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b04      	cmp	r3, #4
 8002106:	d00c      	beq.n	8002122 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002108:	4bb2      	ldr	r3, [pc, #712]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 030c 	and.w	r3, r3, #12
 8002110:	2b08      	cmp	r3, #8
 8002112:	d15c      	bne.n	80021ce <HAL_RCC_OscConfig+0x10e>
 8002114:	4baf      	ldr	r3, [pc, #700]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800211c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002120:	d155      	bne.n	80021ce <HAL_RCC_OscConfig+0x10e>
 8002122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002126:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002136:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213a:	fab3 f383 	clz	r3, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	095b      	lsrs	r3, r3, #5
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b01      	cmp	r3, #1
 800214c:	d102      	bne.n	8002154 <HAL_RCC_OscConfig+0x94>
 800214e:	4ba1      	ldr	r3, [pc, #644]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	e015      	b.n	8002180 <HAL_RCC_OscConfig+0xc0>
 8002154:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002158:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002160:	fa93 f3a3 	rbit	r3, r3
 8002164:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800216c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002170:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800217c:	4b95      	ldr	r3, [pc, #596]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002184:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002188:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800218c:	fa92 f2a2 	rbit	r2, r2
 8002190:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002194:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002198:	fab2 f282 	clz	r2, r2
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	f042 0220 	orr.w	r2, r2, #32
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	f002 021f 	and.w	r2, r2, #31
 80021a8:	2101      	movs	r1, #1
 80021aa:	fa01 f202 	lsl.w	r2, r1, r2
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 8111 	beq.w	80023d8 <HAL_RCC_OscConfig+0x318>
 80021b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f040 8108 	bne.w	80023d8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f000 bfc6 	b.w	800315a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021de:	d106      	bne.n	80021ee <HAL_RCC_OscConfig+0x12e>
 80021e0:	4b7c      	ldr	r3, [pc, #496]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a7b      	ldr	r2, [pc, #492]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 80021e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	e036      	b.n	800225c <HAL_RCC_OscConfig+0x19c>
 80021ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x158>
 80021fe:	4b75      	ldr	r3, [pc, #468]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a74      	ldr	r2, [pc, #464]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 8002204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b72      	ldr	r3, [pc, #456]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a71      	ldr	r2, [pc, #452]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 8002210:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e021      	b.n	800225c <HAL_RCC_OscConfig+0x19c>
 8002218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800221c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002228:	d10c      	bne.n	8002244 <HAL_RCC_OscConfig+0x184>
 800222a:	4b6a      	ldr	r3, [pc, #424]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a69      	ldr	r2, [pc, #420]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 8002230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	4b67      	ldr	r3, [pc, #412]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a66      	ldr	r2, [pc, #408]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 800223c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	e00b      	b.n	800225c <HAL_RCC_OscConfig+0x19c>
 8002244:	4b63      	ldr	r3, [pc, #396]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a62      	ldr	r2, [pc, #392]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 800224a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b60      	ldr	r3, [pc, #384]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a5f      	ldr	r2, [pc, #380]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 8002256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800225a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800225c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002260:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d059      	beq.n	8002320 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7fe f936 	bl	80004dc <HAL_GetTick>
 8002270:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002274:	e00a      	b.n	800228c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002276:	f7fe f931 	bl	80004dc <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	; 0x64
 8002284:	d902      	bls.n	800228c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	f000 bf67 	b.w	800315a <HAL_RCC_OscConfig+0x109a>
 800228c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002290:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002298:	fa93 f3a3 	rbit	r3, r3
 800229c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80022a0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a4:	fab3 f383 	clz	r3, r3
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d102      	bne.n	80022be <HAL_RCC_OscConfig+0x1fe>
 80022b8:	4b46      	ldr	r3, [pc, #280]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	e015      	b.n	80022ea <HAL_RCC_OscConfig+0x22a>
 80022be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022c2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80022d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80022da:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80022e6:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022ee:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80022f2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80022f6:	fa92 f2a2 	rbit	r2, r2
 80022fa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80022fe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002302:	fab2 f282 	clz	r2, r2
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	f042 0220 	orr.w	r2, r2, #32
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	f002 021f 	and.w	r2, r2, #31
 8002312:	2101      	movs	r1, #1
 8002314:	fa01 f202 	lsl.w	r2, r1, r2
 8002318:	4013      	ands	r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0ab      	beq.n	8002276 <HAL_RCC_OscConfig+0x1b6>
 800231e:	e05c      	b.n	80023da <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7fe f8dc 	bl	80004dc <HAL_GetTick>
 8002324:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800232a:	f7fe f8d7 	bl	80004dc <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	; 0x64
 8002338:	d902      	bls.n	8002340 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	f000 bf0d 	b.w	800315a <HAL_RCC_OscConfig+0x109a>
 8002340:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002344:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002354:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	b2db      	uxtb	r3, r3
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b01      	cmp	r3, #1
 800236a:	d102      	bne.n	8002372 <HAL_RCC_OscConfig+0x2b2>
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	e015      	b.n	800239e <HAL_RCC_OscConfig+0x2de>
 8002372:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002376:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002386:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800238a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800238e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <HAL_RCC_OscConfig+0x314>)
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023a2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80023a6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80023aa:	fa92 f2a2 	rbit	r2, r2
 80023ae:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80023b2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80023b6:	fab2 f282 	clz	r2, r2
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	f042 0220 	orr.w	r2, r2, #32
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	f002 021f 	and.w	r2, r2, #31
 80023c6:	2101      	movs	r1, #1
 80023c8:	fa01 f202 	lsl.w	r2, r1, r2
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1ab      	bne.n	800232a <HAL_RCC_OscConfig+0x26a>
 80023d2:	e002      	b.n	80023da <HAL_RCC_OscConfig+0x31a>
 80023d4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 817f 	beq.w	80026ee <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023f0:	4ba7      	ldr	r3, [pc, #668]	; (8002690 <HAL_RCC_OscConfig+0x5d0>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00c      	beq.n	8002416 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023fc:	4ba4      	ldr	r3, [pc, #656]	; (8002690 <HAL_RCC_OscConfig+0x5d0>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b08      	cmp	r3, #8
 8002406:	d173      	bne.n	80024f0 <HAL_RCC_OscConfig+0x430>
 8002408:	4ba1      	ldr	r3, [pc, #644]	; (8002690 <HAL_RCC_OscConfig+0x5d0>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002414:	d16c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x430>
 8002416:	2302      	movs	r3, #2
 8002418:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002428:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b01      	cmp	r3, #1
 800243e:	d102      	bne.n	8002446 <HAL_RCC_OscConfig+0x386>
 8002440:	4b93      	ldr	r3, [pc, #588]	; (8002690 <HAL_RCC_OscConfig+0x5d0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	e013      	b.n	800246e <HAL_RCC_OscConfig+0x3ae>
 8002446:	2302      	movs	r3, #2
 8002448:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002458:	2302      	movs	r3, #2
 800245a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800245e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800246a:	4b89      	ldr	r3, [pc, #548]	; (8002690 <HAL_RCC_OscConfig+0x5d0>)
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	2202      	movs	r2, #2
 8002470:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002474:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002478:	fa92 f2a2 	rbit	r2, r2
 800247c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002480:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002484:	fab2 f282 	clz	r2, r2
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	f042 0220 	orr.w	r2, r2, #32
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	f002 021f 	and.w	r2, r2, #31
 8002494:	2101      	movs	r1, #1
 8002496:	fa01 f202 	lsl.w	r2, r1, r2
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <HAL_RCC_OscConfig+0x3f6>
 80024a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d002      	beq.n	80024b6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	f000 be52 	b.w	800315a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b6:	4b76      	ldr	r3, [pc, #472]	; (8002690 <HAL_RCC_OscConfig+0x5d0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	21f8      	movs	r1, #248	; 0xf8
 80024cc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80024d4:	fa91 f1a1 	rbit	r1, r1
 80024d8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80024dc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80024e0:	fab1 f181 	clz	r1, r1
 80024e4:	b2c9      	uxtb	r1, r1
 80024e6:	408b      	lsls	r3, r1
 80024e8:	4969      	ldr	r1, [pc, #420]	; (8002690 <HAL_RCC_OscConfig+0x5d0>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ee:	e0fe      	b.n	80026ee <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 8088 	beq.w	8002612 <HAL_RCC_OscConfig+0x552>
 8002502:	2301      	movs	r3, #1
 8002504:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002514:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002522:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	461a      	mov	r2, r3
 800252a:	2301      	movs	r3, #1
 800252c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fd ffd5 	bl	80004dc <HAL_GetTick>
 8002532:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002536:	e00a      	b.n	800254e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002538:	f7fd ffd0 	bl	80004dc <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d902      	bls.n	800254e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	f000 be06 	b.w	800315a <HAL_RCC_OscConfig+0x109a>
 800254e:	2302      	movs	r3, #2
 8002550:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002560:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b01      	cmp	r3, #1
 8002576:	d102      	bne.n	800257e <HAL_RCC_OscConfig+0x4be>
 8002578:	4b45      	ldr	r3, [pc, #276]	; (8002690 <HAL_RCC_OscConfig+0x5d0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	e013      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e6>
 800257e:	2302      	movs	r3, #2
 8002580:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002590:	2302      	movs	r3, #2
 8002592:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002596:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80025a2:	4b3b      	ldr	r3, [pc, #236]	; (8002690 <HAL_RCC_OscConfig+0x5d0>)
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	2202      	movs	r2, #2
 80025a8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80025ac:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80025b0:	fa92 f2a2 	rbit	r2, r2
 80025b4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80025b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80025bc:	fab2 f282 	clz	r2, r2
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	f042 0220 	orr.w	r2, r2, #32
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	f002 021f 	and.w	r2, r2, #31
 80025cc:	2101      	movs	r1, #1
 80025ce:	fa01 f202 	lsl.w	r2, r1, r2
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0af      	beq.n	8002538 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d8:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <HAL_RCC_OscConfig+0x5d0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	21f8      	movs	r1, #248	; 0xf8
 80025ee:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80025f6:	fa91 f1a1 	rbit	r1, r1
 80025fa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80025fe:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002602:	fab1 f181 	clz	r1, r1
 8002606:	b2c9      	uxtb	r1, r1
 8002608:	408b      	lsls	r3, r1
 800260a:	4921      	ldr	r1, [pc, #132]	; (8002690 <HAL_RCC_OscConfig+0x5d0>)
 800260c:	4313      	orrs	r3, r2
 800260e:	600b      	str	r3, [r1, #0]
 8002610:	e06d      	b.n	80026ee <HAL_RCC_OscConfig+0x62e>
 8002612:	2301      	movs	r3, #1
 8002614:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002624:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002632:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	461a      	mov	r2, r3
 800263a:	2300      	movs	r3, #0
 800263c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263e:	f7fd ff4d 	bl	80004dc <HAL_GetTick>
 8002642:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002646:	e00a      	b.n	800265e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002648:	f7fd ff48 	bl	80004dc <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d902      	bls.n	800265e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	f000 bd7e 	b.w	800315a <HAL_RCC_OscConfig+0x109a>
 800265e:	2302      	movs	r3, #2
 8002660:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002668:	fa93 f3a3 	rbit	r3, r3
 800266c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002670:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002674:	fab3 f383 	clz	r3, r3
 8002678:	b2db      	uxtb	r3, r3
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b01      	cmp	r3, #1
 8002686:	d105      	bne.n	8002694 <HAL_RCC_OscConfig+0x5d4>
 8002688:	4b01      	ldr	r3, [pc, #4]	; (8002690 <HAL_RCC_OscConfig+0x5d0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	e016      	b.n	80026bc <HAL_RCC_OscConfig+0x5fc>
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
 8002694:	2302      	movs	r3, #2
 8002696:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80026a6:	2302      	movs	r3, #2
 80026a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80026ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80026b0:	fa93 f3a3 	rbit	r3, r3
 80026b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80026b8:	4bbf      	ldr	r3, [pc, #764]	; (80029b8 <HAL_RCC_OscConfig+0x8f8>)
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	2202      	movs	r2, #2
 80026be:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80026c2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80026c6:	fa92 f2a2 	rbit	r2, r2
 80026ca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80026ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80026d2:	fab2 f282 	clz	r2, r2
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	f042 0220 	orr.w	r2, r2, #32
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	f002 021f 	and.w	r2, r2, #31
 80026e2:	2101      	movs	r1, #1
 80026e4:	fa01 f202 	lsl.w	r2, r1, r2
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1ac      	bne.n	8002648 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8113 	beq.w	800292a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002708:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d07c      	beq.n	800280e <HAL_RCC_OscConfig+0x74e>
 8002714:	2301      	movs	r3, #1
 8002716:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002726:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	4ba2      	ldr	r3, [pc, #648]	; (80029bc <HAL_RCC_OscConfig+0x8fc>)
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	461a      	mov	r2, r3
 800273a:	2301      	movs	r3, #1
 800273c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273e:	f7fd fecd 	bl	80004dc <HAL_GetTick>
 8002742:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002746:	e00a      	b.n	800275e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002748:	f7fd fec8 	bl	80004dc <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d902      	bls.n	800275e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	f000 bcfe 	b.w	800315a <HAL_RCC_OscConfig+0x109a>
 800275e:	2302      	movs	r3, #2
 8002760:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002768:	fa93 f2a3 	rbit	r2, r3
 800276c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002770:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800277a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800277e:	2202      	movs	r2, #2
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002786:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	fa93 f2a3 	rbit	r2, r3
 8002790:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800279e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027a2:	2202      	movs	r2, #2
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	fa93 f2a3 	rbit	r2, r3
 80027b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80027bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027be:	4b7e      	ldr	r3, [pc, #504]	; (80029b8 <HAL_RCC_OscConfig+0x8f8>)
 80027c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80027ca:	2102      	movs	r1, #2
 80027cc:	6019      	str	r1, [r3, #0]
 80027ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	fa93 f1a3 	rbit	r1, r3
 80027dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80027e4:	6019      	str	r1, [r3, #0]
  return result;
 80027e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	fab3 f383 	clz	r3, r3
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	2101      	movs	r1, #1
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d09d      	beq.n	8002748 <HAL_RCC_OscConfig+0x688>
 800280c:	e08d      	b.n	800292a <HAL_RCC_OscConfig+0x86a>
 800280e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002812:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800281e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	fa93 f2a3 	rbit	r2, r3
 8002828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800282c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002830:	601a      	str	r2, [r3, #0]
  return result;
 8002832:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002836:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800283a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800283c:	fab3 f383 	clz	r3, r3
 8002840:	b2db      	uxtb	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	4b5d      	ldr	r3, [pc, #372]	; (80029bc <HAL_RCC_OscConfig+0x8fc>)
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	461a      	mov	r2, r3
 800284c:	2300      	movs	r3, #0
 800284e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002850:	f7fd fe44 	bl	80004dc <HAL_GetTick>
 8002854:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002858:	e00a      	b.n	8002870 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800285a:	f7fd fe3f 	bl	80004dc <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d902      	bls.n	8002870 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	f000 bc75 	b.w	800315a <HAL_RCC_OscConfig+0x109a>
 8002870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002874:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002878:	2202      	movs	r2, #2
 800287a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002880:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	fa93 f2a3 	rbit	r2, r3
 800288a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800288e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002898:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800289c:	2202      	movs	r2, #2
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	fa93 f2a3 	rbit	r2, r3
 80028ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028c0:	2202      	movs	r2, #2
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	fa93 f2a3 	rbit	r2, r3
 80028d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80028da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028dc:	4b36      	ldr	r3, [pc, #216]	; (80029b8 <HAL_RCC_OscConfig+0x8f8>)
 80028de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80028e8:	2102      	movs	r1, #2
 80028ea:	6019      	str	r1, [r3, #0]
 80028ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	fa93 f1a3 	rbit	r1, r3
 80028fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028fe:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002902:	6019      	str	r1, [r3, #0]
  return result;
 8002904:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002908:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002918:	b2db      	uxtb	r3, r3
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	2101      	movs	r1, #1
 8002920:	fa01 f303 	lsl.w	r3, r1, r3
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d197      	bne.n	800285a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800292a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800292e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 81a5 	beq.w	8002c8a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002940:	2300      	movs	r3, #0
 8002942:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002946:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <HAL_RCC_OscConfig+0x8f8>)
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d116      	bne.n	8002980 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002952:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_RCC_OscConfig+0x8f8>)
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	4a18      	ldr	r2, [pc, #96]	; (80029b8 <HAL_RCC_OscConfig+0x8f8>)
 8002958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295c:	61d3      	str	r3, [r2, #28]
 800295e:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <HAL_RCC_OscConfig+0x8f8>)
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002966:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800296a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002974:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002978:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800297a:	2301      	movs	r3, #1
 800297c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002980:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <HAL_RCC_OscConfig+0x900>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d121      	bne.n	80029d0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <HAL_RCC_OscConfig+0x900>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <HAL_RCC_OscConfig+0x900>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002996:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002998:	f7fd fda0 	bl	80004dc <HAL_GetTick>
 800299c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a0:	e010      	b.n	80029c4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a2:	f7fd fd9b 	bl	80004dc <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d908      	bls.n	80029c4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e3d1      	b.n	800315a <HAL_RCC_OscConfig+0x109a>
 80029b6:	bf00      	nop
 80029b8:	40021000 	.word	0x40021000
 80029bc:	10908120 	.word	0x10908120
 80029c0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c4:	4b8d      	ldr	r3, [pc, #564]	; (8002bfc <HAL_RCC_OscConfig+0xb3c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0e8      	beq.n	80029a2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d106      	bne.n	80029ee <HAL_RCC_OscConfig+0x92e>
 80029e0:	4b87      	ldr	r3, [pc, #540]	; (8002c00 <HAL_RCC_OscConfig+0xb40>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	4a86      	ldr	r2, [pc, #536]	; (8002c00 <HAL_RCC_OscConfig+0xb40>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6213      	str	r3, [r2, #32]
 80029ec:	e035      	b.n	8002a5a <HAL_RCC_OscConfig+0x99a>
 80029ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x958>
 80029fe:	4b80      	ldr	r3, [pc, #512]	; (8002c00 <HAL_RCC_OscConfig+0xb40>)
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	4a7f      	ldr	r2, [pc, #508]	; (8002c00 <HAL_RCC_OscConfig+0xb40>)
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	6213      	str	r3, [r2, #32]
 8002a0a:	4b7d      	ldr	r3, [pc, #500]	; (8002c00 <HAL_RCC_OscConfig+0xb40>)
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	4a7c      	ldr	r2, [pc, #496]	; (8002c00 <HAL_RCC_OscConfig+0xb40>)
 8002a10:	f023 0304 	bic.w	r3, r3, #4
 8002a14:	6213      	str	r3, [r2, #32]
 8002a16:	e020      	b.n	8002a5a <HAL_RCC_OscConfig+0x99a>
 8002a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2b05      	cmp	r3, #5
 8002a26:	d10c      	bne.n	8002a42 <HAL_RCC_OscConfig+0x982>
 8002a28:	4b75      	ldr	r3, [pc, #468]	; (8002c00 <HAL_RCC_OscConfig+0xb40>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4a74      	ldr	r2, [pc, #464]	; (8002c00 <HAL_RCC_OscConfig+0xb40>)
 8002a2e:	f043 0304 	orr.w	r3, r3, #4
 8002a32:	6213      	str	r3, [r2, #32]
 8002a34:	4b72      	ldr	r3, [pc, #456]	; (8002c00 <HAL_RCC_OscConfig+0xb40>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	4a71      	ldr	r2, [pc, #452]	; (8002c00 <HAL_RCC_OscConfig+0xb40>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6213      	str	r3, [r2, #32]
 8002a40:	e00b      	b.n	8002a5a <HAL_RCC_OscConfig+0x99a>
 8002a42:	4b6f      	ldr	r3, [pc, #444]	; (8002c00 <HAL_RCC_OscConfig+0xb40>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4a6e      	ldr	r2, [pc, #440]	; (8002c00 <HAL_RCC_OscConfig+0xb40>)
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	6213      	str	r3, [r2, #32]
 8002a4e:	4b6c      	ldr	r3, [pc, #432]	; (8002c00 <HAL_RCC_OscConfig+0xb40>)
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	4a6b      	ldr	r2, [pc, #428]	; (8002c00 <HAL_RCC_OscConfig+0xb40>)
 8002a54:	f023 0304 	bic.w	r3, r3, #4
 8002a58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 8081 	beq.w	8002b6e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6c:	f7fd fd36 	bl	80004dc <HAL_GetTick>
 8002a70:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a74:	e00b      	b.n	8002a8e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a76:	f7fd fd31 	bl	80004dc <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e365      	b.n	800315a <HAL_RCC_OscConfig+0x109a>
 8002a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a92:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a96:	2202      	movs	r2, #2
 8002a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a9e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	fa93 f2a3 	rbit	r2, r3
 8002aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002aba:	2202      	movs	r2, #2
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	fa93 f2a3 	rbit	r2, r3
 8002acc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ad0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002ad4:	601a      	str	r2, [r3, #0]
  return result;
 8002ad6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ada:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002ade:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae0:	fab3 f383 	clz	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f043 0302 	orr.w	r3, r3, #2
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d102      	bne.n	8002afa <HAL_RCC_OscConfig+0xa3a>
 8002af4:	4b42      	ldr	r3, [pc, #264]	; (8002c00 <HAL_RCC_OscConfig+0xb40>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	e013      	b.n	8002b22 <HAL_RCC_OscConfig+0xa62>
 8002afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002afe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002b02:	2202      	movs	r2, #2
 8002b04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b0a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	fa93 f2a3 	rbit	r2, r3
 8002b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b18:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	4b38      	ldr	r3, [pc, #224]	; (8002c00 <HAL_RCC_OscConfig+0xb40>)
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b26:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b2a:	2102      	movs	r1, #2
 8002b2c:	6011      	str	r1, [r2, #0]
 8002b2e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b32:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	fa92 f1a2 	rbit	r1, r2
 8002b3c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b40:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002b44:	6011      	str	r1, [r2, #0]
  return result;
 8002b46:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b4a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	fab2 f282 	clz	r2, r2
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	f002 021f 	and.w	r2, r2, #31
 8002b60:	2101      	movs	r1, #1
 8002b62:	fa01 f202 	lsl.w	r2, r1, r2
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d084      	beq.n	8002a76 <HAL_RCC_OscConfig+0x9b6>
 8002b6c:	e083      	b.n	8002c76 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6e:	f7fd fcb5 	bl	80004dc <HAL_GetTick>
 8002b72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b76:	e00b      	b.n	8002b90 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b78:	f7fd fcb0 	bl	80004dc <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e2e4      	b.n	800315a <HAL_RCC_OscConfig+0x109a>
 8002b90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b94:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002b98:	2202      	movs	r2, #2
 8002b9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	fa93 f2a3 	rbit	r2, r3
 8002baa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bb8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	fa93 f2a3 	rbit	r2, r3
 8002bce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002bd6:	601a      	str	r2, [r3, #0]
  return result;
 8002bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bdc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002be0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	095b      	lsrs	r3, r3, #5
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f043 0302 	orr.w	r3, r3, #2
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d106      	bne.n	8002c04 <HAL_RCC_OscConfig+0xb44>
 8002bf6:	4b02      	ldr	r3, [pc, #8]	; (8002c00 <HAL_RCC_OscConfig+0xb40>)
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	e017      	b.n	8002c2c <HAL_RCC_OscConfig+0xb6c>
 8002bfc:	40007000 	.word	0x40007000
 8002c00:	40021000 	.word	0x40021000
 8002c04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c08:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c14:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	fa93 f2a3 	rbit	r2, r3
 8002c1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c22:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	4bb3      	ldr	r3, [pc, #716]	; (8002ef8 <HAL_RCC_OscConfig+0xe38>)
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c30:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c34:	2102      	movs	r1, #2
 8002c36:	6011      	str	r1, [r2, #0]
 8002c38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c3c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	fa92 f1a2 	rbit	r1, r2
 8002c46:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c4a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002c4e:	6011      	str	r1, [r2, #0]
  return result;
 8002c50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c54:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	fab2 f282 	clz	r2, r2
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	f002 021f 	and.w	r2, r2, #31
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d180      	bne.n	8002b78 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c76:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d105      	bne.n	8002c8a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c7e:	4b9e      	ldr	r3, [pc, #632]	; (8002ef8 <HAL_RCC_OscConfig+0xe38>)
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	4a9d      	ldr	r2, [pc, #628]	; (8002ef8 <HAL_RCC_OscConfig+0xe38>)
 8002c84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c88:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 825e 	beq.w	8003158 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c9c:	4b96      	ldr	r3, [pc, #600]	; (8002ef8 <HAL_RCC_OscConfig+0xe38>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	f000 821f 	beq.w	80030e8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	f040 8170 	bne.w	8002f9c <HAL_RCC_OscConfig+0xedc>
 8002cbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002cc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	fa93 f2a3 	rbit	r2, r3
 8002cd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cdc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ce0:	601a      	str	r2, [r3, #0]
  return result;
 8002ce2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002cea:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cec:	fab3 f383 	clz	r3, r3
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cf6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2300      	movs	r3, #0
 8002d00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d02:	f7fd fbeb 	bl	80004dc <HAL_GetTick>
 8002d06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d0a:	e009      	b.n	8002d20 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7fd fbe6 	bl	80004dc <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e21c      	b.n	800315a <HAL_RCC_OscConfig+0x109a>
 8002d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d24:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d32:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	fa93 f2a3 	rbit	r2, r3
 8002d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d40:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002d44:	601a      	str	r2, [r3, #0]
  return result;
 8002d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d4a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002d4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d50:	fab3 f383 	clz	r3, r3
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d102      	bne.n	8002d6a <HAL_RCC_OscConfig+0xcaa>
 8002d64:	4b64      	ldr	r3, [pc, #400]	; (8002ef8 <HAL_RCC_OscConfig+0xe38>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	e027      	b.n	8002dba <HAL_RCC_OscConfig+0xcfa>
 8002d6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d6e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002d72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d7c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	fa93 f2a3 	rbit	r2, r3
 8002d86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d8a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d94:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002d98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	fa93 f2a3 	rbit	r2, r3
 8002dac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002db0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <HAL_RCC_OscConfig+0xe38>)
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dbe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002dc2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002dc6:	6011      	str	r1, [r2, #0]
 8002dc8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dcc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	fa92 f1a2 	rbit	r1, r2
 8002dd6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dda:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002dde:	6011      	str	r1, [r2, #0]
  return result;
 8002de0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002de4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	fab2 f282 	clz	r2, r2
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	f042 0220 	orr.w	r2, r2, #32
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	f002 021f 	and.w	r2, r2, #31
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d182      	bne.n	8002d0c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e06:	4b3c      	ldr	r3, [pc, #240]	; (8002ef8 <HAL_RCC_OscConfig+0xe38>)
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	f023 020f 	bic.w	r2, r3, #15
 8002e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	4937      	ldr	r1, [pc, #220]	; (8002ef8 <HAL_RCC_OscConfig+0xe38>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002e20:	4b35      	ldr	r3, [pc, #212]	; (8002ef8 <HAL_RCC_OscConfig+0xe38>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002e28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6a19      	ldr	r1, [r3, #32]
 8002e34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	430b      	orrs	r3, r1
 8002e42:	492d      	ldr	r1, [pc, #180]	; (8002ef8 <HAL_RCC_OscConfig+0xe38>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	604b      	str	r3, [r1, #4]
 8002e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e4c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002e50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e5a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	fa93 f2a3 	rbit	r2, r3
 8002e64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e68:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002e6c:	601a      	str	r2, [r3, #0]
  return result;
 8002e6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e72:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002e76:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e78:	fab3 f383 	clz	r3, r3
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e82:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7fd fb25 	bl	80004dc <HAL_GetTick>
 8002e92:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e96:	e009      	b.n	8002eac <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e98:	f7fd fb20 	bl	80004dc <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e156      	b.n	800315a <HAL_RCC_OscConfig+0x109a>
 8002eac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002eb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ebe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	fa93 f2a3 	rbit	r2, r3
 8002ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ecc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ed0:	601a      	str	r2, [r3, #0]
  return result;
 8002ed2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ed6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002eda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002edc:	fab3 f383 	clz	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d105      	bne.n	8002efc <HAL_RCC_OscConfig+0xe3c>
 8002ef0:	4b01      	ldr	r3, [pc, #4]	; (8002ef8 <HAL_RCC_OscConfig+0xe38>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	e02a      	b.n	8002f4c <HAL_RCC_OscConfig+0xe8c>
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f00:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002f04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f0e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	fa93 f2a3 	rbit	r2, r3
 8002f18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f1c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f26:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002f2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f34:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	fa93 f2a3 	rbit	r2, r3
 8002f3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f42:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	4b86      	ldr	r3, [pc, #536]	; (8003164 <HAL_RCC_OscConfig+0x10a4>)
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f50:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002f54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f58:	6011      	str	r1, [r2, #0]
 8002f5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f5e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	fa92 f1a2 	rbit	r1, r2
 8002f68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f6c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002f70:	6011      	str	r1, [r2, #0]
  return result;
 8002f72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f76:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	fab2 f282 	clz	r2, r2
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	f042 0220 	orr.w	r2, r2, #32
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	f002 021f 	and.w	r2, r2, #31
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f43f af7f 	beq.w	8002e98 <HAL_RCC_OscConfig+0xdd8>
 8002f9a:	e0dd      	b.n	8003158 <HAL_RCC_OscConfig+0x1098>
 8002f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002fa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	fa93 f2a3 	rbit	r2, r3
 8002fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fbc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002fc0:	601a      	str	r2, [r3, #0]
  return result;
 8002fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fc6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002fca:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fcc:	fab3 f383 	clz	r3, r3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fd6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2300      	movs	r3, #0
 8002fe0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe2:	f7fd fa7b 	bl	80004dc <HAL_GetTick>
 8002fe6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fea:	e009      	b.n	8003000 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fec:	f7fd fa76 	bl	80004dc <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e0ac      	b.n	800315a <HAL_RCC_OscConfig+0x109a>
 8003000:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003004:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800300c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003012:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	fa93 f2a3 	rbit	r2, r3
 800301c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003020:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003024:	601a      	str	r2, [r3, #0]
  return result;
 8003026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800302a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800302e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	b2db      	uxtb	r3, r3
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d102      	bne.n	800304a <HAL_RCC_OscConfig+0xf8a>
 8003044:	4b47      	ldr	r3, [pc, #284]	; (8003164 <HAL_RCC_OscConfig+0x10a4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	e027      	b.n	800309a <HAL_RCC_OscConfig+0xfda>
 800304a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800304e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003052:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003056:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800305c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	fa93 f2a3 	rbit	r2, r3
 8003066:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800306a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003074:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003078:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003082:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	fa93 f2a3 	rbit	r2, r3
 800308c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003090:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	4b33      	ldr	r3, [pc, #204]	; (8003164 <HAL_RCC_OscConfig+0x10a4>)
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800309e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80030a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030a6:	6011      	str	r1, [r2, #0]
 80030a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030ac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	fa92 f1a2 	rbit	r1, r2
 80030b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030ba:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80030be:	6011      	str	r1, [r2, #0]
  return result;
 80030c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030c4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80030c8:	6812      	ldr	r2, [r2, #0]
 80030ca:	fab2 f282 	clz	r2, r2
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	f042 0220 	orr.w	r2, r2, #32
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	f002 021f 	and.w	r2, r2, #31
 80030da:	2101      	movs	r1, #1
 80030dc:	fa01 f202 	lsl.w	r2, r1, r2
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d182      	bne.n	8002fec <HAL_RCC_OscConfig+0xf2c>
 80030e6:	e037      	b.n	8003158 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e02e      	b.n	800315a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030fc:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_RCC_OscConfig+0x10a4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003104:	4b17      	ldr	r3, [pc, #92]	; (8003164 <HAL_RCC_OscConfig+0x10a4>)
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800310c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003110:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003114:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003118:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	429a      	cmp	r2, r3
 8003122:	d117      	bne.n	8003154 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003124:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003128:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800312c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003130:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003138:	429a      	cmp	r2, r3
 800313a:	d10b      	bne.n	8003154 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800313c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003140:	f003 020f 	and.w	r2, r3, #15
 8003144:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003148:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003150:	429a      	cmp	r2, r3
 8003152:	d001      	beq.n	8003158 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e000      	b.n	800315a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40021000 	.word	0x40021000

08003168 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b09e      	sub	sp, #120	; 0x78
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e162      	b.n	8003446 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003180:	4b90      	ldr	r3, [pc, #576]	; (80033c4 <HAL_RCC_ClockConfig+0x25c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d910      	bls.n	80031b0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318e:	4b8d      	ldr	r3, [pc, #564]	; (80033c4 <HAL_RCC_ClockConfig+0x25c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 0207 	bic.w	r2, r3, #7
 8003196:	498b      	ldr	r1, [pc, #556]	; (80033c4 <HAL_RCC_ClockConfig+0x25c>)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	4313      	orrs	r3, r2
 800319c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800319e:	4b89      	ldr	r3, [pc, #548]	; (80033c4 <HAL_RCC_ClockConfig+0x25c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e14a      	b.n	8003446 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031bc:	4b82      	ldr	r3, [pc, #520]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	497f      	ldr	r1, [pc, #508]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 80dc 	beq.w	8003394 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d13c      	bne.n	800325e <HAL_RCC_ClockConfig+0xf6>
 80031e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031ec:	fa93 f3a3 	rbit	r3, r3
 80031f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f4:	fab3 f383 	clz	r3, r3
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b01      	cmp	r3, #1
 8003206:	d102      	bne.n	800320e <HAL_RCC_ClockConfig+0xa6>
 8003208:	4b6f      	ldr	r3, [pc, #444]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	e00f      	b.n	800322e <HAL_RCC_ClockConfig+0xc6>
 800320e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003212:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	667b      	str	r3, [r7, #100]	; 0x64
 800321c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003220:	663b      	str	r3, [r7, #96]	; 0x60
 8003222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003224:	fa93 f3a3 	rbit	r3, r3
 8003228:	65fb      	str	r3, [r7, #92]	; 0x5c
 800322a:	4b67      	ldr	r3, [pc, #412]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003232:	65ba      	str	r2, [r7, #88]	; 0x58
 8003234:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003236:	fa92 f2a2 	rbit	r2, r2
 800323a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800323c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800323e:	fab2 f282 	clz	r2, r2
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	f042 0220 	orr.w	r2, r2, #32
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	f002 021f 	and.w	r2, r2, #31
 800324e:	2101      	movs	r1, #1
 8003250:	fa01 f202 	lsl.w	r2, r1, r2
 8003254:	4013      	ands	r3, r2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d17b      	bne.n	8003352 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e0f3      	b.n	8003446 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d13c      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x178>
 8003266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800326a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	b2db      	uxtb	r3, r3
 800327c:	095b      	lsrs	r3, r3, #5
 800327e:	b2db      	uxtb	r3, r3
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b01      	cmp	r3, #1
 8003288:	d102      	bne.n	8003290 <HAL_RCC_ClockConfig+0x128>
 800328a:	4b4f      	ldr	r3, [pc, #316]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	e00f      	b.n	80032b0 <HAL_RCC_ClockConfig+0x148>
 8003290:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003294:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003298:	fa93 f3a3 	rbit	r3, r3
 800329c:	647b      	str	r3, [r7, #68]	; 0x44
 800329e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032a2:	643b      	str	r3, [r7, #64]	; 0x40
 80032a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ac:	4b46      	ldr	r3, [pc, #280]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032b4:	63ba      	str	r2, [r7, #56]	; 0x38
 80032b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032b8:	fa92 f2a2 	rbit	r2, r2
 80032bc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80032be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032c0:	fab2 f282 	clz	r2, r2
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	f042 0220 	orr.w	r2, r2, #32
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	f002 021f 	and.w	r2, r2, #31
 80032d0:	2101      	movs	r1, #1
 80032d2:	fa01 f202 	lsl.w	r2, r1, r2
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d13a      	bne.n	8003352 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e0b2      	b.n	8003446 <HAL_RCC_ClockConfig+0x2de>
 80032e0:	2302      	movs	r3, #2
 80032e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e6:	fa93 f3a3 	rbit	r3, r3
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d102      	bne.n	8003308 <HAL_RCC_ClockConfig+0x1a0>
 8003302:	4b31      	ldr	r3, [pc, #196]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	e00d      	b.n	8003324 <HAL_RCC_ClockConfig+0x1bc>
 8003308:	2302      	movs	r3, #2
 800330a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
 8003314:	2302      	movs	r3, #2
 8003316:	623b      	str	r3, [r7, #32]
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	61fb      	str	r3, [r7, #28]
 8003320:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	2202      	movs	r2, #2
 8003326:	61ba      	str	r2, [r7, #24]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	fa92 f2a2 	rbit	r2, r2
 800332e:	617a      	str	r2, [r7, #20]
  return result;
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	fab2 f282 	clz	r2, r2
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	f042 0220 	orr.w	r2, r2, #32
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	f002 021f 	and.w	r2, r2, #31
 8003342:	2101      	movs	r1, #1
 8003344:	fa01 f202 	lsl.w	r2, r1, r2
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e079      	b.n	8003446 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003352:	4b1d      	ldr	r3, [pc, #116]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f023 0203 	bic.w	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	491a      	ldr	r1, [pc, #104]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 8003360:	4313      	orrs	r3, r2
 8003362:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003364:	f7fd f8ba 	bl	80004dc <HAL_GetTick>
 8003368:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336a:	e00a      	b.n	8003382 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336c:	f7fd f8b6 	bl	80004dc <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e061      	b.n	8003446 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003382:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <HAL_RCC_ClockConfig+0x260>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f003 020c 	and.w	r2, r3, #12
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	429a      	cmp	r2, r3
 8003392:	d1eb      	bne.n	800336c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003394:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_RCC_ClockConfig+0x25c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d214      	bcs.n	80033cc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a2:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <HAL_RCC_ClockConfig+0x25c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 0207 	bic.w	r2, r3, #7
 80033aa:	4906      	ldr	r1, [pc, #24]	; (80033c4 <HAL_RCC_ClockConfig+0x25c>)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <HAL_RCC_ClockConfig+0x25c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d005      	beq.n	80033cc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e040      	b.n	8003446 <HAL_RCC_ClockConfig+0x2de>
 80033c4:	40022000 	.word	0x40022000
 80033c8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d8:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <HAL_RCC_ClockConfig+0x2e8>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	491a      	ldr	r1, [pc, #104]	; (8003450 <HAL_RCC_ClockConfig+0x2e8>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f6:	4b16      	ldr	r3, [pc, #88]	; (8003450 <HAL_RCC_ClockConfig+0x2e8>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4912      	ldr	r1, [pc, #72]	; (8003450 <HAL_RCC_ClockConfig+0x2e8>)
 8003406:	4313      	orrs	r3, r2
 8003408:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800340a:	f000 f829 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 800340e:	4601      	mov	r1, r0
 8003410:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <HAL_RCC_ClockConfig+0x2e8>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003418:	22f0      	movs	r2, #240	; 0xf0
 800341a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	fa92 f2a2 	rbit	r2, r2
 8003422:	60fa      	str	r2, [r7, #12]
  return result;
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	fab2 f282 	clz	r2, r2
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	40d3      	lsrs	r3, r2
 800342e:	4a09      	ldr	r2, [pc, #36]	; (8003454 <HAL_RCC_ClockConfig+0x2ec>)
 8003430:	5cd3      	ldrb	r3, [r2, r3]
 8003432:	fa21 f303 	lsr.w	r3, r1, r3
 8003436:	4a08      	ldr	r2, [pc, #32]	; (8003458 <HAL_RCC_ClockConfig+0x2f0>)
 8003438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800343a:	4b08      	ldr	r3, [pc, #32]	; (800345c <HAL_RCC_ClockConfig+0x2f4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fd f808 	bl	8000454 <HAL_InitTick>
  
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3778      	adds	r7, #120	; 0x78
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40021000 	.word	0x40021000
 8003454:	080080bc 	.word	0x080080bc
 8003458:	20000000 	.word	0x20000000
 800345c:	20000004 	.word	0x20000004

08003460 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003460:	b480      	push	{r7}
 8003462:	b08b      	sub	sp, #44	; 0x2c
 8003464:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	2300      	movs	r3, #0
 800346c:	61bb      	str	r3, [r7, #24]
 800346e:	2300      	movs	r3, #0
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800347a:	4b2a      	ldr	r3, [pc, #168]	; (8003524 <HAL_RCC_GetSysClockFreq+0xc4>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b04      	cmp	r3, #4
 8003488:	d002      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x30>
 800348a:	2b08      	cmp	r3, #8
 800348c:	d003      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0x36>
 800348e:	e03f      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003490:	4b25      	ldr	r3, [pc, #148]	; (8003528 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003492:	623b      	str	r3, [r7, #32]
      break;
 8003494:	e03f      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800349c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80034a0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	fa92 f2a2 	rbit	r2, r2
 80034a8:	607a      	str	r2, [r7, #4]
  return result;
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	fab2 f282 	clz	r2, r2
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	40d3      	lsrs	r3, r2
 80034b4:	4a1d      	ldr	r2, [pc, #116]	; (800352c <HAL_RCC_GetSysClockFreq+0xcc>)
 80034b6:	5cd3      	ldrb	r3, [r2, r3]
 80034b8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034ba:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	220f      	movs	r2, #15
 80034c4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	fa92 f2a2 	rbit	r2, r2
 80034cc:	60fa      	str	r2, [r7, #12]
  return result;
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	fab2 f282 	clz	r2, r2
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	40d3      	lsrs	r3, r2
 80034d8:	4a15      	ldr	r2, [pc, #84]	; (8003530 <HAL_RCC_GetSysClockFreq+0xd0>)
 80034da:	5cd3      	ldrb	r3, [r2, r3]
 80034dc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034e8:	4a0f      	ldr	r2, [pc, #60]	; (8003528 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	fb02 f303 	mul.w	r3, r2, r3
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
 80034f8:	e007      	b.n	800350a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034fa:	4a0b      	ldr	r2, [pc, #44]	; (8003528 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	fb02 f303 	mul.w	r3, r2, r3
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	623b      	str	r3, [r7, #32]
      break;
 800350e:	e002      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003512:	623b      	str	r3, [r7, #32]
      break;
 8003514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003516:	6a3b      	ldr	r3, [r7, #32]
}
 8003518:	4618      	mov	r0, r3
 800351a:	372c      	adds	r7, #44	; 0x2c
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	40021000 	.word	0x40021000
 8003528:	007a1200 	.word	0x007a1200
 800352c:	080080cc 	.word	0x080080cc
 8003530:	080080dc 	.word	0x080080dc

08003534 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b092      	sub	sp, #72	; 0x48
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003544:	2300      	movs	r3, #0
 8003546:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 80d4 	beq.w	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003558:	4b4e      	ldr	r3, [pc, #312]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10e      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003564:	4b4b      	ldr	r3, [pc, #300]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	4a4a      	ldr	r2, [pc, #296]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356e:	61d3      	str	r3, [r2, #28]
 8003570:	4b48      	ldr	r3, [pc, #288]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800357c:	2301      	movs	r3, #1
 800357e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003582:	4b45      	ldr	r3, [pc, #276]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358a:	2b00      	cmp	r3, #0
 800358c:	d118      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800358e:	4b42      	ldr	r3, [pc, #264]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a41      	ldr	r2, [pc, #260]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003598:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800359a:	f7fc ff9f 	bl	80004dc <HAL_GetTick>
 800359e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a0:	e008      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a2:	f7fc ff9b 	bl	80004dc <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b64      	cmp	r3, #100	; 0x64
 80035ae:	d901      	bls.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e1d6      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b4:	4b38      	ldr	r3, [pc, #224]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035c0:	4b34      	ldr	r3, [pc, #208]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 8084 	beq.w	80036da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035dc:	429a      	cmp	r2, r3
 80035de:	d07c      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035e0:	4b2c      	ldr	r3, [pc, #176]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	4b26      	ldr	r3, [pc, #152]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	461a      	mov	r2, r3
 800360a:	2301      	movs	r3, #1
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003612:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800361c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800361e:	fab3 f383 	clz	r3, r3
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	4b1d      	ldr	r3, [pc, #116]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	461a      	mov	r2, r3
 800362e:	2300      	movs	r3, #0
 8003630:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003632:	4a18      	ldr	r2, [pc, #96]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003636:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d04b      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003642:	f7fc ff4b 	bl	80004dc <HAL_GetTick>
 8003646:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003648:	e00a      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364a:	f7fc ff47 	bl	80004dc <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	f241 3288 	movw	r2, #5000	; 0x1388
 8003658:	4293      	cmp	r3, r2
 800365a:	d901      	bls.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e180      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003660:	2302      	movs	r3, #2
 8003662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
 800366c:	2302      	movs	r3, #2
 800366e:	623b      	str	r3, [r7, #32]
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	fa93 f3a3 	rbit	r3, r3
 8003676:	61fb      	str	r3, [r7, #28]
  return result;
 8003678:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367a:	fab3 f383 	clz	r3, r3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f043 0302 	orr.w	r3, r3, #2
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d108      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800368e:	4b01      	ldr	r3, [pc, #4]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	e00d      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003694:	40021000 	.word	0x40021000
 8003698:	40007000 	.word	0x40007000
 800369c:	10908100 	.word	0x10908100
 80036a0:	2302      	movs	r3, #2
 80036a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	4b9a      	ldr	r3, [pc, #616]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	2202      	movs	r2, #2
 80036b2:	613a      	str	r2, [r7, #16]
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	fa92 f2a2 	rbit	r2, r2
 80036ba:	60fa      	str	r2, [r7, #12]
  return result;
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	fab2 f282 	clz	r2, r2
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	f002 021f 	and.w	r2, r2, #31
 80036ce:	2101      	movs	r1, #1
 80036d0:	fa01 f202 	lsl.w	r2, r1, r2
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0b7      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036da:	4b8f      	ldr	r3, [pc, #572]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	498c      	ldr	r1, [pc, #560]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d105      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f4:	4b88      	ldr	r3, [pc, #544]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	4a87      	ldr	r2, [pc, #540]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800370c:	4b82      	ldr	r3, [pc, #520]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	f023 0203 	bic.w	r2, r3, #3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	497f      	ldr	r1, [pc, #508]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800371a:	4313      	orrs	r3, r2
 800371c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d008      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800372a:	4b7b      	ldr	r3, [pc, #492]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	4978      	ldr	r1, [pc, #480]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003738:	4313      	orrs	r3, r2
 800373a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003748:	4b73      	ldr	r3, [pc, #460]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	4970      	ldr	r1, [pc, #448]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003756:	4313      	orrs	r3, r2
 8003758:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	d008      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003766:	4b6c      	ldr	r3, [pc, #432]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	f023 0210 	bic.w	r2, r3, #16
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	4969      	ldr	r1, [pc, #420]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003774:	4313      	orrs	r3, r2
 8003776:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003784:	4b64      	ldr	r3, [pc, #400]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003790:	4961      	ldr	r1, [pc, #388]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003792:	4313      	orrs	r3, r2
 8003794:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037a2:	4b5d      	ldr	r3, [pc, #372]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f023 0220 	bic.w	r2, r3, #32
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	495a      	ldr	r1, [pc, #360]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037c0:	4b55      	ldr	r3, [pc, #340]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	4952      	ldr	r1, [pc, #328]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d008      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037de:	4b4e      	ldr	r3, [pc, #312]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	494b      	ldr	r1, [pc, #300]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037fc:	4b46      	ldr	r3, [pc, #280]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	4943      	ldr	r1, [pc, #268]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800380a:	4313      	orrs	r3, r2
 800380c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003816:	2b00      	cmp	r3, #0
 8003818:	d008      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800381a:	4b3f      	ldr	r3, [pc, #252]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	493c      	ldr	r1, [pc, #240]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003838:	4b37      	ldr	r3, [pc, #220]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	4934      	ldr	r1, [pc, #208]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003846:	4313      	orrs	r3, r2
 8003848:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003856:	4b30      	ldr	r3, [pc, #192]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	492d      	ldr	r1, [pc, #180]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003864:	4313      	orrs	r3, r2
 8003866:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003874:	4b28      	ldr	r3, [pc, #160]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003880:	4925      	ldr	r1, [pc, #148]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003882:	4313      	orrs	r3, r2
 8003884:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d008      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003892:	4b21      	ldr	r3, [pc, #132]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	491e      	ldr	r1, [pc, #120]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80038b0:	4b19      	ldr	r3, [pc, #100]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	4916      	ldr	r1, [pc, #88]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d008      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80038ce:	4b12      	ldr	r3, [pc, #72]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038da:	490f      	ldr	r1, [pc, #60]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80038ec:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f8:	4907      	ldr	r1, [pc, #28]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00c      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800390a:	4b03      	ldr	r3, [pc, #12]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	e002      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391e:	4913      	ldr	r1, [pc, #76]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003920:	4313      	orrs	r3, r2
 8003922:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003930:	4b0e      	ldr	r3, [pc, #56]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393c:	490b      	ldr	r1, [pc, #44]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800393e:	4313      	orrs	r3, r2
 8003940:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800394e:	4b07      	ldr	r3, [pc, #28]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395a:	4904      	ldr	r1, [pc, #16]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800395c:	4313      	orrs	r3, r2
 800395e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3748      	adds	r7, #72	; 0x48
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000

08003970 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003980:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003984:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	b29a      	uxth	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800399e:	b480      	push	{r7}
 80039a0:	b085      	sub	sp, #20
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80039a6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80039aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	43db      	mvns	r3, r3
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	4013      	ands	r3, r2
 80039be:	b29a      	uxth	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80039d4:	b084      	sub	sp, #16
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	f107 0014 	add.w	r0, r7, #20
 80039e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	b004      	add	sp, #16
 8003a14:	4770      	bx	lr
	...

08003a18 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b09d      	sub	sp, #116	; 0x74
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	78db      	ldrb	r3, [r3, #3]
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d81f      	bhi.n	8003a8a <USB_ActivateEndpoint+0x72>
 8003a4a:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <USB_ActivateEndpoint+0x38>)
 8003a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a50:	08003a61 	.word	0x08003a61
 8003a54:	08003a7d 	.word	0x08003a7d
 8003a58:	08003a93 	.word	0x08003a93
 8003a5c:	08003a6f 	.word	0x08003a6f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003a60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003a64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a68:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003a6c:	e012      	b.n	8003a94 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003a6e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003a72:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003a76:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003a7a:	e00b      	b.n	8003a94 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003a7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003a80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a84:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003a88:	e004      	b.n	8003a94 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003a90:	e000      	b.n	8003a94 <USB_ActivateEndpoint+0x7c>
      break;
 8003a92:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	441a      	add	r2, r3
 8003a9e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	b21b      	sxth	r3, r3
 8003ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ace:	b21a      	sxth	r2, r3
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	b21b      	sxth	r3, r3
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	b21b      	sxth	r3, r3
 8003ada:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	441a      	add	r2, r3
 8003ae8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003aec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003af0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	7b1b      	ldrb	r3, [r3, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f040 8149 	bne.w	8003d9c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	785b      	ldrb	r3, [r3, #1]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 8084 	beq.w	8003c1c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	4413      	add	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	00da      	lsls	r2, r3, #3
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	88db      	ldrh	r3, [r3, #6]
 8003b3c:	085b      	lsrs	r3, r3, #1
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	827b      	strh	r3, [r7, #18]
 8003b56:	8a7b      	ldrh	r3, [r7, #18]
 8003b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01b      	beq.n	8003b98 <USB_ActivateEndpoint+0x180>
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b76:	823b      	strh	r3, [r7, #16]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	441a      	add	r2, r3
 8003b82:	8a3b      	ldrh	r3, [r7, #16]
 8003b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	78db      	ldrb	r3, [r3, #3]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d020      	beq.n	8003be2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bb6:	81bb      	strh	r3, [r7, #12]
 8003bb8:	89bb      	ldrh	r3, [r7, #12]
 8003bba:	f083 0320 	eor.w	r3, r3, #32
 8003bbe:	81bb      	strh	r3, [r7, #12]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	441a      	add	r2, r3
 8003bca:	89bb      	ldrh	r3, [r7, #12]
 8003bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	8013      	strh	r3, [r2, #0]
 8003be0:	e2a6      	b.n	8004130 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bf8:	81fb      	strh	r3, [r7, #14]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	441a      	add	r2, r3
 8003c04:	89fb      	ldrh	r3, [r7, #14]
 8003c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	8013      	strh	r3, [r2, #0]
 8003c1a:	e289      	b.n	8004130 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	461a      	mov	r2, r3
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	4413      	add	r3, r2
 8003c2e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	00da      	lsls	r2, r3, #3
 8003c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c38:	4413      	add	r3, r2
 8003c3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	88db      	ldrh	r3, [r3, #6]
 8003c44:	085b      	lsrs	r3, r3, #1
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	4413      	add	r3, r2
 8003c62:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	00da      	lsls	r2, r3, #3
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d112      	bne.n	8003ca2 <USB_ActivateEndpoint+0x28a>
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	801a      	strh	r2, [r3, #0]
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	801a      	strh	r2, [r3, #0]
 8003ca0:	e02f      	b.n	8003d02 <USB_ActivateEndpoint+0x2ea>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b3e      	cmp	r3, #62	; 0x3e
 8003ca8:	d813      	bhi.n	8003cd2 <USB_ActivateEndpoint+0x2ba>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	085b      	lsrs	r3, r3, #1
 8003cb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <USB_ActivateEndpoint+0x2ac>
 8003cbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	029b      	lsls	r3, r3, #10
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	801a      	strh	r2, [r3, #0]
 8003cd0:	e017      	b.n	8003d02 <USB_ActivateEndpoint+0x2ea>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	095b      	lsrs	r3, r3, #5
 8003cd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d102      	bne.n	8003cec <USB_ActivateEndpoint+0x2d4>
 8003ce6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	029b      	lsls	r3, r3, #10
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003d10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d01b      	beq.n	8003d52 <USB_ActivateEndpoint+0x33a>
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d30:	843b      	strh	r3, [r7, #32]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	441a      	add	r2, r3
 8003d3c:	8c3b      	ldrh	r3, [r7, #32]
 8003d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d68:	83fb      	strh	r3, [r7, #30]
 8003d6a:	8bfb      	ldrh	r3, [r7, #30]
 8003d6c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003d70:	83fb      	strh	r3, [r7, #30]
 8003d72:	8bfb      	ldrh	r3, [r7, #30]
 8003d74:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d78:	83fb      	strh	r3, [r7, #30]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	441a      	add	r2, r3
 8003d84:	8bfb      	ldrh	r3, [r7, #30]
 8003d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	8013      	strh	r3, [r2, #0]
 8003d9a:	e1c9      	b.n	8004130 <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	78db      	ldrb	r3, [r3, #3]
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d11e      	bne.n	8003de2 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dba:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	441a      	add	r2, r3
 8003dc8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dd4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	8013      	strh	r3, [r2, #0]
 8003de0:	e01d      	b.n	8003e1e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	441a      	add	r2, r3
 8003e06:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e2e:	4413      	add	r3, r2
 8003e30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	00da      	lsls	r2, r3, #3
 8003e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e40:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	891b      	ldrh	r3, [r3, #8]
 8003e46:	085b      	lsrs	r3, r3, #1
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e50:	801a      	strh	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	657b      	str	r3, [r7, #84]	; 0x54
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e62:	4413      	add	r3, r2
 8003e64:	657b      	str	r3, [r7, #84]	; 0x54
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	00da      	lsls	r2, r3, #3
 8003e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e6e:	4413      	add	r3, r2
 8003e70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e74:	653b      	str	r3, [r7, #80]	; 0x50
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	895b      	ldrh	r3, [r3, #10]
 8003e7a:	085b      	lsrs	r3, r3, #1
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e84:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	785b      	ldrb	r3, [r3, #1]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f040 8093 	bne.w	8003fb6 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003ea0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01b      	beq.n	8003ee4 <USB_ActivateEndpoint+0x4cc>
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	441a      	add	r2, r3
 8003ece:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ed8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003ef2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d01b      	beq.n	8003f34 <USB_ActivateEndpoint+0x51c>
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f12:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	441a      	add	r2, r3
 8003f1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4a:	873b      	strh	r3, [r7, #56]	; 0x38
 8003f4c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003f4e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003f52:	873b      	strh	r3, [r7, #56]	; 0x38
 8003f54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003f56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f5a:	873b      	strh	r3, [r7, #56]	; 0x38
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	441a      	add	r2, r3
 8003f66:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f92:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	441a      	add	r2, r3
 8003f9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	8013      	strh	r3, [r2, #0]
 8003fb4:	e0bc      	b.n	8004130 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003fc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d01d      	beq.n	800400e <USB_ActivateEndpoint+0x5f6>
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	441a      	add	r2, r3
 8003ff6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004002:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800400a:	b29b      	uxth	r3, r3
 800400c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800401e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d01d      	beq.n	8004066 <USB_ActivateEndpoint+0x64e>
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	b29b      	uxth	r3, r3
 8004038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800403c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004040:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	441a      	add	r2, r3
 800404e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800405a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800405e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004062:	b29b      	uxth	r3, r3
 8004064:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	78db      	ldrb	r3, [r3, #3]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d024      	beq.n	80040b8 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	b29b      	uxth	r3, r3
 800407c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004084:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004088:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800408c:	f083 0320 	eor.w	r3, r3, #32
 8004090:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	441a      	add	r2, r3
 800409e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80040a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	8013      	strh	r3, [r2, #0]
 80040b6:	e01d      	b.n	80040f4 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	441a      	add	r2, r3
 80040dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80040e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	b29b      	uxth	r3, r3
 8004102:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	441a      	add	r2, r3
 8004118:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800411c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800412c:	b29b      	uxth	r3, r3
 800412e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004130:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004134:	4618      	mov	r0, r3
 8004136:	3774      	adds	r7, #116	; 0x74
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004140:	b480      	push	{r7}
 8004142:	b08d      	sub	sp, #52	; 0x34
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	7b1b      	ldrb	r3, [r3, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	f040 808e 	bne.w	8004270 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	785b      	ldrb	r3, [r3, #1]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d044      	beq.n	80041e6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	81bb      	strh	r3, [r7, #12]
 800416a:	89bb      	ldrh	r3, [r7, #12]
 800416c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01b      	beq.n	80041ac <USB_DeactivateEndpoint+0x6c>
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	817b      	strh	r3, [r7, #10]
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	441a      	add	r2, r3
 8004196:	897b      	ldrh	r3, [r7, #10]
 8004198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800419c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c2:	813b      	strh	r3, [r7, #8]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	441a      	add	r2, r3
 80041ce:	893b      	ldrh	r3, [r7, #8]
 80041d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	8013      	strh	r3, [r2, #0]
 80041e4:	e192      	b.n	800450c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	827b      	strh	r3, [r7, #18]
 80041f4:	8a7b      	ldrh	r3, [r7, #18]
 80041f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d01b      	beq.n	8004236 <USB_DeactivateEndpoint+0xf6>
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	b29b      	uxth	r3, r3
 800420c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004214:	823b      	strh	r3, [r7, #16]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	441a      	add	r2, r3
 8004220:	8a3b      	ldrh	r3, [r7, #16]
 8004222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800422a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800422e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004232:	b29b      	uxth	r3, r3
 8004234:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	b29b      	uxth	r3, r3
 8004244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424c:	81fb      	strh	r3, [r7, #14]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	441a      	add	r2, r3
 8004258:	89fb      	ldrh	r3, [r7, #14]
 800425a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800425e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426a:	b29b      	uxth	r3, r3
 800426c:	8013      	strh	r3, [r2, #0]
 800426e:	e14d      	b.n	800450c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	785b      	ldrb	r3, [r3, #1]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f040 80a5 	bne.w	80043c4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	843b      	strh	r3, [r7, #32]
 8004288:	8c3b      	ldrh	r3, [r7, #32]
 800428a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01b      	beq.n	80042ca <USB_DeactivateEndpoint+0x18a>
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a8:	83fb      	strh	r3, [r7, #30]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	441a      	add	r2, r3
 80042b4:	8bfb      	ldrh	r3, [r7, #30]
 80042b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	83bb      	strh	r3, [r7, #28]
 80042d8:	8bbb      	ldrh	r3, [r7, #28]
 80042da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01b      	beq.n	800431a <USB_DeactivateEndpoint+0x1da>
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f8:	837b      	strh	r3, [r7, #26]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	441a      	add	r2, r3
 8004304:	8b7b      	ldrh	r3, [r7, #26]
 8004306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800430a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800430e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004312:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004316:	b29b      	uxth	r3, r3
 8004318:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	b29b      	uxth	r3, r3
 8004328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004330:	833b      	strh	r3, [r7, #24]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	441a      	add	r2, r3
 800433c:	8b3b      	ldrh	r3, [r7, #24]
 800433e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800434a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800434e:	b29b      	uxth	r3, r3
 8004350:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004368:	82fb      	strh	r3, [r7, #22]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	441a      	add	r2, r3
 8004374:	8afb      	ldrh	r3, [r7, #22]
 8004376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800437a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800437e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004386:	b29b      	uxth	r3, r3
 8004388:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	b29b      	uxth	r3, r3
 8004398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a0:	82bb      	strh	r3, [r7, #20]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	441a      	add	r2, r3
 80043ac:	8abb      	ldrh	r3, [r7, #20]
 80043ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043be:	b29b      	uxth	r3, r3
 80043c0:	8013      	strh	r3, [r2, #0]
 80043c2:	e0a3      	b.n	800450c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80043d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80043d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01b      	beq.n	8004414 <USB_DeactivateEndpoint+0x2d4>
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	441a      	add	r2, r3
 80043fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800440c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004410:	b29b      	uxth	r3, r3
 8004412:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004422:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01b      	beq.n	8004464 <USB_DeactivateEndpoint+0x324>
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	b29b      	uxth	r3, r3
 800443a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004442:	853b      	strh	r3, [r7, #40]	; 0x28
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	441a      	add	r2, r3
 800444e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800445c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004460:	b29b      	uxth	r3, r3
 8004462:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	b29b      	uxth	r3, r3
 8004472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	441a      	add	r2, r3
 8004486:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800448c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004498:	b29b      	uxth	r3, r3
 800449a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	441a      	add	r2, r3
 80044be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	441a      	add	r2, r3
 80044f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80044f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004508:	b29b      	uxth	r3, r3
 800450a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3734      	adds	r7, #52	; 0x34
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b0c2      	sub	sp, #264	; 0x108
 800451e:	af00      	add	r7, sp, #0
 8004520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004524:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004528:	6018      	str	r0, [r3, #0]
 800452a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800452e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004532:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	785b      	ldrb	r3, [r3, #1]
 8004540:	2b01      	cmp	r3, #1
 8004542:	f040 867b 	bne.w	800523c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800454a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	429a      	cmp	r2, r3
 8004560:	d908      	bls.n	8004574 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004572:	e007      	b.n	8004584 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	7b1b      	ldrb	r3, [r3, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d13a      	bne.n	800460a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6959      	ldr	r1, [r3, #20]
 80045a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	88da      	ldrh	r2, [r3, #6]
 80045ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80045b6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80045ba:	6800      	ldr	r0, [r0, #0]
 80045bc:	f001 fc11 	bl	8005de2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80045c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045da:	b29b      	uxth	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	4413      	add	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	00da      	lsls	r2, r3, #3
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4413      	add	r3, r2
 80045f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	801a      	strh	r2, [r3, #0]
 8004606:	f000 bde3 	b.w	80051d0 <USB_EPStartXfer+0xcb6>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800460a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800460e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	78db      	ldrb	r3, [r3, #3]
 8004616:	2b02      	cmp	r3, #2
 8004618:	f040 843a 	bne.w	8004e90 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800461c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6a1a      	ldr	r2, [r3, #32]
 8004628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800462c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	429a      	cmp	r2, r3
 8004636:	f240 83b7 	bls.w	8004da8 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800463a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800463e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004660:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004668:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	441a      	add	r2, r3
 800467e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800468a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800468e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004692:	b29b      	uxth	r3, r3
 8004694:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800469a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6a1a      	ldr	r2, [r3, #32]
 80046a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046a6:	1ad2      	subs	r2, r2, r3
 80046a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80046b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 81b3 	beq.w	8004a42 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80046dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	633b      	str	r3, [r7, #48]	; 0x30
 80046e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d16d      	bne.n	80047d4 <USB_EPStartXfer+0x2ba>
 80046f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	62bb      	str	r3, [r7, #40]	; 0x28
 8004704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004712:	b29b      	uxth	r3, r3
 8004714:	461a      	mov	r2, r3
 8004716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004718:	4413      	add	r3, r2
 800471a:	62bb      	str	r3, [r7, #40]	; 0x28
 800471c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	00da      	lsls	r2, r3, #3
 800472a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472c:	4413      	add	r3, r2
 800472e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
 8004734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004738:	2b00      	cmp	r3, #0
 800473a:	d112      	bne.n	8004762 <USB_EPStartXfer+0x248>
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004746:	b29a      	uxth	r2, r3
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	801a      	strh	r2, [r3, #0]
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	b29b      	uxth	r3, r3
 8004752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800475a:	b29a      	uxth	r2, r3
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	801a      	strh	r2, [r3, #0]
 8004760:	e05d      	b.n	800481e <USB_EPStartXfer+0x304>
 8004762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004766:	2b3e      	cmp	r3, #62	; 0x3e
 8004768:	d817      	bhi.n	800479a <USB_EPStartXfer+0x280>
 800476a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800476e:	085b      	lsrs	r3, r3, #1
 8004770:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d004      	beq.n	800478a <USB_EPStartXfer+0x270>
 8004780:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004784:	3301      	adds	r3, #1
 8004786:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800478a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800478e:	b29b      	uxth	r3, r3
 8004790:	029b      	lsls	r3, r3, #10
 8004792:	b29a      	uxth	r2, r3
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	801a      	strh	r2, [r3, #0]
 8004798:	e041      	b.n	800481e <USB_EPStartXfer+0x304>
 800479a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80047a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d104      	bne.n	80047ba <USB_EPStartXfer+0x2a0>
 80047b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80047b4:	3b01      	subs	r3, #1
 80047b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80047ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80047be:	b29b      	uxth	r3, r3
 80047c0:	029b      	lsls	r3, r3, #10
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	801a      	strh	r2, [r3, #0]
 80047d2:	e024      	b.n	800481e <USB_EPStartXfer+0x304>
 80047d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	785b      	ldrb	r3, [r3, #1]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d11c      	bne.n	800481e <USB_EPStartXfer+0x304>
 80047e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	461a      	mov	r2, r3
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	4413      	add	r3, r2
 80047fa:	633b      	str	r3, [r7, #48]	; 0x30
 80047fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	00da      	lsls	r2, r3, #3
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	4413      	add	r3, r2
 800480e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004818:	b29a      	uxth	r2, r3
 800481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800481e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	895b      	ldrh	r3, [r3, #10]
 800482a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800482e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6959      	ldr	r1, [r3, #20]
 800483a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800483e:	b29b      	uxth	r3, r3
 8004840:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004844:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004848:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800484c:	6800      	ldr	r0, [r0, #0]
 800484e:	f001 fac8 	bl	8005de2 <USB_WritePMA>
            ep->xfer_buff += len;
 8004852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695a      	ldr	r2, [r3, #20]
 800485e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004862:	441a      	add	r2, r3
 8004864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6a1a      	ldr	r2, [r3, #32]
 800487c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	429a      	cmp	r2, r3
 800488a:	d90f      	bls.n	80048ac <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800488c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6a1a      	ldr	r2, [r3, #32]
 8004898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800489c:	1ad2      	subs	r2, r2, r3
 800489e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	621a      	str	r2, [r3, #32]
 80048aa:	e00e      	b.n	80048ca <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80048ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80048bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2200      	movs	r2, #0
 80048c8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80048ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	785b      	ldrb	r3, [r3, #1]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d16d      	bne.n	80049b6 <USB_EPStartXfer+0x49c>
 80048da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	61bb      	str	r3, [r7, #24]
 80048e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	4413      	add	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
 80048fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	00da      	lsls	r2, r3, #3
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	4413      	add	r3, r2
 8004910:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800491a:	2b00      	cmp	r3, #0
 800491c:	d112      	bne.n	8004944 <USB_EPStartXfer+0x42a>
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004928:	b29a      	uxth	r2, r3
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	801a      	strh	r2, [r3, #0]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	b29b      	uxth	r3, r3
 8004934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800493c:	b29a      	uxth	r2, r3
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	801a      	strh	r2, [r3, #0]
 8004942:	e063      	b.n	8004a0c <USB_EPStartXfer+0x4f2>
 8004944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004948:	2b3e      	cmp	r3, #62	; 0x3e
 800494a:	d817      	bhi.n	800497c <USB_EPStartXfer+0x462>
 800494c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004950:	085b      	lsrs	r3, r3, #1
 8004952:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d004      	beq.n	800496c <USB_EPStartXfer+0x452>
 8004962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004966:	3301      	adds	r3, #1
 8004968:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800496c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004970:	b29b      	uxth	r3, r3
 8004972:	029b      	lsls	r3, r3, #10
 8004974:	b29a      	uxth	r2, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	801a      	strh	r2, [r3, #0]
 800497a:	e047      	b.n	8004a0c <USB_EPStartXfer+0x4f2>
 800497c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004980:	095b      	lsrs	r3, r3, #5
 8004982:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	2b00      	cmp	r3, #0
 8004990:	d104      	bne.n	800499c <USB_EPStartXfer+0x482>
 8004992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004996:	3b01      	subs	r3, #1
 8004998:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800499c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	029b      	lsls	r3, r3, #10
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	801a      	strh	r2, [r3, #0]
 80049b4:	e02a      	b.n	8004a0c <USB_EPStartXfer+0x4f2>
 80049b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	785b      	ldrb	r3, [r3, #1]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d122      	bne.n	8004a0c <USB_EPStartXfer+0x4f2>
 80049c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	623b      	str	r3, [r7, #32]
 80049d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	4413      	add	r3, r2
 80049e8:	623b      	str	r3, [r7, #32]
 80049ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	00da      	lsls	r2, r3, #3
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	4413      	add	r3, r2
 80049fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a00:	61fb      	str	r3, [r7, #28]
 8004a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	891b      	ldrh	r3, [r3, #8]
 8004a18:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6959      	ldr	r1, [r3, #20]
 8004a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004a32:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004a36:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004a3a:	6800      	ldr	r0, [r0, #0]
 8004a3c:	f001 f9d1 	bl	8005de2 <USB_WritePMA>
 8004a40:	e3c6      	b.n	80051d0 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	785b      	ldrb	r3, [r3, #1]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d16d      	bne.n	8004b2e <USB_EPStartXfer+0x614>
 8004a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	461a      	mov	r2, r3
 8004a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a72:	4413      	add	r3, r2
 8004a74:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	00da      	lsls	r2, r3, #3
 8004a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a86:	4413      	add	r3, r2
 8004a88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d112      	bne.n	8004abc <USB_EPStartXfer+0x5a2>
 8004a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aa4:	801a      	strh	r2, [r3, #0]
 8004aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ab8:	801a      	strh	r2, [r3, #0]
 8004aba:	e063      	b.n	8004b84 <USB_EPStartXfer+0x66a>
 8004abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ac0:	2b3e      	cmp	r3, #62	; 0x3e
 8004ac2:	d817      	bhi.n	8004af4 <USB_EPStartXfer+0x5da>
 8004ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ac8:	085b      	lsrs	r3, r3, #1
 8004aca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d004      	beq.n	8004ae4 <USB_EPStartXfer+0x5ca>
 8004ada:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ade:	3301      	adds	r3, #1
 8004ae0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ae4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	029b      	lsls	r3, r3, #10
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004af0:	801a      	strh	r2, [r3, #0]
 8004af2:	e047      	b.n	8004b84 <USB_EPStartXfer+0x66a>
 8004af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004af8:	095b      	lsrs	r3, r3, #5
 8004afa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b02:	f003 031f 	and.w	r3, r3, #31
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d104      	bne.n	8004b14 <USB_EPStartXfer+0x5fa>
 8004b0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004b14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	029b      	lsls	r3, r3, #10
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b2a:	801a      	strh	r2, [r3, #0]
 8004b2c:	e02a      	b.n	8004b84 <USB_EPStartXfer+0x66a>
 8004b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	785b      	ldrb	r3, [r3, #1]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d122      	bne.n	8004b84 <USB_EPStartXfer+0x66a>
 8004b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	653b      	str	r3, [r7, #80]	; 0x50
 8004b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b5e:	4413      	add	r3, r2
 8004b60:	653b      	str	r3, [r7, #80]	; 0x50
 8004b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	00da      	lsls	r2, r3, #3
 8004b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b72:	4413      	add	r3, r2
 8004b74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b82:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	891b      	ldrh	r3, [r3, #8]
 8004b90:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6959      	ldr	r1, [r3, #20]
 8004ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004baa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004bae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004bb2:	6800      	ldr	r0, [r0, #0]
 8004bb4:	f001 f915 	bl	8005de2 <USB_WritePMA>
            ep->xfer_buff += len;
 8004bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695a      	ldr	r2, [r3, #20]
 8004bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bc8:	441a      	add	r2, r3
 8004bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6a1a      	ldr	r2, [r3, #32]
 8004be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d90f      	bls.n	8004c12 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8004bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6a1a      	ldr	r2, [r3, #32]
 8004bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c02:	1ad2      	subs	r2, r2, r3
 8004c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	621a      	str	r2, [r3, #32]
 8004c10:	e00e      	b.n	8004c30 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8004c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	785b      	ldrb	r3, [r3, #1]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d16d      	bne.n	8004d28 <USB_EPStartXfer+0x80e>
 8004c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6c:	4413      	add	r3, r2
 8004c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	00da      	lsls	r2, r3, #3
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	4413      	add	r3, r2
 8004c82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c86:	637b      	str	r3, [r7, #52]	; 0x34
 8004c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d112      	bne.n	8004cb6 <USB_EPStartXfer+0x79c>
 8004c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c9e:	801a      	strh	r2, [r3, #0]
 8004ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb2:	801a      	strh	r2, [r3, #0]
 8004cb4:	e05d      	b.n	8004d72 <USB_EPStartXfer+0x858>
 8004cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cba:	2b3e      	cmp	r3, #62	; 0x3e
 8004cbc:	d817      	bhi.n	8004cee <USB_EPStartXfer+0x7d4>
 8004cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cc2:	085b      	lsrs	r3, r3, #1
 8004cc4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d004      	beq.n	8004cde <USB_EPStartXfer+0x7c4>
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd8:	3301      	adds	r3, #1
 8004cda:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	029b      	lsls	r3, r3, #10
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cea:	801a      	strh	r2, [r3, #0]
 8004cec:	e041      	b.n	8004d72 <USB_EPStartXfer+0x858>
 8004cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cf2:	095b      	lsrs	r3, r3, #5
 8004cf4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cfc:	f003 031f 	and.w	r3, r3, #31
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d104      	bne.n	8004d0e <USB_EPStartXfer+0x7f4>
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	029b      	lsls	r3, r3, #10
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d24:	801a      	strh	r2, [r3, #0]
 8004d26:	e024      	b.n	8004d72 <USB_EPStartXfer+0x858>
 8004d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	785b      	ldrb	r3, [r3, #1]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d11c      	bne.n	8004d72 <USB_EPStartXfer+0x858>
 8004d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d4c:	4413      	add	r3, r2
 8004d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8004d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	00da      	lsls	r2, r3, #3
 8004d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d60:	4413      	add	r3, r2
 8004d62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	895b      	ldrh	r3, [r3, #10]
 8004d7e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6959      	ldr	r1, [r3, #20]
 8004d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004d98:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004d9c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004da0:	6800      	ldr	r0, [r0, #0]
 8004da2:	f001 f81e 	bl	8005de2 <USB_WritePMA>
 8004da6:	e213      	b.n	80051d0 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dde:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004de6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	441a      	add	r2, r3
 8004dfc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e34:	4413      	add	r3, r2
 8004e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	00da      	lsls	r2, r3, #3
 8004e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e48:	4413      	add	r3, r2
 8004e4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	891b      	ldrh	r3, [r3, #8]
 8004e66:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6959      	ldr	r1, [r3, #20]
 8004e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004e80:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004e84:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004e88:	6800      	ldr	r0, [r0, #0]
 8004e8a:	f000 ffaa 	bl	8005de2 <USB_WritePMA>
 8004e8e:	e19f      	b.n	80051d0 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6a1a      	ldr	r2, [r3, #32]
 8004e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ea0:	1ad2      	subs	r2, r2, r3
 8004ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 80bc 	beq.w	800504e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	673b      	str	r3, [r7, #112]	; 0x70
 8004ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	785b      	ldrb	r3, [r3, #1]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d16d      	bne.n	8004fce <USB_EPStartXfer+0xab4>
 8004ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ef6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	461a      	mov	r2, r3
 8004f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f12:	4413      	add	r3, r2
 8004f14:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	00da      	lsls	r2, r3, #3
 8004f24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f26:	4413      	add	r3, r2
 8004f28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f2c:	667b      	str	r3, [r7, #100]	; 0x64
 8004f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d112      	bne.n	8004f5c <USB_EPStartXfer+0xa42>
 8004f36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f44:	801a      	strh	r2, [r3, #0]
 8004f46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f58:	801a      	strh	r2, [r3, #0]
 8004f5a:	e05d      	b.n	8005018 <USB_EPStartXfer+0xafe>
 8004f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f60:	2b3e      	cmp	r3, #62	; 0x3e
 8004f62:	d817      	bhi.n	8004f94 <USB_EPStartXfer+0xa7a>
 8004f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f68:	085b      	lsrs	r3, r3, #1
 8004f6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d004      	beq.n	8004f84 <USB_EPStartXfer+0xa6a>
 8004f7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f7e:	3301      	adds	r3, #1
 8004f80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004f84:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	029b      	lsls	r3, r3, #10
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f90:	801a      	strh	r2, [r3, #0]
 8004f92:	e041      	b.n	8005018 <USB_EPStartXfer+0xafe>
 8004f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f98:	095b      	lsrs	r3, r3, #5
 8004f9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa2:	f003 031f 	and.w	r3, r3, #31
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d104      	bne.n	8004fb4 <USB_EPStartXfer+0xa9a>
 8004faa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004fb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	029b      	lsls	r3, r3, #10
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fca:	801a      	strh	r2, [r3, #0]
 8004fcc:	e024      	b.n	8005018 <USB_EPStartXfer+0xafe>
 8004fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	785b      	ldrb	r3, [r3, #1]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d11c      	bne.n	8005018 <USB_EPStartXfer+0xafe>
 8004fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	461a      	mov	r2, r3
 8004ff0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ff2:	4413      	add	r3, r2
 8004ff4:	673b      	str	r3, [r7, #112]	; 0x70
 8004ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	00da      	lsls	r2, r3, #3
 8005004:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005006:	4413      	add	r3, r2
 8005008:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800500c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800500e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005012:	b29a      	uxth	r2, r3
 8005014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005016:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800501c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	895b      	ldrh	r3, [r3, #10]
 8005024:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800502c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6959      	ldr	r1, [r3, #20]
 8005034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005038:	b29b      	uxth	r3, r3
 800503a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800503e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005042:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005046:	6800      	ldr	r0, [r0, #0]
 8005048:	f000 fecb 	bl	8005de2 <USB_WritePMA>
 800504c:	e0c0      	b.n	80051d0 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800504e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	785b      	ldrb	r3, [r3, #1]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d16d      	bne.n	800513a <USB_EPStartXfer+0xc20>
 800505e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005062:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	67fb      	str	r3, [r7, #124]	; 0x7c
 800506a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800506e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005078:	b29b      	uxth	r3, r3
 800507a:	461a      	mov	r2, r3
 800507c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800507e:	4413      	add	r3, r2
 8005080:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	00da      	lsls	r2, r3, #3
 8005090:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005092:	4413      	add	r3, r2
 8005094:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005098:	67bb      	str	r3, [r7, #120]	; 0x78
 800509a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d112      	bne.n	80050c8 <USB_EPStartXfer+0xbae>
 80050a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050b0:	801a      	strh	r2, [r3, #0]
 80050b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050c4:	801a      	strh	r2, [r3, #0]
 80050c6:	e069      	b.n	800519c <USB_EPStartXfer+0xc82>
 80050c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050cc:	2b3e      	cmp	r3, #62	; 0x3e
 80050ce:	d817      	bhi.n	8005100 <USB_EPStartXfer+0xbe6>
 80050d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050d4:	085b      	lsrs	r3, r3, #1
 80050d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80050da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d004      	beq.n	80050f0 <USB_EPStartXfer+0xbd6>
 80050e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80050ea:	3301      	adds	r3, #1
 80050ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80050f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	029b      	lsls	r3, r3, #10
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050fc:	801a      	strh	r2, [r3, #0]
 80050fe:	e04d      	b.n	800519c <USB_EPStartXfer+0xc82>
 8005100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005104:	095b      	lsrs	r3, r3, #5
 8005106:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800510a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800510e:	f003 031f 	and.w	r3, r3, #31
 8005112:	2b00      	cmp	r3, #0
 8005114:	d104      	bne.n	8005120 <USB_EPStartXfer+0xc06>
 8005116:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800511a:	3b01      	subs	r3, #1
 800511c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005120:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005124:	b29b      	uxth	r3, r3
 8005126:	029b      	lsls	r3, r3, #10
 8005128:	b29b      	uxth	r3, r3
 800512a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800512e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005132:	b29a      	uxth	r2, r3
 8005134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005136:	801a      	strh	r2, [r3, #0]
 8005138:	e030      	b.n	800519c <USB_EPStartXfer+0xc82>
 800513a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800513e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	785b      	ldrb	r3, [r3, #1]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d128      	bne.n	800519c <USB_EPStartXfer+0xc82>
 800514a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800514e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800515c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005166:	b29b      	uxth	r3, r3
 8005168:	461a      	mov	r2, r3
 800516a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800516e:	4413      	add	r3, r2
 8005170:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	00da      	lsls	r2, r3, #3
 8005182:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005186:	4413      	add	r3, r2
 8005188:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800518c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005194:	b29a      	uxth	r2, r3
 8005196:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800519a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800519c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	891b      	ldrh	r3, [r3, #8]
 80051a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6959      	ldr	r1, [r3, #20]
 80051b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80051c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80051c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80051ca:	6800      	ldr	r0, [r0, #0]
 80051cc:	f000 fe09 	bl	8005de2 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80051d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f6:	817b      	strh	r3, [r7, #10]
 80051f8:	897b      	ldrh	r3, [r7, #10]
 80051fa:	f083 0310 	eor.w	r3, r3, #16
 80051fe:	817b      	strh	r3, [r7, #10]
 8005200:	897b      	ldrh	r3, [r7, #10]
 8005202:	f083 0320 	eor.w	r3, r3, #32
 8005206:	817b      	strh	r3, [r7, #10]
 8005208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800520c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	441a      	add	r2, r3
 8005222:	897b      	ldrh	r3, [r7, #10]
 8005224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800522c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005234:	b29b      	uxth	r3, r3
 8005236:	8013      	strh	r3, [r2, #0]
 8005238:	f000 bc9f 	b.w	8005b7a <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800523c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	7b1b      	ldrb	r3, [r3, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	f040 80ae 	bne.w	80053aa <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800524e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699a      	ldr	r2, [r3, #24]
 800525a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800525e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	429a      	cmp	r2, r3
 8005268:	d917      	bls.n	800529a <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800526a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800526e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800527a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800527e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800528a:	1ad2      	subs	r2, r2, r3
 800528c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	619a      	str	r2, [r3, #24]
 8005298:	e00e      	b.n	80052b8 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800529a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800529e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80052aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2200      	movs	r2, #0
 80052b6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80052b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	461a      	mov	r2, r3
 80052d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052dc:	4413      	add	r3, r2
 80052de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	00da      	lsls	r2, r3, #3
 80052f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052f4:	4413      	add	r3, r2
 80052f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80052fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005302:	2b00      	cmp	r3, #0
 8005304:	d116      	bne.n	8005334 <USB_EPStartXfer+0xe1a>
 8005306:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b29b      	uxth	r3, r3
 800530e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005312:	b29a      	uxth	r2, r3
 8005314:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005318:	801a      	strh	r2, [r3, #0]
 800531a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800532a:	b29a      	uxth	r2, r3
 800532c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005330:	801a      	strh	r2, [r3, #0]
 8005332:	e3e8      	b.n	8005b06 <USB_EPStartXfer+0x15ec>
 8005334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005338:	2b3e      	cmp	r3, #62	; 0x3e
 800533a:	d818      	bhi.n	800536e <USB_EPStartXfer+0xe54>
 800533c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005340:	085b      	lsrs	r3, r3, #1
 8005342:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d004      	beq.n	800535c <USB_EPStartXfer+0xe42>
 8005352:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005356:	3301      	adds	r3, #1
 8005358:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800535c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005360:	b29b      	uxth	r3, r3
 8005362:	029b      	lsls	r3, r3, #10
 8005364:	b29a      	uxth	r2, r3
 8005366:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800536a:	801a      	strh	r2, [r3, #0]
 800536c:	e3cb      	b.n	8005b06 <USB_EPStartXfer+0x15ec>
 800536e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800537c:	f003 031f 	and.w	r3, r3, #31
 8005380:	2b00      	cmp	r3, #0
 8005382:	d104      	bne.n	800538e <USB_EPStartXfer+0xe74>
 8005384:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005388:	3b01      	subs	r3, #1
 800538a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800538e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005392:	b29b      	uxth	r3, r3
 8005394:	029b      	lsls	r3, r3, #10
 8005396:	b29b      	uxth	r3, r3
 8005398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053a6:	801a      	strh	r2, [r3, #0]
 80053a8:	e3ad      	b.n	8005b06 <USB_EPStartXfer+0x15ec>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80053aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	78db      	ldrb	r3, [r3, #3]
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	f040 8200 	bne.w	80057bc <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80053bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	785b      	ldrb	r3, [r3, #1]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f040 8091 	bne.w	80054f0 <USB_EPStartXfer+0xfd6>
 80053ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053f2:	4413      	add	r3, r2
 80053f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	00da      	lsls	r2, r3, #3
 8005406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800540a:	4413      	add	r3, r2
 800540c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005410:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d116      	bne.n	8005452 <USB_EPStartXfer+0xf38>
 8005424:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	b29b      	uxth	r3, r3
 800542c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005430:	b29a      	uxth	r2, r3
 8005432:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005436:	801a      	strh	r2, [r3, #0]
 8005438:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	b29b      	uxth	r3, r3
 8005440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005448:	b29a      	uxth	r2, r3
 800544a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800544e:	801a      	strh	r2, [r3, #0]
 8005450:	e083      	b.n	800555a <USB_EPStartXfer+0x1040>
 8005452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2b3e      	cmp	r3, #62	; 0x3e
 8005460:	d820      	bhi.n	80054a4 <USB_EPStartXfer+0xf8a>
 8005462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	085b      	lsrs	r3, r3, #1
 8005470:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	d004      	beq.n	8005492 <USB_EPStartXfer+0xf78>
 8005488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800548c:	3301      	adds	r3, #1
 800548e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005496:	b29b      	uxth	r3, r3
 8005498:	029b      	lsls	r3, r3, #10
 800549a:	b29a      	uxth	r2, r3
 800549c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80054a0:	801a      	strh	r2, [r3, #0]
 80054a2:	e05a      	b.n	800555a <USB_EPStartXfer+0x1040>
 80054a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	095b      	lsrs	r3, r3, #5
 80054b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d104      	bne.n	80054d4 <USB_EPStartXfer+0xfba>
 80054ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ce:	3b01      	subs	r3, #1
 80054d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d8:	b29b      	uxth	r3, r3
 80054da:	029b      	lsls	r3, r3, #10
 80054dc:	b29b      	uxth	r3, r3
 80054de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80054ec:	801a      	strh	r2, [r3, #0]
 80054ee:	e034      	b.n	800555a <USB_EPStartXfer+0x1040>
 80054f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	785b      	ldrb	r3, [r3, #1]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d12c      	bne.n	800555a <USB_EPStartXfer+0x1040>
 8005500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005504:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800550e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005512:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800551c:	b29b      	uxth	r3, r3
 800551e:	461a      	mov	r2, r3
 8005520:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005524:	4413      	add	r3, r2
 8005526:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800552a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800552e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	00da      	lsls	r2, r3, #3
 8005538:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800553c:	4413      	add	r3, r2
 800553e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005542:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800554a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	b29a      	uxth	r2, r3
 8005554:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005558:	801a      	strh	r2, [r3, #0]
 800555a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800555e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800556c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	785b      	ldrb	r3, [r3, #1]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f040 8091 	bne.w	800569c <USB_EPStartXfer+0x1182>
 800557a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800557e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800558c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005596:	b29b      	uxth	r3, r3
 8005598:	461a      	mov	r2, r3
 800559a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800559e:	4413      	add	r3, r2
 80055a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	00da      	lsls	r2, r3, #3
 80055b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055b6:	4413      	add	r3, r2
 80055b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d116      	bne.n	80055fe <USB_EPStartXfer+0x10e4>
 80055d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055dc:	b29a      	uxth	r2, r3
 80055de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055e2:	801a      	strh	r2, [r3, #0]
 80055e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055fa:	801a      	strh	r2, [r3, #0]
 80055fc:	e07c      	b.n	80056f8 <USB_EPStartXfer+0x11de>
 80055fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b3e      	cmp	r3, #62	; 0x3e
 800560c:	d820      	bhi.n	8005650 <USB_EPStartXfer+0x1136>
 800560e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	085b      	lsrs	r3, r3, #1
 800561c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d004      	beq.n	800563e <USB_EPStartXfer+0x1124>
 8005634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005638:	3301      	adds	r3, #1
 800563a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800563e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005642:	b29b      	uxth	r3, r3
 8005644:	029b      	lsls	r3, r3, #10
 8005646:	b29a      	uxth	r2, r3
 8005648:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800564c:	801a      	strh	r2, [r3, #0]
 800564e:	e053      	b.n	80056f8 <USB_EPStartXfer+0x11de>
 8005650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	095b      	lsrs	r3, r3, #5
 800565e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f003 031f 	and.w	r3, r3, #31
 8005672:	2b00      	cmp	r3, #0
 8005674:	d104      	bne.n	8005680 <USB_EPStartXfer+0x1166>
 8005676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800567a:	3b01      	subs	r3, #1
 800567c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005684:	b29b      	uxth	r3, r3
 8005686:	029b      	lsls	r3, r3, #10
 8005688:	b29b      	uxth	r3, r3
 800568a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800568e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005692:	b29a      	uxth	r2, r3
 8005694:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005698:	801a      	strh	r2, [r3, #0]
 800569a:	e02d      	b.n	80056f8 <USB_EPStartXfer+0x11de>
 800569c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	785b      	ldrb	r3, [r3, #1]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d125      	bne.n	80056f8 <USB_EPStartXfer+0x11de>
 80056ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056c2:	4413      	add	r3, r2
 80056c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80056c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	00da      	lsls	r2, r3, #3
 80056d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056da:	4413      	add	r3, r2
 80056dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80056e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056f6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80056f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69db      	ldr	r3, [r3, #28]
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 81fe 	beq.w	8005b06 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800570a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800570e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800572a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800572e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <USB_EPStartXfer+0x1228>
 8005736:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800573a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10d      	bne.n	800575e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005742:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800574a:	2b00      	cmp	r3, #0
 800574c:	f040 81db 	bne.w	8005b06 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005750:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005758:	2b00      	cmp	r3, #0
 800575a:	f040 81d4 	bne.w	8005b06 <USB_EPStartXfer+0x15ec>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800575e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005762:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800576c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	b29b      	uxth	r3, r3
 800577c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005784:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800578c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	441a      	add	r2, r3
 80057a2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80057a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	8013      	strh	r3, [r2, #0]
 80057ba:	e1a4      	b.n	8005b06 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80057bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	78db      	ldrb	r3, [r3, #3]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	f040 819a 	bne.w	8005b02 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80057ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699a      	ldr	r2, [r3, #24]
 80057da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d917      	bls.n	800581a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 80057ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80057fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800580a:	1ad2      	subs	r2, r2, r3
 800580c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	619a      	str	r2, [r3, #24]
 8005818:	e00e      	b.n	8005838 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800581a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800581e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800582a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800582e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2200      	movs	r2, #0
 8005836:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800583c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	785b      	ldrb	r3, [r3, #1]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d178      	bne.n	800593a <USB_EPStartXfer+0x1420>
 8005848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800584c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800585a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005864:	b29b      	uxth	r3, r3
 8005866:	461a      	mov	r2, r3
 8005868:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800586c:	4413      	add	r3, r2
 800586e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	00da      	lsls	r2, r3, #3
 8005880:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005884:	4413      	add	r3, r2
 8005886:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800588a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800588e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005892:	2b00      	cmp	r3, #0
 8005894:	d116      	bne.n	80058c4 <USB_EPStartXfer+0x13aa>
 8005896:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	b29b      	uxth	r3, r3
 800589e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058a8:	801a      	strh	r2, [r3, #0]
 80058aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058c0:	801a      	strh	r2, [r3, #0]
 80058c2:	e06b      	b.n	800599c <USB_EPStartXfer+0x1482>
 80058c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058c8:	2b3e      	cmp	r3, #62	; 0x3e
 80058ca:	d818      	bhi.n	80058fe <USB_EPStartXfer+0x13e4>
 80058cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058d0:	085b      	lsrs	r3, r3, #1
 80058d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80058d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d004      	beq.n	80058ec <USB_EPStartXfer+0x13d2>
 80058e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058e6:	3301      	adds	r3, #1
 80058e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80058ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	029b      	lsls	r3, r3, #10
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058fa:	801a      	strh	r2, [r3, #0]
 80058fc:	e04e      	b.n	800599c <USB_EPStartXfer+0x1482>
 80058fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005902:	095b      	lsrs	r3, r3, #5
 8005904:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800590c:	f003 031f 	and.w	r3, r3, #31
 8005910:	2b00      	cmp	r3, #0
 8005912:	d104      	bne.n	800591e <USB_EPStartXfer+0x1404>
 8005914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005918:	3b01      	subs	r3, #1
 800591a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800591e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005922:	b29b      	uxth	r3, r3
 8005924:	029b      	lsls	r3, r3, #10
 8005926:	b29b      	uxth	r3, r3
 8005928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800592c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005930:	b29a      	uxth	r2, r3
 8005932:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005936:	801a      	strh	r2, [r3, #0]
 8005938:	e030      	b.n	800599c <USB_EPStartXfer+0x1482>
 800593a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800593e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	785b      	ldrb	r3, [r3, #1]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d128      	bne.n	800599c <USB_EPStartXfer+0x1482>
 800594a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800595c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005966:	b29b      	uxth	r3, r3
 8005968:	461a      	mov	r2, r3
 800596a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800596e:	4413      	add	r3, r2
 8005970:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	00da      	lsls	r2, r3, #3
 8005982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005986:	4413      	add	r3, r2
 8005988:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800598c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005994:	b29a      	uxth	r2, r3
 8005996:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800599a:	801a      	strh	r2, [r3, #0]
 800599c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	785b      	ldrb	r3, [r3, #1]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d178      	bne.n	8005aac <USB_EPStartXfer+0x1592>
 80059ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80059c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	461a      	mov	r2, r3
 80059da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80059de:	4413      	add	r3, r2
 80059e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80059e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	00da      	lsls	r2, r3, #3
 80059f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80059f6:	4413      	add	r3, r2
 80059f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d116      	bne.n	8005a36 <USB_EPStartXfer+0x151c>
 8005a08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a1a:	801a      	strh	r2, [r3, #0]
 8005a1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a32:	801a      	strh	r2, [r3, #0]
 8005a34:	e067      	b.n	8005b06 <USB_EPStartXfer+0x15ec>
 8005a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a3a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a3c:	d818      	bhi.n	8005a70 <USB_EPStartXfer+0x1556>
 8005a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a42:	085b      	lsrs	r3, r3, #1
 8005a44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d004      	beq.n	8005a5e <USB_EPStartXfer+0x1544>
 8005a54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a58:	3301      	adds	r3, #1
 8005a5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	029b      	lsls	r3, r3, #10
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a6c:	801a      	strh	r2, [r3, #0]
 8005a6e:	e04a      	b.n	8005b06 <USB_EPStartXfer+0x15ec>
 8005a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a7e:	f003 031f 	and.w	r3, r3, #31
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d104      	bne.n	8005a90 <USB_EPStartXfer+0x1576>
 8005a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	029b      	lsls	r3, r3, #10
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005aa8:	801a      	strh	r2, [r3, #0]
 8005aaa:	e02c      	b.n	8005b06 <USB_EPStartXfer+0x15ec>
 8005aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	785b      	ldrb	r3, [r3, #1]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d124      	bne.n	8005b06 <USB_EPStartXfer+0x15ec>
 8005abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	461a      	mov	r2, r3
 8005ace:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	00da      	lsls	r2, r3, #3
 8005ae6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005aea:	4413      	add	r3, r2
 8005aec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005af0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005afe:	801a      	strh	r2, [r3, #0]
 8005b00:	e001      	b.n	8005b06 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e03a      	b.n	8005b7c <USB_EPStartXfer+0x1662>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005b30:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005b34:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b38:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005b3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005b40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b44:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	441a      	add	r2, r3
 8005b62:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b085      	sub	sp, #20
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	785b      	ldrb	r3, [r3, #1]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d020      	beq.n	8005bda <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bae:	81bb      	strh	r3, [r7, #12]
 8005bb0:	89bb      	ldrh	r3, [r7, #12]
 8005bb2:	f083 0310 	eor.w	r3, r3, #16
 8005bb6:	81bb      	strh	r3, [r7, #12]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	441a      	add	r2, r3
 8005bc2:	89bb      	ldrh	r3, [r7, #12]
 8005bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	8013      	strh	r3, [r2, #0]
 8005bd8:	e01f      	b.n	8005c1a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf0:	81fb      	strh	r3, [r7, #14]
 8005bf2:	89fb      	ldrh	r3, [r7, #14]
 8005bf4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005bf8:	81fb      	strh	r3, [r7, #14]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	441a      	add	r2, r3
 8005c04:	89fb      	ldrh	r3, [r7, #14]
 8005c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	7b1b      	ldrb	r3, [r3, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f040 809d 	bne.w	8005d76 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d04c      	beq.n	8005cde <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	823b      	strh	r3, [r7, #16]
 8005c52:	8a3b      	ldrh	r3, [r7, #16]
 8005c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d01b      	beq.n	8005c94 <USB_EPClearStall+0x6c>
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c72:	81fb      	strh	r3, [r7, #14]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	441a      	add	r2, r3
 8005c7e:	89fb      	ldrh	r3, [r7, #14]
 8005c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	78db      	ldrb	r3, [r3, #3]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d06c      	beq.n	8005d76 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb2:	81bb      	strh	r3, [r7, #12]
 8005cb4:	89bb      	ldrh	r3, [r7, #12]
 8005cb6:	f083 0320 	eor.w	r3, r3, #32
 8005cba:	81bb      	strh	r3, [r7, #12]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	441a      	add	r2, r3
 8005cc6:	89bb      	ldrh	r3, [r7, #12]
 8005cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	8013      	strh	r3, [r2, #0]
 8005cdc:	e04b      	b.n	8005d76 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	82fb      	strh	r3, [r7, #22]
 8005cec:	8afb      	ldrh	r3, [r7, #22]
 8005cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d01b      	beq.n	8005d2e <USB_EPClearStall+0x106>
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0c:	82bb      	strh	r3, [r7, #20]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	8abb      	ldrh	r3, [r7, #20]
 8005d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d44:	827b      	strh	r3, [r7, #18]
 8005d46:	8a7b      	ldrh	r3, [r7, #18]
 8005d48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d4c:	827b      	strh	r3, [r7, #18]
 8005d4e:	8a7b      	ldrh	r3, [r7, #18]
 8005d50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d54:	827b      	strh	r3, [r7, #18]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	441a      	add	r2, r3
 8005d60:	8a7b      	ldrh	r3, [r7, #18]
 8005d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d103      	bne.n	8005d9e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2280      	movs	r2, #128	; 0x80
 8005d9a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b08d      	sub	sp, #52	; 0x34
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	4611      	mov	r1, r2
 8005dee:	461a      	mov	r2, r3
 8005df0:	460b      	mov	r3, r1
 8005df2:	80fb      	strh	r3, [r7, #6]
 8005df4:	4613      	mov	r3, r2
 8005df6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005df8:	88bb      	ldrh	r3, [r7, #4]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	085b      	lsrs	r3, r3, #1
 8005dfe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e08:	88fa      	ldrh	r2, [r7, #6]
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e12:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e18:	e01b      	b.n	8005e52 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	3301      	adds	r3, #1
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	3302      	adds	r3, #2
 8005e44:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	3301      	adds	r3, #1
 8005e4a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1e0      	bne.n	8005e1a <USB_WritePMA+0x38>
  }
}
 8005e58:	bf00      	nop
 8005e5a:	bf00      	nop
 8005e5c:	3734      	adds	r7, #52	; 0x34
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b08b      	sub	sp, #44	; 0x2c
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	4611      	mov	r1, r2
 8005e72:	461a      	mov	r2, r3
 8005e74:	460b      	mov	r3, r1
 8005e76:	80fb      	strh	r3, [r7, #6]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005e7c:	88bb      	ldrh	r3, [r7, #4]
 8005e7e:	085b      	lsrs	r3, r3, #1
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e8c:	88fa      	ldrh	r2, [r7, #6]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e96:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e9c:	e018      	b.n	8005ed0 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005e9e:	6a3b      	ldr	r3, [r7, #32]
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	3302      	adds	r3, #2
 8005eaa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	0a1b      	lsrs	r3, r3, #8
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1e3      	bne.n	8005e9e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005ed6:	88bb      	ldrh	r3, [r7, #4]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d007      	beq.n	8005ef2 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	701a      	strb	r2, [r3, #0]
  }
}
 8005ef2:	bf00      	nop
 8005ef4:	372c      	adds	r7, #44	; 0x2c
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	460b      	mov	r3, r1
 8005f08:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	7c1b      	ldrb	r3, [r3, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d115      	bne.n	8005f42 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	2181      	movs	r1, #129	; 0x81
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f001 fee9 	bl	8007cf6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f2e:	2202      	movs	r2, #2
 8005f30:	2101      	movs	r1, #1
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f001 fedf 	bl	8007cf6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005f40:	e012      	b.n	8005f68 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f42:	2340      	movs	r3, #64	; 0x40
 8005f44:	2202      	movs	r2, #2
 8005f46:	2181      	movs	r1, #129	; 0x81
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f001 fed4 	bl	8007cf6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f54:	2340      	movs	r3, #64	; 0x40
 8005f56:	2202      	movs	r2, #2
 8005f58:	2101      	movs	r1, #1
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f001 fecb 	bl	8007cf6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f68:	2308      	movs	r3, #8
 8005f6a:	2203      	movs	r2, #3
 8005f6c:	2182      	movs	r1, #130	; 0x82
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f001 fec1 	bl	8007cf6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005f7a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005f7e:	f001 ffe3 	bl	8007f48 <USBD_static_malloc>
 8005f82:	4602      	mov	r2, r0
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d102      	bne.n	8005f9a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005f94:	2301      	movs	r3, #1
 8005f96:	73fb      	strb	r3, [r7, #15]
 8005f98:	e026      	b.n	8005fe8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fa0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	7c1b      	ldrb	r3, [r3, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d109      	bne.n	8005fd8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fce:	2101      	movs	r1, #1
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 ff82 	bl	8007eda <USBD_LL_PrepareReceive>
 8005fd6:	e007      	b.n	8005fe8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fde:	2340      	movs	r3, #64	; 0x40
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f001 ff79 	bl	8007eda <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b084      	sub	sp, #16
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006002:	2181      	movs	r1, #129	; 0x81
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 fe9c 	bl	8007d42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006010:	2101      	movs	r1, #1
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f001 fe95 	bl	8007d42 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006020:	2182      	movs	r1, #130	; 0x82
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f001 fe8d 	bl	8007d42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00e      	beq.n	8006056 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006048:	4618      	mov	r0, r3
 800604a:	f001 ff8b 	bl	8007f64 <USBD_static_free>
    pdev->pClassData = NULL;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006056:	7bfb      	ldrb	r3, [r7, #15]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006070:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800607a:	2300      	movs	r3, #0
 800607c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006086:	2b00      	cmp	r3, #0
 8006088:	d039      	beq.n	80060fe <USBD_CDC_Setup+0x9e>
 800608a:	2b20      	cmp	r3, #32
 800608c:	d17f      	bne.n	800618e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	88db      	ldrh	r3, [r3, #6]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d029      	beq.n	80060ea <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	b25b      	sxtb	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	da11      	bge.n	80060c4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80060ac:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	88d2      	ldrh	r2, [r2, #6]
 80060b2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80060b4:	6939      	ldr	r1, [r7, #16]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	88db      	ldrh	r3, [r3, #6]
 80060ba:	461a      	mov	r2, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 fa14 	bl	80074ea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80060c2:	e06b      	b.n	800619c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	785a      	ldrb	r2, [r3, #1]
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	88db      	ldrh	r3, [r3, #6]
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80060da:	6939      	ldr	r1, [r7, #16]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	88db      	ldrh	r3, [r3, #6]
 80060e0:	461a      	mov	r2, r3
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f001 fa2f 	bl	8007546 <USBD_CtlPrepareRx>
      break;
 80060e8:	e058      	b.n	800619c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	7850      	ldrb	r0, [r2, #1]
 80060f6:	2200      	movs	r2, #0
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	4798      	blx	r3
      break;
 80060fc:	e04e      	b.n	800619c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	785b      	ldrb	r3, [r3, #1]
 8006102:	2b0b      	cmp	r3, #11
 8006104:	d02e      	beq.n	8006164 <USBD_CDC_Setup+0x104>
 8006106:	2b0b      	cmp	r3, #11
 8006108:	dc38      	bgt.n	800617c <USBD_CDC_Setup+0x11c>
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <USBD_CDC_Setup+0xb4>
 800610e:	2b0a      	cmp	r3, #10
 8006110:	d014      	beq.n	800613c <USBD_CDC_Setup+0xdc>
 8006112:	e033      	b.n	800617c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800611a:	2b03      	cmp	r3, #3
 800611c:	d107      	bne.n	800612e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800611e:	f107 030c 	add.w	r3, r7, #12
 8006122:	2202      	movs	r2, #2
 8006124:	4619      	mov	r1, r3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f001 f9df 	bl	80074ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800612c:	e02e      	b.n	800618c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f001 f96f 	bl	8007414 <USBD_CtlError>
            ret = USBD_FAIL;
 8006136:	2302      	movs	r3, #2
 8006138:	75fb      	strb	r3, [r7, #23]
          break;
 800613a:	e027      	b.n	800618c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006142:	2b03      	cmp	r3, #3
 8006144:	d107      	bne.n	8006156 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006146:	f107 030f 	add.w	r3, r7, #15
 800614a:	2201      	movs	r2, #1
 800614c:	4619      	mov	r1, r3
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f001 f9cb 	bl	80074ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006154:	e01a      	b.n	800618c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006156:	6839      	ldr	r1, [r7, #0]
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f001 f95b 	bl	8007414 <USBD_CtlError>
            ret = USBD_FAIL;
 800615e:	2302      	movs	r3, #2
 8006160:	75fb      	strb	r3, [r7, #23]
          break;
 8006162:	e013      	b.n	800618c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800616a:	2b03      	cmp	r3, #3
 800616c:	d00d      	beq.n	800618a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f001 f94f 	bl	8007414 <USBD_CtlError>
            ret = USBD_FAIL;
 8006176:	2302      	movs	r3, #2
 8006178:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800617a:	e006      	b.n	800618a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f001 f948 	bl	8007414 <USBD_CtlError>
          ret = USBD_FAIL;
 8006184:	2302      	movs	r3, #2
 8006186:	75fb      	strb	r3, [r7, #23]
          break;
 8006188:	e000      	b.n	800618c <USBD_CDC_Setup+0x12c>
          break;
 800618a:	bf00      	nop
      }
      break;
 800618c:	e006      	b.n	800619c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f001 f93f 	bl	8007414 <USBD_CtlError>
      ret = USBD_FAIL;
 8006196:	2302      	movs	r3, #2
 8006198:	75fb      	strb	r3, [r7, #23]
      break;
 800619a:	bf00      	nop
  }

  return ret;
 800619c:	7dfb      	ldrb	r3, [r7, #23]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b084      	sub	sp, #16
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	460b      	mov	r3, r1
 80061b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061c0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d03a      	beq.n	8006242 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80061cc:	78fa      	ldrb	r2, [r7, #3]
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	4613      	mov	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	440b      	add	r3, r1
 80061da:	331c      	adds	r3, #28
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d029      	beq.n	8006236 <USBD_CDC_DataIn+0x90>
 80061e2:	78fa      	ldrb	r2, [r7, #3]
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	440b      	add	r3, r1
 80061f0:	331c      	adds	r3, #28
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	78f9      	ldrb	r1, [r7, #3]
 80061f6:	68b8      	ldr	r0, [r7, #8]
 80061f8:	460b      	mov	r3, r1
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	440b      	add	r3, r1
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	4403      	add	r3, r0
 8006202:	3338      	adds	r3, #56	; 0x38
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	fbb2 f1f3 	udiv	r1, r2, r3
 800620a:	fb01 f303 	mul.w	r3, r1, r3
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d110      	bne.n	8006236 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006214:	78fa      	ldrb	r2, [r7, #3]
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	440b      	add	r3, r1
 8006222:	331c      	adds	r3, #28
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006228:	78f9      	ldrb	r1, [r7, #3]
 800622a:	2300      	movs	r3, #0
 800622c:	2200      	movs	r2, #0
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f001 fe30 	bl	8007e94 <USBD_LL_Transmit>
 8006234:	e003      	b.n	800623e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	e000      	b.n	8006244 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006242:	2302      	movs	r3, #2
  }
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006260:	78fb      	ldrb	r3, [r7, #3]
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f001 fe5b 	bl	8007f20 <USBD_LL_GetRxDataSize>
 800626a:	4602      	mov	r2, r0
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00d      	beq.n	8006298 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006290:	4611      	mov	r1, r2
 8006292:	4798      	blx	r3

    return USBD_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	e000      	b.n	800629a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006298:	2302      	movs	r3, #2
  }
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d015      	beq.n	80062e8 <USBD_CDC_EP0_RxReady+0x46>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80062c2:	2bff      	cmp	r3, #255	; 0xff
 80062c4:	d010      	beq.n	80062e8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80062d4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80062dc:	b292      	uxth	r2, r2
 80062de:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	22ff      	movs	r2, #255	; 0xff
 80062e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
	...

080062f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2243      	movs	r2, #67	; 0x43
 8006300:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006302:	4b03      	ldr	r3, [pc, #12]	; (8006310 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	20000094 	.word	0x20000094

08006314 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2243      	movs	r2, #67	; 0x43
 8006320:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006322:	4b03      	ldr	r3, [pc, #12]	; (8006330 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006324:	4618      	mov	r0, r3
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	20000050 	.word	0x20000050

08006334 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2243      	movs	r2, #67	; 0x43
 8006340:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006342:	4b03      	ldr	r3, [pc, #12]	; (8006350 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006344:	4618      	mov	r0, r3
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	200000d8 	.word	0x200000d8

08006354 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	220a      	movs	r2, #10
 8006360:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006362:	4b03      	ldr	r3, [pc, #12]	; (8006370 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006364:	4618      	mov	r0, r3
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	2000000c 	.word	0x2000000c

08006374 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800637e:	2302      	movs	r3, #2
 8006380:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d005      	beq.n	8006394 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006394:	7bfb      	ldrb	r3, [r7, #15]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b087      	sub	sp, #28
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	60f8      	str	r0, [r7, #12]
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	4613      	mov	r3, r2
 80063ae:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80063c0:	88fa      	ldrh	r2, [r7, #6]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	371c      	adds	r7, #28
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800640c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01c      	beq.n	8006452 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800641e:	2b00      	cmp	r3, #0
 8006420:	d115      	bne.n	800644e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006440:	b29b      	uxth	r3, r3
 8006442:	2181      	movs	r1, #129	; 0x81
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f001 fd25 	bl	8007e94 <USBD_LL_Transmit>

      return USBD_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	e002      	b.n	8006454 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006452:	2302      	movs	r3, #2
  }
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006472:	2b00      	cmp	r3, #0
 8006474:	d017      	beq.n	80064a6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	7c1b      	ldrb	r3, [r3, #16]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d109      	bne.n	8006492 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006488:	2101      	movs	r1, #1
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 fd25 	bl	8007eda <USBD_LL_PrepareReceive>
 8006490:	e007      	b.n	80064a2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006498:	2340      	movs	r3, #64	; 0x40
 800649a:	2101      	movs	r1, #1
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 fd1c 	bl	8007eda <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	e000      	b.n	80064a8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80064a6:	2302      	movs	r3, #2
  }
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	4613      	mov	r3, r2
 80064bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80064c4:	2302      	movs	r3, #2
 80064c6:	e01a      	b.n	80064fe <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	79fa      	ldrb	r2, [r7, #7]
 80064f4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f001 fb86 	bl	8007c08 <USBD_LL_Init>

  return USBD_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006506:	b480      	push	{r7}
 8006508:	b085      	sub	sp, #20
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d006      	beq.n	8006528 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	73fb      	strb	r3, [r7, #15]
 8006526:	e001      	b.n	800652c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006528:	2302      	movs	r3, #2
 800652a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800652c:	7bfb      	ldrb	r3, [r7, #15]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b082      	sub	sp, #8
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f001 fbbc 	bl	8007cc0 <USBD_LL_Start>

  return USBD_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006552:	b480      	push	{r7}
 8006554:	b083      	sub	sp, #12
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	460b      	mov	r3, r1
 8006572:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006574:	2302      	movs	r3, #2
 8006576:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00c      	beq.n	800659c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	78fa      	ldrb	r2, [r7, #3]
 800658c:	4611      	mov	r1, r2
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	4798      	blx	r3
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006598:	2300      	movs	r3, #0
 800659a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800659c:	7bfb      	ldrb	r3, [r7, #15]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	460b      	mov	r3, r1
 80065b0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	78fa      	ldrb	r2, [r7, #3]
 80065bc:	4611      	mov	r1, r2
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	4798      	blx	r3

  return USBD_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065dc:	6839      	ldr	r1, [r7, #0]
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fedb 	bl	800739a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80065f2:	461a      	mov	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006600:	f003 031f 	and.w	r3, r3, #31
 8006604:	2b02      	cmp	r3, #2
 8006606:	d016      	beq.n	8006636 <USBD_LL_SetupStage+0x6a>
 8006608:	2b02      	cmp	r3, #2
 800660a:	d81c      	bhi.n	8006646 <USBD_LL_SetupStage+0x7a>
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <USBD_LL_SetupStage+0x4a>
 8006610:	2b01      	cmp	r3, #1
 8006612:	d008      	beq.n	8006626 <USBD_LL_SetupStage+0x5a>
 8006614:	e017      	b.n	8006646 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f9ce 	bl	80069c0 <USBD_StdDevReq>
      break;
 8006624:	e01a      	b.n	800665c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fa30 	bl	8006a94 <USBD_StdItfReq>
      break;
 8006634:	e012      	b.n	800665c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800663c:	4619      	mov	r1, r3
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fa70 	bl	8006b24 <USBD_StdEPReq>
      break;
 8006644:	e00a      	b.n	800665c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800664c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006650:	b2db      	uxtb	r3, r3
 8006652:	4619      	mov	r1, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 fb93 	bl	8007d80 <USBD_LL_StallEP>
      break;
 800665a:	bf00      	nop
  }

  return USBD_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b086      	sub	sp, #24
 800666a:	af00      	add	r7, sp, #0
 800666c:	60f8      	str	r0, [r7, #12]
 800666e:	460b      	mov	r3, r1
 8006670:	607a      	str	r2, [r7, #4]
 8006672:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006674:	7afb      	ldrb	r3, [r7, #11]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d14b      	bne.n	8006712 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006680:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006688:	2b03      	cmp	r3, #3
 800668a:	d134      	bne.n	80066f6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	68da      	ldr	r2, [r3, #12]
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	429a      	cmp	r2, r3
 8006696:	d919      	bls.n	80066cc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	1ad2      	subs	r2, r2, r3
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d203      	bcs.n	80066ba <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	e002      	b.n	80066c0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80066be:	b29b      	uxth	r3, r3
 80066c0:	461a      	mov	r2, r3
 80066c2:	6879      	ldr	r1, [r7, #4]
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 ff5c 	bl	8007582 <USBD_CtlContinueRx>
 80066ca:	e038      	b.n	800673e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00a      	beq.n	80066ee <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d105      	bne.n	80066ee <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 ff59 	bl	80075a6 <USBD_CtlSendStatus>
 80066f4:	e023      	b.n	800673e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066fc:	2b05      	cmp	r3, #5
 80066fe:	d11e      	bne.n	800673e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006708:	2100      	movs	r1, #0
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f001 fb38 	bl	8007d80 <USBD_LL_StallEP>
 8006710:	e015      	b.n	800673e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00d      	beq.n	800673a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006724:	2b03      	cmp	r3, #3
 8006726:	d108      	bne.n	800673a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	7afa      	ldrb	r2, [r7, #11]
 8006732:	4611      	mov	r1, r2
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	4798      	blx	r3
 8006738:	e001      	b.n	800673e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800673a:	2302      	movs	r3, #2
 800673c:	e000      	b.n	8006740 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3718      	adds	r7, #24
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	460b      	mov	r3, r1
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006756:	7afb      	ldrb	r3, [r7, #11]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d17f      	bne.n	800685c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3314      	adds	r3, #20
 8006760:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006768:	2b02      	cmp	r3, #2
 800676a:	d15c      	bne.n	8006826 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	429a      	cmp	r2, r3
 8006776:	d915      	bls.n	80067a4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	1ad2      	subs	r2, r2, r3
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	b29b      	uxth	r3, r3
 800678c:	461a      	mov	r2, r3
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 fec6 	bl	8007522 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006796:	2300      	movs	r3, #0
 8006798:	2200      	movs	r2, #0
 800679a:	2100      	movs	r1, #0
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f001 fb9c 	bl	8007eda <USBD_LL_PrepareReceive>
 80067a2:	e04e      	b.n	8006842 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	6912      	ldr	r2, [r2, #16]
 80067ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80067b0:	fb01 f202 	mul.w	r2, r1, r2
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d11c      	bne.n	80067f4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d316      	bcc.n	80067f4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	689a      	ldr	r2, [r3, #8]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d20f      	bcs.n	80067f4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80067d4:	2200      	movs	r2, #0
 80067d6:	2100      	movs	r1, #0
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 fea2 	bl	8007522 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067e6:	2300      	movs	r3, #0
 80067e8:	2200      	movs	r2, #0
 80067ea:	2100      	movs	r1, #0
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f001 fb74 	bl	8007eda <USBD_LL_PrepareReceive>
 80067f2:	e026      	b.n	8006842 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00a      	beq.n	8006816 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006806:	2b03      	cmp	r3, #3
 8006808:	d105      	bne.n	8006816 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006816:	2180      	movs	r1, #128	; 0x80
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f001 fab1 	bl	8007d80 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 fed4 	bl	80075cc <USBD_CtlReceiveStatus>
 8006824:	e00d      	b.n	8006842 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800682c:	2b04      	cmp	r3, #4
 800682e:	d004      	beq.n	800683a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006836:	2b00      	cmp	r3, #0
 8006838:	d103      	bne.n	8006842 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800683a:	2180      	movs	r1, #128	; 0x80
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f001 fa9f 	bl	8007d80 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006848:	2b01      	cmp	r3, #1
 800684a:	d11d      	bne.n	8006888 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f7ff fe80 	bl	8006552 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800685a:	e015      	b.n	8006888 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00d      	beq.n	8006884 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800686e:	2b03      	cmp	r3, #3
 8006870:	d108      	bne.n	8006884 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	7afa      	ldrb	r2, [r7, #11]
 800687c:	4611      	mov	r1, r2
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	4798      	blx	r3
 8006882:	e001      	b.n	8006888 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006884:	2302      	movs	r3, #2
 8006886:	e000      	b.n	800688a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3718      	adds	r7, #24
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b082      	sub	sp, #8
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800689a:	2340      	movs	r3, #64	; 0x40
 800689c:	2200      	movs	r2, #0
 800689e:	2100      	movs	r1, #0
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 fa28 	bl	8007cf6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2240      	movs	r2, #64	; 0x40
 80068b2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068b6:	2340      	movs	r3, #64	; 0x40
 80068b8:	2200      	movs	r2, #0
 80068ba:	2180      	movs	r1, #128	; 0x80
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f001 fa1a 	bl	8007cf6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2240      	movs	r2, #64	; 0x40
 80068cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d009      	beq.n	800690a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	6852      	ldr	r2, [r2, #4]
 8006902:	b2d2      	uxtb	r2, r2
 8006904:	4611      	mov	r1, r2
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	4798      	blx	r3
  }

  return USBD_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	460b      	mov	r3, r1
 800691e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	78fa      	ldrb	r2, [r7, #3]
 8006924:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2204      	movs	r2, #4
 800694c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800696c:	2b04      	cmp	r3, #4
 800696e:	d105      	bne.n	800697c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b082      	sub	sp, #8
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006998:	2b03      	cmp	r3, #3
 800699a:	d10b      	bne.n	80069b4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a2:	69db      	ldr	r3, [r3, #28]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d005      	beq.n	80069b4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
	...

080069c0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069d6:	2b40      	cmp	r3, #64	; 0x40
 80069d8:	d005      	beq.n	80069e6 <USBD_StdDevReq+0x26>
 80069da:	2b40      	cmp	r3, #64	; 0x40
 80069dc:	d84f      	bhi.n	8006a7e <USBD_StdDevReq+0xbe>
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d009      	beq.n	80069f6 <USBD_StdDevReq+0x36>
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	d14b      	bne.n	8006a7e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	4798      	blx	r3
      break;
 80069f4:	e048      	b.n	8006a88 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	785b      	ldrb	r3, [r3, #1]
 80069fa:	2b09      	cmp	r3, #9
 80069fc:	d839      	bhi.n	8006a72 <USBD_StdDevReq+0xb2>
 80069fe:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <USBD_StdDevReq+0x44>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a55 	.word	0x08006a55
 8006a08:	08006a69 	.word	0x08006a69
 8006a0c:	08006a73 	.word	0x08006a73
 8006a10:	08006a5f 	.word	0x08006a5f
 8006a14:	08006a73 	.word	0x08006a73
 8006a18:	08006a37 	.word	0x08006a37
 8006a1c:	08006a2d 	.word	0x08006a2d
 8006a20:	08006a73 	.word	0x08006a73
 8006a24:	08006a4b 	.word	0x08006a4b
 8006a28:	08006a41 	.word	0x08006a41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f9dc 	bl	8006dec <USBD_GetDescriptor>
          break;
 8006a34:	e022      	b.n	8006a7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fb3f 	bl	80070bc <USBD_SetAddress>
          break;
 8006a3e:	e01d      	b.n	8006a7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fb7e 	bl	8007144 <USBD_SetConfig>
          break;
 8006a48:	e018      	b.n	8006a7c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fc07 	bl	8007260 <USBD_GetConfig>
          break;
 8006a52:	e013      	b.n	8006a7c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fc37 	bl	80072ca <USBD_GetStatus>
          break;
 8006a5c:	e00e      	b.n	8006a7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fc65 	bl	8007330 <USBD_SetFeature>
          break;
 8006a66:	e009      	b.n	8006a7c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fc74 	bl	8007358 <USBD_ClrFeature>
          break;
 8006a70:	e004      	b.n	8006a7c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fccd 	bl	8007414 <USBD_CtlError>
          break;
 8006a7a:	bf00      	nop
      }
      break;
 8006a7c:	e004      	b.n	8006a88 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fcc7 	bl	8007414 <USBD_CtlError>
      break;
 8006a86:	bf00      	nop
  }

  return ret;
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop

08006a94 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006aaa:	2b40      	cmp	r3, #64	; 0x40
 8006aac:	d005      	beq.n	8006aba <USBD_StdItfReq+0x26>
 8006aae:	2b40      	cmp	r3, #64	; 0x40
 8006ab0:	d82e      	bhi.n	8006b10 <USBD_StdItfReq+0x7c>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <USBD_StdItfReq+0x26>
 8006ab6:	2b20      	cmp	r3, #32
 8006ab8:	d12a      	bne.n	8006b10 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d81d      	bhi.n	8006b02 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	889b      	ldrh	r3, [r3, #4]
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d813      	bhi.n	8006af8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	4798      	blx	r3
 8006ade:	4603      	mov	r3, r0
 8006ae0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	88db      	ldrh	r3, [r3, #6]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d110      	bne.n	8006b0c <USBD_StdItfReq+0x78>
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10d      	bne.n	8006b0c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fd58 	bl	80075a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006af6:	e009      	b.n	8006b0c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fc8a 	bl	8007414 <USBD_CtlError>
          break;
 8006b00:	e004      	b.n	8006b0c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fc85 	bl	8007414 <USBD_CtlError>
          break;
 8006b0a:	e000      	b.n	8006b0e <USBD_StdItfReq+0x7a>
          break;
 8006b0c:	bf00      	nop
      }
      break;
 8006b0e:	e004      	b.n	8006b1a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fc7e 	bl	8007414 <USBD_CtlError>
      break;
 8006b18:	bf00      	nop
  }

  return USBD_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	889b      	ldrh	r3, [r3, #4]
 8006b36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b40:	2b40      	cmp	r3, #64	; 0x40
 8006b42:	d007      	beq.n	8006b54 <USBD_StdEPReq+0x30>
 8006b44:	2b40      	cmp	r3, #64	; 0x40
 8006b46:	f200 8146 	bhi.w	8006dd6 <USBD_StdEPReq+0x2b2>
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <USBD_StdEPReq+0x40>
 8006b4e:	2b20      	cmp	r3, #32
 8006b50:	f040 8141 	bne.w	8006dd6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	4798      	blx	r3
      break;
 8006b62:	e13d      	b.n	8006de0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b6c:	2b20      	cmp	r3, #32
 8006b6e:	d10a      	bne.n	8006b86 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	4798      	blx	r3
 8006b7e:	4603      	mov	r3, r0
 8006b80:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
 8006b84:	e12d      	b.n	8006de2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	785b      	ldrb	r3, [r3, #1]
 8006b8a:	2b03      	cmp	r3, #3
 8006b8c:	d007      	beq.n	8006b9e <USBD_StdEPReq+0x7a>
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	f300 811b 	bgt.w	8006dca <USBD_StdEPReq+0x2a6>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d072      	beq.n	8006c7e <USBD_StdEPReq+0x15a>
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d03a      	beq.n	8006c12 <USBD_StdEPReq+0xee>
 8006b9c:	e115      	b.n	8006dca <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d002      	beq.n	8006bae <USBD_StdEPReq+0x8a>
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d015      	beq.n	8006bd8 <USBD_StdEPReq+0xb4>
 8006bac:	e02b      	b.n	8006c06 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00c      	beq.n	8006bce <USBD_StdEPReq+0xaa>
 8006bb4:	7bbb      	ldrb	r3, [r7, #14]
 8006bb6:	2b80      	cmp	r3, #128	; 0x80
 8006bb8:	d009      	beq.n	8006bce <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006bba:	7bbb      	ldrb	r3, [r7, #14]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f001 f8de 	bl	8007d80 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006bc4:	2180      	movs	r1, #128	; 0x80
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f001 f8da 	bl	8007d80 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bcc:	e020      	b.n	8006c10 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fc1f 	bl	8007414 <USBD_CtlError>
              break;
 8006bd6:	e01b      	b.n	8006c10 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	885b      	ldrh	r3, [r3, #2]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10e      	bne.n	8006bfe <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006be0:	7bbb      	ldrb	r3, [r7, #14]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00b      	beq.n	8006bfe <USBD_StdEPReq+0xda>
 8006be6:	7bbb      	ldrb	r3, [r7, #14]
 8006be8:	2b80      	cmp	r3, #128	; 0x80
 8006bea:	d008      	beq.n	8006bfe <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	88db      	ldrh	r3, [r3, #6]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d104      	bne.n	8006bfe <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006bf4:	7bbb      	ldrb	r3, [r7, #14]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 f8c1 	bl	8007d80 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fcd1 	bl	80075a6 <USBD_CtlSendStatus>

              break;
 8006c04:	e004      	b.n	8006c10 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006c06:	6839      	ldr	r1, [r7, #0]
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fc03 	bl	8007414 <USBD_CtlError>
              break;
 8006c0e:	bf00      	nop
          }
          break;
 8006c10:	e0e0      	b.n	8006dd4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d002      	beq.n	8006c22 <USBD_StdEPReq+0xfe>
 8006c1c:	2b03      	cmp	r3, #3
 8006c1e:	d015      	beq.n	8006c4c <USBD_StdEPReq+0x128>
 8006c20:	e026      	b.n	8006c70 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c22:	7bbb      	ldrb	r3, [r7, #14]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00c      	beq.n	8006c42 <USBD_StdEPReq+0x11e>
 8006c28:	7bbb      	ldrb	r3, [r7, #14]
 8006c2a:	2b80      	cmp	r3, #128	; 0x80
 8006c2c:	d009      	beq.n	8006c42 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006c2e:	7bbb      	ldrb	r3, [r7, #14]
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f001 f8a4 	bl	8007d80 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006c38:	2180      	movs	r1, #128	; 0x80
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f001 f8a0 	bl	8007d80 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c40:	e01c      	b.n	8006c7c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fbe5 	bl	8007414 <USBD_CtlError>
              break;
 8006c4a:	e017      	b.n	8006c7c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	885b      	ldrh	r3, [r3, #2]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d112      	bne.n	8006c7a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c54:	7bbb      	ldrb	r3, [r7, #14]
 8006c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d004      	beq.n	8006c68 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c5e:	7bbb      	ldrb	r3, [r7, #14]
 8006c60:	4619      	mov	r1, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 f8ab 	bl	8007dbe <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fc9c 	bl	80075a6 <USBD_CtlSendStatus>
              }
              break;
 8006c6e:	e004      	b.n	8006c7a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fbce 	bl	8007414 <USBD_CtlError>
              break;
 8006c78:	e000      	b.n	8006c7c <USBD_StdEPReq+0x158>
              break;
 8006c7a:	bf00      	nop
          }
          break;
 8006c7c:	e0aa      	b.n	8006dd4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d002      	beq.n	8006c8e <USBD_StdEPReq+0x16a>
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d032      	beq.n	8006cf2 <USBD_StdEPReq+0x1ce>
 8006c8c:	e097      	b.n	8006dbe <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c8e:	7bbb      	ldrb	r3, [r7, #14]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d007      	beq.n	8006ca4 <USBD_StdEPReq+0x180>
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	2b80      	cmp	r3, #128	; 0x80
 8006c98:	d004      	beq.n	8006ca4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fbb9 	bl	8007414 <USBD_CtlError>
                break;
 8006ca2:	e091      	b.n	8006dc8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ca4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	da0b      	bge.n	8006cc4 <USBD_StdEPReq+0x1a0>
 8006cac:	7bbb      	ldrb	r3, [r7, #14]
 8006cae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	3310      	adds	r3, #16
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	e00b      	b.n	8006cdc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cc4:	7bbb      	ldrb	r3, [r7, #14]
 8006cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	4413      	add	r3, r2
 8006cda:	3304      	adds	r3, #4
 8006cdc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	4619      	mov	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fbfd 	bl	80074ea <USBD_CtlSendData>
              break;
 8006cf0:	e06a      	b.n	8006dc8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006cf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	da11      	bge.n	8006d1e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006cfa:	7bbb      	ldrb	r3, [r7, #14]
 8006cfc:	f003 020f 	and.w	r2, r3, #15
 8006d00:	6879      	ldr	r1, [r7, #4]
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	440b      	add	r3, r1
 8006d0c:	3318      	adds	r3, #24
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d117      	bne.n	8006d44 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fb7c 	bl	8007414 <USBD_CtlError>
                  break;
 8006d1c:	e054      	b.n	8006dc8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
 8006d20:	f003 020f 	and.w	r2, r3, #15
 8006d24:	6879      	ldr	r1, [r7, #4]
 8006d26:	4613      	mov	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	440b      	add	r3, r1
 8006d30:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d104      	bne.n	8006d44 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fb69 	bl	8007414 <USBD_CtlError>
                  break;
 8006d42:	e041      	b.n	8006dc8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	da0b      	bge.n	8006d64 <USBD_StdEPReq+0x240>
 8006d4c:	7bbb      	ldrb	r3, [r7, #14]
 8006d4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d52:	4613      	mov	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	3310      	adds	r3, #16
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	4413      	add	r3, r2
 8006d60:	3304      	adds	r3, #4
 8006d62:	e00b      	b.n	8006d7c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d64:	7bbb      	ldrb	r3, [r7, #14]
 8006d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	4413      	add	r3, r2
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d7e:	7bbb      	ldrb	r3, [r7, #14]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <USBD_StdEPReq+0x266>
 8006d84:	7bbb      	ldrb	r3, [r7, #14]
 8006d86:	2b80      	cmp	r3, #128	; 0x80
 8006d88:	d103      	bne.n	8006d92 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	e00e      	b.n	8006db0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006d92:	7bbb      	ldrb	r3, [r7, #14]
 8006d94:	4619      	mov	r1, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 f830 	bl	8007dfc <USBD_LL_IsStallEP>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2201      	movs	r2, #1
 8006da6:	601a      	str	r2, [r3, #0]
 8006da8:	e002      	b.n	8006db0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2200      	movs	r2, #0
 8006dae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2202      	movs	r2, #2
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fb97 	bl	80074ea <USBD_CtlSendData>
              break;
 8006dbc:	e004      	b.n	8006dc8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fb27 	bl	8007414 <USBD_CtlError>
              break;
 8006dc6:	bf00      	nop
          }
          break;
 8006dc8:	e004      	b.n	8006dd4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fb21 	bl	8007414 <USBD_CtlError>
          break;
 8006dd2:	bf00      	nop
      }
      break;
 8006dd4:	e004      	b.n	8006de0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fb1b 	bl	8007414 <USBD_CtlError>
      break;
 8006dde:	bf00      	nop
  }

  return ret;
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
	...

08006dec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	885b      	ldrh	r3, [r3, #2]
 8006e06:	0a1b      	lsrs	r3, r3, #8
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	2b06      	cmp	r3, #6
 8006e0e:	f200 8128 	bhi.w	8007062 <USBD_GetDescriptor+0x276>
 8006e12:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <USBD_GetDescriptor+0x2c>)
 8006e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e18:	08006e35 	.word	0x08006e35
 8006e1c:	08006e4d 	.word	0x08006e4d
 8006e20:	08006e8d 	.word	0x08006e8d
 8006e24:	08007063 	.word	0x08007063
 8006e28:	08007063 	.word	0x08007063
 8006e2c:	08007003 	.word	0x08007003
 8006e30:	0800702f 	.word	0x0800702f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	7c12      	ldrb	r2, [r2, #16]
 8006e40:	f107 0108 	add.w	r1, r7, #8
 8006e44:	4610      	mov	r0, r2
 8006e46:	4798      	blx	r3
 8006e48:	60f8      	str	r0, [r7, #12]
      break;
 8006e4a:	e112      	b.n	8007072 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	7c1b      	ldrb	r3, [r3, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10d      	bne.n	8006e70 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5c:	f107 0208 	add.w	r2, r7, #8
 8006e60:	4610      	mov	r0, r2
 8006e62:	4798      	blx	r3
 8006e64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e6e:	e100      	b.n	8007072 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e78:	f107 0208 	add.w	r2, r7, #8
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	4798      	blx	r3
 8006e80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3301      	adds	r3, #1
 8006e86:	2202      	movs	r2, #2
 8006e88:	701a      	strb	r2, [r3, #0]
      break;
 8006e8a:	e0f2      	b.n	8007072 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	885b      	ldrh	r3, [r3, #2]
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b05      	cmp	r3, #5
 8006e94:	f200 80ac 	bhi.w	8006ff0 <USBD_GetDescriptor+0x204>
 8006e98:	a201      	add	r2, pc, #4	; (adr r2, 8006ea0 <USBD_GetDescriptor+0xb4>)
 8006e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9e:	bf00      	nop
 8006ea0:	08006eb9 	.word	0x08006eb9
 8006ea4:	08006eed 	.word	0x08006eed
 8006ea8:	08006f21 	.word	0x08006f21
 8006eac:	08006f55 	.word	0x08006f55
 8006eb0:	08006f89 	.word	0x08006f89
 8006eb4:	08006fbd 	.word	0x08006fbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00b      	beq.n	8006edc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	7c12      	ldrb	r2, [r2, #16]
 8006ed0:	f107 0108 	add.w	r1, r7, #8
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	4798      	blx	r3
 8006ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eda:	e091      	b.n	8007000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fa98 	bl	8007414 <USBD_CtlError>
            err++;
 8006ee4:	7afb      	ldrb	r3, [r7, #11]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eea:	e089      	b.n	8007000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00b      	beq.n	8006f10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	7c12      	ldrb	r2, [r2, #16]
 8006f04:	f107 0108 	add.w	r1, r7, #8
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4798      	blx	r3
 8006f0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f0e:	e077      	b.n	8007000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fa7e 	bl	8007414 <USBD_CtlError>
            err++;
 8006f18:	7afb      	ldrb	r3, [r7, #11]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f1e:	e06f      	b.n	8007000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00b      	beq.n	8006f44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	7c12      	ldrb	r2, [r2, #16]
 8006f38:	f107 0108 	add.w	r1, r7, #8
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	4798      	blx	r3
 8006f40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f42:	e05d      	b.n	8007000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fa64 	bl	8007414 <USBD_CtlError>
            err++;
 8006f4c:	7afb      	ldrb	r3, [r7, #11]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	72fb      	strb	r3, [r7, #11]
          break;
 8006f52:	e055      	b.n	8007000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00b      	beq.n	8006f78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	7c12      	ldrb	r2, [r2, #16]
 8006f6c:	f107 0108 	add.w	r1, r7, #8
 8006f70:	4610      	mov	r0, r2
 8006f72:	4798      	blx	r3
 8006f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f76:	e043      	b.n	8007000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fa4a 	bl	8007414 <USBD_CtlError>
            err++;
 8006f80:	7afb      	ldrb	r3, [r7, #11]
 8006f82:	3301      	adds	r3, #1
 8006f84:	72fb      	strb	r3, [r7, #11]
          break;
 8006f86:	e03b      	b.n	8007000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00b      	beq.n	8006fac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	7c12      	ldrb	r2, [r2, #16]
 8006fa0:	f107 0108 	add.w	r1, r7, #8
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	4798      	blx	r3
 8006fa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006faa:	e029      	b.n	8007000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fa30 	bl	8007414 <USBD_CtlError>
            err++;
 8006fb4:	7afb      	ldrb	r3, [r7, #11]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fba:	e021      	b.n	8007000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00b      	beq.n	8006fe0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	7c12      	ldrb	r2, [r2, #16]
 8006fd4:	f107 0108 	add.w	r1, r7, #8
 8006fd8:	4610      	mov	r0, r2
 8006fda:	4798      	blx	r3
 8006fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fde:	e00f      	b.n	8007000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fa16 	bl	8007414 <USBD_CtlError>
            err++;
 8006fe8:	7afb      	ldrb	r3, [r7, #11]
 8006fea:	3301      	adds	r3, #1
 8006fec:	72fb      	strb	r3, [r7, #11]
          break;
 8006fee:	e007      	b.n	8007000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa0e 	bl	8007414 <USBD_CtlError>
          err++;
 8006ff8:	7afb      	ldrb	r3, [r7, #11]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006ffe:	e038      	b.n	8007072 <USBD_GetDescriptor+0x286>
 8007000:	e037      	b.n	8007072 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	7c1b      	ldrb	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d109      	bne.n	800701e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007012:	f107 0208 	add.w	r2, r7, #8
 8007016:	4610      	mov	r0, r2
 8007018:	4798      	blx	r3
 800701a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800701c:	e029      	b.n	8007072 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f9f7 	bl	8007414 <USBD_CtlError>
        err++;
 8007026:	7afb      	ldrb	r3, [r7, #11]
 8007028:	3301      	adds	r3, #1
 800702a:	72fb      	strb	r3, [r7, #11]
      break;
 800702c:	e021      	b.n	8007072 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	7c1b      	ldrb	r3, [r3, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10d      	bne.n	8007052 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800703c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703e:	f107 0208 	add.w	r2, r7, #8
 8007042:	4610      	mov	r0, r2
 8007044:	4798      	blx	r3
 8007046:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3301      	adds	r3, #1
 800704c:	2207      	movs	r2, #7
 800704e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007050:	e00f      	b.n	8007072 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f9dd 	bl	8007414 <USBD_CtlError>
        err++;
 800705a:	7afb      	ldrb	r3, [r7, #11]
 800705c:	3301      	adds	r3, #1
 800705e:	72fb      	strb	r3, [r7, #11]
      break;
 8007060:	e007      	b.n	8007072 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f9d5 	bl	8007414 <USBD_CtlError>
      err++;
 800706a:	7afb      	ldrb	r3, [r7, #11]
 800706c:	3301      	adds	r3, #1
 800706e:	72fb      	strb	r3, [r7, #11]
      break;
 8007070:	bf00      	nop
  }

  if (err != 0U)
 8007072:	7afb      	ldrb	r3, [r7, #11]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d11c      	bne.n	80070b2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007078:	893b      	ldrh	r3, [r7, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d011      	beq.n	80070a2 <USBD_GetDescriptor+0x2b6>
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	88db      	ldrh	r3, [r3, #6]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00d      	beq.n	80070a2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	88da      	ldrh	r2, [r3, #6]
 800708a:	893b      	ldrh	r3, [r7, #8]
 800708c:	4293      	cmp	r3, r2
 800708e:	bf28      	it	cs
 8007090:	4613      	movcs	r3, r2
 8007092:	b29b      	uxth	r3, r3
 8007094:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007096:	893b      	ldrh	r3, [r7, #8]
 8007098:	461a      	mov	r2, r3
 800709a:	68f9      	ldr	r1, [r7, #12]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fa24 	bl	80074ea <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	88db      	ldrh	r3, [r3, #6]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d104      	bne.n	80070b4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fa7b 	bl	80075a6 <USBD_CtlSendStatus>
 80070b0:	e000      	b.n	80070b4 <USBD_GetDescriptor+0x2c8>
    return;
 80070b2:	bf00      	nop
    }
  }
}
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop

080070bc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	889b      	ldrh	r3, [r3, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d130      	bne.n	8007130 <USBD_SetAddress+0x74>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	88db      	ldrh	r3, [r3, #6]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d12c      	bne.n	8007130 <USBD_SetAddress+0x74>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	885b      	ldrh	r3, [r3, #2]
 80070da:	2b7f      	cmp	r3, #127	; 0x7f
 80070dc:	d828      	bhi.n	8007130 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	885b      	ldrh	r3, [r3, #2]
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	d104      	bne.n	80070fe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f98c 	bl	8007414 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070fc:	e01d      	b.n	800713a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	7bfa      	ldrb	r2, [r7, #15]
 8007102:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007106:	7bfb      	ldrb	r3, [r7, #15]
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fea3 	bl	8007e56 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fa48 	bl	80075a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007116:	7bfb      	ldrb	r3, [r7, #15]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d004      	beq.n	8007126 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007124:	e009      	b.n	800713a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800712e:	e004      	b.n	800713a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f96e 	bl	8007414 <USBD_CtlError>
  }
}
 8007138:	bf00      	nop
 800713a:	bf00      	nop
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	885b      	ldrh	r3, [r3, #2]
 8007152:	b2da      	uxtb	r2, r3
 8007154:	4b41      	ldr	r3, [pc, #260]	; (800725c <USBD_SetConfig+0x118>)
 8007156:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007158:	4b40      	ldr	r3, [pc, #256]	; (800725c <USBD_SetConfig+0x118>)
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d904      	bls.n	800716a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f956 	bl	8007414 <USBD_CtlError>
 8007168:	e075      	b.n	8007256 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007170:	2b02      	cmp	r3, #2
 8007172:	d002      	beq.n	800717a <USBD_SetConfig+0x36>
 8007174:	2b03      	cmp	r3, #3
 8007176:	d023      	beq.n	80071c0 <USBD_SetConfig+0x7c>
 8007178:	e062      	b.n	8007240 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800717a:	4b38      	ldr	r3, [pc, #224]	; (800725c <USBD_SetConfig+0x118>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d01a      	beq.n	80071b8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007182:	4b36      	ldr	r3, [pc, #216]	; (800725c <USBD_SetConfig+0x118>)
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2203      	movs	r2, #3
 8007190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007194:	4b31      	ldr	r3, [pc, #196]	; (800725c <USBD_SetConfig+0x118>)
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	4619      	mov	r1, r3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7ff f9e4 	bl	8006568 <USBD_SetClassConfig>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d104      	bne.n	80071b0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f933 	bl	8007414 <USBD_CtlError>
            return;
 80071ae:	e052      	b.n	8007256 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f9f8 	bl	80075a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80071b6:	e04e      	b.n	8007256 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f9f4 	bl	80075a6 <USBD_CtlSendStatus>
        break;
 80071be:	e04a      	b.n	8007256 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80071c0:	4b26      	ldr	r3, [pc, #152]	; (800725c <USBD_SetConfig+0x118>)
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d112      	bne.n	80071ee <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80071d0:	4b22      	ldr	r3, [pc, #136]	; (800725c <USBD_SetConfig+0x118>)
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	461a      	mov	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80071da:	4b20      	ldr	r3, [pc, #128]	; (800725c <USBD_SetConfig+0x118>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	4619      	mov	r1, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff f9e0 	bl	80065a6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f9dd 	bl	80075a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80071ec:	e033      	b.n	8007256 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80071ee:	4b1b      	ldr	r3, [pc, #108]	; (800725c <USBD_SetConfig+0x118>)
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d01d      	beq.n	8007238 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	b2db      	uxtb	r3, r3
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7ff f9ce 	bl	80065a6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800720a:	4b14      	ldr	r3, [pc, #80]	; (800725c <USBD_SetConfig+0x118>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007214:	4b11      	ldr	r3, [pc, #68]	; (800725c <USBD_SetConfig+0x118>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff f9a4 	bl	8006568 <USBD_SetClassConfig>
 8007220:	4603      	mov	r3, r0
 8007222:	2b02      	cmp	r3, #2
 8007224:	d104      	bne.n	8007230 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f8f3 	bl	8007414 <USBD_CtlError>
            return;
 800722e:	e012      	b.n	8007256 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f9b8 	bl	80075a6 <USBD_CtlSendStatus>
        break;
 8007236:	e00e      	b.n	8007256 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f9b4 	bl	80075a6 <USBD_CtlSendStatus>
        break;
 800723e:	e00a      	b.n	8007256 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f8e6 	bl	8007414 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007248:	4b04      	ldr	r3, [pc, #16]	; (800725c <USBD_SetConfig+0x118>)
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7ff f9a9 	bl	80065a6 <USBD_ClrClassConfig>
        break;
 8007254:	bf00      	nop
    }
  }
}
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	2000019c 	.word	0x2000019c

08007260 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	88db      	ldrh	r3, [r3, #6]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d004      	beq.n	800727c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f8cd 	bl	8007414 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800727a:	e022      	b.n	80072c2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007282:	2b02      	cmp	r3, #2
 8007284:	dc02      	bgt.n	800728c <USBD_GetConfig+0x2c>
 8007286:	2b00      	cmp	r3, #0
 8007288:	dc03      	bgt.n	8007292 <USBD_GetConfig+0x32>
 800728a:	e015      	b.n	80072b8 <USBD_GetConfig+0x58>
 800728c:	2b03      	cmp	r3, #3
 800728e:	d00b      	beq.n	80072a8 <USBD_GetConfig+0x48>
 8007290:	e012      	b.n	80072b8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	3308      	adds	r3, #8
 800729c:	2201      	movs	r2, #1
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f922 	bl	80074ea <USBD_CtlSendData>
        break;
 80072a6:	e00c      	b.n	80072c2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	3304      	adds	r3, #4
 80072ac:	2201      	movs	r2, #1
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f91a 	bl	80074ea <USBD_CtlSendData>
        break;
 80072b6:	e004      	b.n	80072c2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f8aa 	bl	8007414 <USBD_CtlError>
        break;
 80072c0:	bf00      	nop
}
 80072c2:	bf00      	nop
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b082      	sub	sp, #8
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072da:	3b01      	subs	r3, #1
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d81e      	bhi.n	800731e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	88db      	ldrh	r3, [r3, #6]
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d004      	beq.n	80072f2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f892 	bl	8007414 <USBD_CtlError>
        break;
 80072f0:	e01a      	b.n	8007328 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d005      	beq.n	800730e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	f043 0202 	orr.w	r2, r3, #2
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	330c      	adds	r3, #12
 8007312:	2202      	movs	r2, #2
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f8e7 	bl	80074ea <USBD_CtlSendData>
      break;
 800731c:	e004      	b.n	8007328 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f877 	bl	8007414 <USBD_CtlError>
      break;
 8007326:	bf00      	nop
  }
}
 8007328:	bf00      	nop
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	885b      	ldrh	r3, [r3, #2]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d106      	bne.n	8007350 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f92b 	bl	80075a6 <USBD_CtlSendStatus>
  }
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007368:	3b01      	subs	r3, #1
 800736a:	2b02      	cmp	r3, #2
 800736c:	d80b      	bhi.n	8007386 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	885b      	ldrh	r3, [r3, #2]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d10c      	bne.n	8007390 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f911 	bl	80075a6 <USBD_CtlSendStatus>
      }
      break;
 8007384:	e004      	b.n	8007390 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f843 	bl	8007414 <USBD_CtlError>
      break;
 800738e:	e000      	b.n	8007392 <USBD_ClrFeature+0x3a>
      break;
 8007390:	bf00      	nop
  }
}
 8007392:	bf00      	nop
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	781a      	ldrb	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	785a      	ldrb	r2, [r3, #1]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	3302      	adds	r3, #2
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	3303      	adds	r3, #3
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	021b      	lsls	r3, r3, #8
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	4413      	add	r3, r2
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	3304      	adds	r3, #4
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	3305      	adds	r3, #5
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	021b      	lsls	r3, r3, #8
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	4413      	add	r3, r2
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	3306      	adds	r3, #6
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	3307      	adds	r3, #7
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	021b      	lsls	r3, r3, #8
 80073fe:	b29b      	uxth	r3, r3
 8007400:	4413      	add	r3, r2
 8007402:	b29a      	uxth	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	80da      	strh	r2, [r3, #6]

}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800741e:	2180      	movs	r1, #128	; 0x80
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fcad 	bl	8007d80 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007426:	2100      	movs	r1, #0
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fca9 	bl	8007d80 <USBD_LL_StallEP>
}
 800742e:	bf00      	nop
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b086      	sub	sp, #24
 800743a:	af00      	add	r7, sp, #0
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d032      	beq.n	80074b2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f000 f834 	bl	80074ba <USBD_GetLen>
 8007452:	4603      	mov	r3, r0
 8007454:	3301      	adds	r3, #1
 8007456:	b29b      	uxth	r3, r3
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	b29a      	uxth	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007460:	7dfb      	ldrb	r3, [r7, #23]
 8007462:	1c5a      	adds	r2, r3, #1
 8007464:	75fa      	strb	r2, [r7, #23]
 8007466:	461a      	mov	r2, r3
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	4413      	add	r3, r2
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	7812      	ldrb	r2, [r2, #0]
 8007470:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007472:	7dfb      	ldrb	r3, [r7, #23]
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	75fa      	strb	r2, [r7, #23]
 8007478:	461a      	mov	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	4413      	add	r3, r2
 800747e:	2203      	movs	r2, #3
 8007480:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007482:	e012      	b.n	80074aa <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	60fa      	str	r2, [r7, #12]
 800748a:	7dfa      	ldrb	r2, [r7, #23]
 800748c:	1c51      	adds	r1, r2, #1
 800748e:	75f9      	strb	r1, [r7, #23]
 8007490:	4611      	mov	r1, r2
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	440a      	add	r2, r1
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800749a:	7dfb      	ldrb	r3, [r7, #23]
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	75fa      	strb	r2, [r7, #23]
 80074a0:	461a      	mov	r2, r3
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	4413      	add	r3, r2
 80074a6:	2200      	movs	r2, #0
 80074a8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1e8      	bne.n	8007484 <USBD_GetString+0x4e>
    }
  }
}
 80074b2:	bf00      	nop
 80074b4:	3718      	adds	r7, #24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b085      	sub	sp, #20
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80074c6:	e005      	b.n	80074d4 <USBD_GetLen+0x1a>
  {
    len++;
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
 80074ca:	3301      	adds	r3, #1
 80074cc:	73fb      	strb	r3, [r7, #15]
    buf++;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	3301      	adds	r3, #1
 80074d2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1f5      	bne.n	80074c8 <USBD_GetLen+0xe>
  }

  return len;
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b084      	sub	sp, #16
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	60f8      	str	r0, [r7, #12]
 80074f2:	60b9      	str	r1, [r7, #8]
 80074f4:	4613      	mov	r3, r2
 80074f6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007500:	88fa      	ldrh	r2, [r7, #6]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007506:	88fa      	ldrh	r2, [r7, #6]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800750c:	88fb      	ldrh	r3, [r7, #6]
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	2100      	movs	r1, #0
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f000 fcbe 	bl	8007e94 <USBD_LL_Transmit>

  return USBD_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	60f8      	str	r0, [r7, #12]
 800752a:	60b9      	str	r1, [r7, #8]
 800752c:	4613      	mov	r3, r2
 800752e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007530:	88fb      	ldrh	r3, [r7, #6]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	2100      	movs	r1, #0
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 fcac 	bl	8007e94 <USBD_LL_Transmit>

  return USBD_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	60f8      	str	r0, [r7, #12]
 800754e:	60b9      	str	r1, [r7, #8]
 8007550:	4613      	mov	r3, r2
 8007552:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2203      	movs	r2, #3
 8007558:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800755c:	88fa      	ldrh	r2, [r7, #6]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007564:	88fa      	ldrh	r2, [r7, #6]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800756c:	88fb      	ldrh	r3, [r7, #6]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	2100      	movs	r1, #0
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 fcb1 	bl	8007eda <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b084      	sub	sp, #16
 8007586:	af00      	add	r7, sp, #0
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	4613      	mov	r3, r2
 800758e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007590:	88fb      	ldrh	r3, [r7, #6]
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	2100      	movs	r1, #0
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f000 fc9f 	bl	8007eda <USBD_LL_PrepareReceive>

  return USBD_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2204      	movs	r2, #4
 80075b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075b6:	2300      	movs	r3, #0
 80075b8:	2200      	movs	r2, #0
 80075ba:	2100      	movs	r1, #0
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fc69 	bl	8007e94 <USBD_LL_Transmit>

  return USBD_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2205      	movs	r2, #5
 80075d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075dc:	2300      	movs	r3, #0
 80075de:	2200      	movs	r2, #0
 80075e0:	2100      	movs	r1, #0
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fc79 	bl	8007eda <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
	...

080075f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80075f8:	2200      	movs	r2, #0
 80075fa:	4912      	ldr	r1, [pc, #72]	; (8007644 <MX_USB_DEVICE_Init+0x50>)
 80075fc:	4812      	ldr	r0, [pc, #72]	; (8007648 <MX_USB_DEVICE_Init+0x54>)
 80075fe:	f7fe ff57 	bl	80064b0 <USBD_Init>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007608:	f7f8 fe74 	bl	80002f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800760c:	490f      	ldr	r1, [pc, #60]	; (800764c <MX_USB_DEVICE_Init+0x58>)
 800760e:	480e      	ldr	r0, [pc, #56]	; (8007648 <MX_USB_DEVICE_Init+0x54>)
 8007610:	f7fe ff79 	bl	8006506 <USBD_RegisterClass>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800761a:	f7f8 fe6b 	bl	80002f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800761e:	490c      	ldr	r1, [pc, #48]	; (8007650 <MX_USB_DEVICE_Init+0x5c>)
 8007620:	4809      	ldr	r0, [pc, #36]	; (8007648 <MX_USB_DEVICE_Init+0x54>)
 8007622:	f7fe fea7 	bl	8006374 <USBD_CDC_RegisterInterface>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800762c:	f7f8 fe62 	bl	80002f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007630:	4805      	ldr	r0, [pc, #20]	; (8007648 <MX_USB_DEVICE_Init+0x54>)
 8007632:	f7fe ff82 	bl	800653a <USBD_Start>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800763c:	f7f8 fe5a 	bl	80002f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007640:	bf00      	nop
 8007642:	bd80      	pop	{r7, pc}
 8007644:	2000012c 	.word	0x2000012c
 8007648:	200001a0 	.word	0x200001a0
 800764c:	20000018 	.word	0x20000018
 8007650:	2000011c 	.word	0x2000011c

08007654 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007658:	2200      	movs	r2, #0
 800765a:	4905      	ldr	r1, [pc, #20]	; (8007670 <CDC_Init_FS+0x1c>)
 800765c:	4805      	ldr	r0, [pc, #20]	; (8007674 <CDC_Init_FS+0x20>)
 800765e:	f7fe fea0 	bl	80063a2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007662:	4905      	ldr	r1, [pc, #20]	; (8007678 <CDC_Init_FS+0x24>)
 8007664:	4803      	ldr	r0, [pc, #12]	; (8007674 <CDC_Init_FS+0x20>)
 8007666:	f7fe feb6 	bl	80063d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800766a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800766c:	4618      	mov	r0, r3
 800766e:	bd80      	pop	{r7, pc}
 8007670:	2000084c 	.word	0x2000084c
 8007674:	200001a0 	.word	0x200001a0
 8007678:	20000464 	.word	0x20000464

0800767c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007680:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007682:	4618      	mov	r0, r3
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	4603      	mov	r3, r0
 8007694:	6039      	str	r1, [r7, #0]
 8007696:	71fb      	strb	r3, [r7, #7]
 8007698:	4613      	mov	r3, r2
 800769a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800769c:	79fb      	ldrb	r3, [r7, #7]
 800769e:	2b23      	cmp	r3, #35	; 0x23
 80076a0:	d84a      	bhi.n	8007738 <CDC_Control_FS+0xac>
 80076a2:	a201      	add	r2, pc, #4	; (adr r2, 80076a8 <CDC_Control_FS+0x1c>)
 80076a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a8:	08007739 	.word	0x08007739
 80076ac:	08007739 	.word	0x08007739
 80076b0:	08007739 	.word	0x08007739
 80076b4:	08007739 	.word	0x08007739
 80076b8:	08007739 	.word	0x08007739
 80076bc:	08007739 	.word	0x08007739
 80076c0:	08007739 	.word	0x08007739
 80076c4:	08007739 	.word	0x08007739
 80076c8:	08007739 	.word	0x08007739
 80076cc:	08007739 	.word	0x08007739
 80076d0:	08007739 	.word	0x08007739
 80076d4:	08007739 	.word	0x08007739
 80076d8:	08007739 	.word	0x08007739
 80076dc:	08007739 	.word	0x08007739
 80076e0:	08007739 	.word	0x08007739
 80076e4:	08007739 	.word	0x08007739
 80076e8:	08007739 	.word	0x08007739
 80076ec:	08007739 	.word	0x08007739
 80076f0:	08007739 	.word	0x08007739
 80076f4:	08007739 	.word	0x08007739
 80076f8:	08007739 	.word	0x08007739
 80076fc:	08007739 	.word	0x08007739
 8007700:	08007739 	.word	0x08007739
 8007704:	08007739 	.word	0x08007739
 8007708:	08007739 	.word	0x08007739
 800770c:	08007739 	.word	0x08007739
 8007710:	08007739 	.word	0x08007739
 8007714:	08007739 	.word	0x08007739
 8007718:	08007739 	.word	0x08007739
 800771c:	08007739 	.word	0x08007739
 8007720:	08007739 	.word	0x08007739
 8007724:	08007739 	.word	0x08007739
 8007728:	08007739 	.word	0x08007739
 800772c:	08007739 	.word	0x08007739
 8007730:	08007739 	.word	0x08007739
 8007734:	08007739 	.word	0x08007739
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007738:	bf00      	nop
  }

  return (USBD_OK);
 800773a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800773c:	4618      	mov	r0, r3
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007752:	6879      	ldr	r1, [r7, #4]
 8007754:	4807      	ldr	r0, [pc, #28]	; (8007774 <CDC_Receive_FS+0x2c>)
 8007756:	f7fe fe3e 	bl	80063d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800775a:	4806      	ldr	r0, [pc, #24]	; (8007774 <CDC_Receive_FS+0x2c>)
 800775c:	f7fe fe7e 	bl	800645c <USBD_CDC_ReceivePacket>

  echo(Buf, Len);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f82e 	bl	80077c4 <echo>

  return (USBD_OK);
 8007768:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	200001a0 	.word	0x200001a0

08007778 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	460b      	mov	r3, r1
 8007782:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007788:	4b0d      	ldr	r3, [pc, #52]	; (80077c0 <CDC_Transmit_FS+0x48>)
 800778a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800778e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800779a:	2301      	movs	r3, #1
 800779c:	e00b      	b.n	80077b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800779e:	887b      	ldrh	r3, [r7, #2]
 80077a0:	461a      	mov	r2, r3
 80077a2:	6879      	ldr	r1, [r7, #4]
 80077a4:	4806      	ldr	r0, [pc, #24]	; (80077c0 <CDC_Transmit_FS+0x48>)
 80077a6:	f7fe fdfc 	bl	80063a2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80077aa:	4805      	ldr	r0, [pc, #20]	; (80077c0 <CDC_Transmit_FS+0x48>)
 80077ac:	f7fe fe27 	bl	80063fe <USBD_CDC_TransmitPacket>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	200001a0 	.word	0x200001a0

080077c4 <echo>:
/*
 * 		Function returns sent bytes to the host, terminated with carriage return and new line.
 */

void echo(uint8_t* Buf, uint32_t *Len)
{
 80077c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077c8:	b085      	sub	sp, #20
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	6039      	str	r1, [r7, #0]
 80077d0:	466b      	mov	r3, sp
 80077d2:	461e      	mov	r6, r3
//	new_size = &Len;

	uint8_t echo_message[*Len + 2];
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	1c99      	adds	r1, r3, #2
 80077da:	460b      	mov	r3, r1
 80077dc:	3b01      	subs	r3, #1
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	2300      	movs	r3, #0
 80077e2:	4688      	mov	r8, r1
 80077e4:	4699      	mov	r9, r3
 80077e6:	f04f 0200 	mov.w	r2, #0
 80077ea:	f04f 0300 	mov.w	r3, #0
 80077ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077fa:	2300      	movs	r3, #0
 80077fc:	460c      	mov	r4, r1
 80077fe:	461d      	mov	r5, r3
 8007800:	f04f 0200 	mov.w	r2, #0
 8007804:	f04f 0300 	mov.w	r3, #0
 8007808:	00eb      	lsls	r3, r5, #3
 800780a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800780e:	00e2      	lsls	r2, r4, #3
 8007810:	1dcb      	adds	r3, r1, #7
 8007812:	08db      	lsrs	r3, r3, #3
 8007814:	00db      	lsls	r3, r3, #3
 8007816:	ebad 0d03 	sub.w	sp, sp, r3
 800781a:	466b      	mov	r3, sp
 800781c:	3300      	adds	r3, #0
 800781e:	60bb      	str	r3, [r7, #8]
	memcpy(echo_message, Buf, *Len);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	461a      	mov	r2, r3
 8007826:	6879      	ldr	r1, [r7, #4]
 8007828:	68b8      	ldr	r0, [r7, #8]
 800782a:	f000 fc01 	bl	8008030 <memcpy>

	echo_message[*Len] = '\r';
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	210d      	movs	r1, #13
 8007836:	54d1      	strb	r1, [r2, r3]
	echo_message[*Len + 1] = '\n';
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3301      	adds	r3, #1
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	210a      	movs	r1, #10
 8007842:	54d1      	strb	r1, [r2, r3]

	CDC_Transmit_FS(echo_message, (uint16_t) *Len + 2);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	b29b      	uxth	r3, r3
 800784a:	3302      	adds	r3, #2
 800784c:	b29b      	uxth	r3, r3
 800784e:	4619      	mov	r1, r3
 8007850:	68b8      	ldr	r0, [r7, #8]
 8007852:	f7ff ff91 	bl	8007778 <CDC_Transmit_FS>
 8007856:	46b5      	mov	sp, r6
}
 8007858:	bf00      	nop
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08007864 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	4603      	mov	r3, r0
 800786c:	6039      	str	r1, [r7, #0]
 800786e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2212      	movs	r2, #18
 8007874:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007876:	4b03      	ldr	r3, [pc, #12]	; (8007884 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007878:	4618      	mov	r0, r3
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	20000148 	.word	0x20000148

08007888 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	4603      	mov	r3, r0
 8007890:	6039      	str	r1, [r7, #0]
 8007892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	2204      	movs	r2, #4
 8007898:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800789a:	4b03      	ldr	r3, [pc, #12]	; (80078a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800789c:	4618      	mov	r0, r3
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	2000015c 	.word	0x2000015c

080078ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	4603      	mov	r3, r0
 80078b4:	6039      	str	r1, [r7, #0]
 80078b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078b8:	79fb      	ldrb	r3, [r7, #7]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d105      	bne.n	80078ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	4907      	ldr	r1, [pc, #28]	; (80078e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80078c2:	4808      	ldr	r0, [pc, #32]	; (80078e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80078c4:	f7ff fdb7 	bl	8007436 <USBD_GetString>
 80078c8:	e004      	b.n	80078d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	4904      	ldr	r1, [pc, #16]	; (80078e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80078ce:	4805      	ldr	r0, [pc, #20]	; (80078e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80078d0:	f7ff fdb1 	bl	8007436 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078d4:	4b02      	ldr	r3, [pc, #8]	; (80078e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20000c34 	.word	0x20000c34
 80078e4:	08008074 	.word	0x08008074

080078e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	4603      	mov	r3, r0
 80078f0:	6039      	str	r1, [r7, #0]
 80078f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	4904      	ldr	r1, [pc, #16]	; (8007908 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80078f8:	4804      	ldr	r0, [pc, #16]	; (800790c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80078fa:	f7ff fd9c 	bl	8007436 <USBD_GetString>
  return USBD_StrDesc;
 80078fe:	4b02      	ldr	r3, [pc, #8]	; (8007908 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	20000c34 	.word	0x20000c34
 800790c:	0800808c 	.word	0x0800808c

08007910 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	4603      	mov	r3, r0
 8007918:	6039      	str	r1, [r7, #0]
 800791a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	221a      	movs	r2, #26
 8007920:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007922:	f000 f843 	bl	80079ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007926:	4b02      	ldr	r3, [pc, #8]	; (8007930 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007928:	4618      	mov	r0, r3
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20000160 	.word	0x20000160

08007934 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	4603      	mov	r3, r0
 800793c:	6039      	str	r1, [r7, #0]
 800793e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007940:	79fb      	ldrb	r3, [r7, #7]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d105      	bne.n	8007952 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	4907      	ldr	r1, [pc, #28]	; (8007968 <USBD_FS_ConfigStrDescriptor+0x34>)
 800794a:	4808      	ldr	r0, [pc, #32]	; (800796c <USBD_FS_ConfigStrDescriptor+0x38>)
 800794c:	f7ff fd73 	bl	8007436 <USBD_GetString>
 8007950:	e004      	b.n	800795c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	4904      	ldr	r1, [pc, #16]	; (8007968 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007956:	4805      	ldr	r0, [pc, #20]	; (800796c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007958:	f7ff fd6d 	bl	8007436 <USBD_GetString>
  }
  return USBD_StrDesc;
 800795c:	4b02      	ldr	r3, [pc, #8]	; (8007968 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800795e:	4618      	mov	r0, r3
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	20000c34 	.word	0x20000c34
 800796c:	080080a0 	.word	0x080080a0

08007970 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	4603      	mov	r3, r0
 8007978:	6039      	str	r1, [r7, #0]
 800797a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800797c:	79fb      	ldrb	r3, [r7, #7]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d105      	bne.n	800798e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	4907      	ldr	r1, [pc, #28]	; (80079a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007986:	4808      	ldr	r0, [pc, #32]	; (80079a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007988:	f7ff fd55 	bl	8007436 <USBD_GetString>
 800798c:	e004      	b.n	8007998 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	4904      	ldr	r1, [pc, #16]	; (80079a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007992:	4805      	ldr	r0, [pc, #20]	; (80079a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007994:	f7ff fd4f 	bl	8007436 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007998:	4b02      	ldr	r3, [pc, #8]	; (80079a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	20000c34 	.word	0x20000c34
 80079a8:	080080ac 	.word	0x080080ac

080079ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079b2:	4b0f      	ldr	r3, [pc, #60]	; (80079f0 <Get_SerialNum+0x44>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079b8:	4b0e      	ldr	r3, [pc, #56]	; (80079f4 <Get_SerialNum+0x48>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079be:	4b0e      	ldr	r3, [pc, #56]	; (80079f8 <Get_SerialNum+0x4c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4413      	add	r3, r2
 80079ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d009      	beq.n	80079e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079d2:	2208      	movs	r2, #8
 80079d4:	4909      	ldr	r1, [pc, #36]	; (80079fc <Get_SerialNum+0x50>)
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 f814 	bl	8007a04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079dc:	2204      	movs	r2, #4
 80079de:	4908      	ldr	r1, [pc, #32]	; (8007a00 <Get_SerialNum+0x54>)
 80079e0:	68b8      	ldr	r0, [r7, #8]
 80079e2:	f000 f80f 	bl	8007a04 <IntToUnicode>
  }
}
 80079e6:	bf00      	nop
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	1ffff7ac 	.word	0x1ffff7ac
 80079f4:	1ffff7b0 	.word	0x1ffff7b0
 80079f8:	1ffff7b4 	.word	0x1ffff7b4
 80079fc:	20000162 	.word	0x20000162
 8007a00:	20000172 	.word	0x20000172

08007a04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a16:	2300      	movs	r3, #0
 8007a18:	75fb      	strb	r3, [r7, #23]
 8007a1a:	e027      	b.n	8007a6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	0f1b      	lsrs	r3, r3, #28
 8007a20:	2b09      	cmp	r3, #9
 8007a22:	d80b      	bhi.n	8007a3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	0f1b      	lsrs	r3, r3, #28
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	7dfb      	ldrb	r3, [r7, #23]
 8007a2c:	005b      	lsls	r3, r3, #1
 8007a2e:	4619      	mov	r1, r3
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	440b      	add	r3, r1
 8007a34:	3230      	adds	r2, #48	; 0x30
 8007a36:	b2d2      	uxtb	r2, r2
 8007a38:	701a      	strb	r2, [r3, #0]
 8007a3a:	e00a      	b.n	8007a52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	0f1b      	lsrs	r3, r3, #28
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	7dfb      	ldrb	r3, [r7, #23]
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	4619      	mov	r1, r3
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	440b      	add	r3, r1
 8007a4c:	3237      	adds	r2, #55	; 0x37
 8007a4e:	b2d2      	uxtb	r2, r2
 8007a50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	011b      	lsls	r3, r3, #4
 8007a56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a58:	7dfb      	ldrb	r3, [r7, #23]
 8007a5a:	005b      	lsls	r3, r3, #1
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	4413      	add	r3, r2
 8007a62:	2200      	movs	r2, #0
 8007a64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	75fb      	strb	r3, [r7, #23]
 8007a6c:	7dfa      	ldrb	r2, [r7, #23]
 8007a6e:	79fb      	ldrb	r3, [r7, #7]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d3d3      	bcc.n	8007a1c <IntToUnicode+0x18>
  }
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop
 8007a78:	371c      	adds	r7, #28
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
	...

08007a84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a0d      	ldr	r2, [pc, #52]	; (8007ac8 <HAL_PCD_MspInit+0x44>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d113      	bne.n	8007abe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007a96:	4b0d      	ldr	r3, [pc, #52]	; (8007acc <HAL_PCD_MspInit+0x48>)
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	4a0c      	ldr	r2, [pc, #48]	; (8007acc <HAL_PCD_MspInit+0x48>)
 8007a9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007aa0:	61d3      	str	r3, [r2, #28]
 8007aa2:	4b0a      	ldr	r3, [pc, #40]	; (8007acc <HAL_PCD_MspInit+0x48>)
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	2014      	movs	r0, #20
 8007ab4:	f7f8 fdf9 	bl	80006aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8007ab8:	2014      	movs	r0, #20
 8007aba:	f7f8 fe12 	bl	80006e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007abe:	bf00      	nop
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	40005c00 	.word	0x40005c00
 8007acc:	40021000 	.word	0x40021000

08007ad0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	f7fe fd70 	bl	80065cc <USBD_LL_SetupStage>
}
 8007aec:	bf00      	nop
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007b06:	78fa      	ldrb	r2, [r7, #3]
 8007b08:	6879      	ldr	r1, [r7, #4]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	00db      	lsls	r3, r3, #3
 8007b12:	440b      	add	r3, r1
 8007b14:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	78fb      	ldrb	r3, [r7, #3]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	f7fe fda2 	bl	8006666 <USBD_LL_DataOutStage>
}
 8007b22:	bf00      	nop
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007b3c:	78fa      	ldrb	r2, [r7, #3]
 8007b3e:	6879      	ldr	r1, [r7, #4]
 8007b40:	4613      	mov	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	440b      	add	r3, r1
 8007b4a:	333c      	adds	r3, #60	; 0x3c
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	78fb      	ldrb	r3, [r7, #3]
 8007b50:	4619      	mov	r1, r3
 8007b52:	f7fe fdf9 	bl	8006748 <USBD_LL_DataInStage>
}
 8007b56:	bf00      	nop
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b082      	sub	sp, #8
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7fe ff0c 	bl	800698a <USBD_LL_SOF>
}
 8007b72:	bf00      	nop
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b82:	2301      	movs	r3, #1
 8007b84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d001      	beq.n	8007b92 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007b8e:	f7f8 fbb1 	bl	80002f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007b98:	7bfa      	ldrb	r2, [r7, #15]
 8007b9a:	4611      	mov	r1, r2
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fe feb9 	bl	8006914 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fe fe72 	bl	8006892 <USBD_LL_Reset>
}
 8007bae:	bf00      	nop
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fe feb4 	bl	8006934 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d005      	beq.n	8007be0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bd4:	4b04      	ldr	r3, [pc, #16]	; (8007be8 <HAL_PCD_SuspendCallback+0x30>)
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	4a03      	ldr	r2, [pc, #12]	; (8007be8 <HAL_PCD_SuspendCallback+0x30>)
 8007bda:	f043 0306 	orr.w	r3, r3, #6
 8007bde:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007be0:	bf00      	nop
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	e000ed00 	.word	0xe000ed00

08007bec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fe feaf 	bl	800695e <USBD_LL_Resume>
}
 8007c00:	bf00      	nop
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007c10:	4a29      	ldr	r2, [pc, #164]	; (8007cb8 <USBD_LL_Init+0xb0>)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a27      	ldr	r2, [pc, #156]	; (8007cb8 <USBD_LL_Init+0xb0>)
 8007c1c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007c20:	4b25      	ldr	r3, [pc, #148]	; (8007cb8 <USBD_LL_Init+0xb0>)
 8007c22:	4a26      	ldr	r2, [pc, #152]	; (8007cbc <USBD_LL_Init+0xb4>)
 8007c24:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007c26:	4b24      	ldr	r3, [pc, #144]	; (8007cb8 <USBD_LL_Init+0xb0>)
 8007c28:	2208      	movs	r2, #8
 8007c2a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007c2c:	4b22      	ldr	r3, [pc, #136]	; (8007cb8 <USBD_LL_Init+0xb0>)
 8007c2e:	2202      	movs	r2, #2
 8007c30:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c32:	4b21      	ldr	r3, [pc, #132]	; (8007cb8 <USBD_LL_Init+0xb0>)
 8007c34:	2202      	movs	r2, #2
 8007c36:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007c38:	4b1f      	ldr	r3, [pc, #124]	; (8007cb8 <USBD_LL_Init+0xb0>)
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007c3e:	4b1e      	ldr	r3, [pc, #120]	; (8007cb8 <USBD_LL_Init+0xb0>)
 8007c40:	2200      	movs	r2, #0
 8007c42:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007c44:	4b1c      	ldr	r3, [pc, #112]	; (8007cb8 <USBD_LL_Init+0xb0>)
 8007c46:	2200      	movs	r2, #0
 8007c48:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007c4a:	481b      	ldr	r0, [pc, #108]	; (8007cb8 <USBD_LL_Init+0xb0>)
 8007c4c:	f7f8 fd63 	bl	8000716 <HAL_PCD_Init>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 8007c56:	f7f8 fb4d 	bl	80002f4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c60:	2318      	movs	r3, #24
 8007c62:	2200      	movs	r2, #0
 8007c64:	2100      	movs	r1, #0
 8007c66:	f7fa f9e8 	bl	800203a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c70:	2358      	movs	r3, #88	; 0x58
 8007c72:	2200      	movs	r2, #0
 8007c74:	2180      	movs	r1, #128	; 0x80
 8007c76:	f7fa f9e0 	bl	800203a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c80:	23c0      	movs	r3, #192	; 0xc0
 8007c82:	2200      	movs	r2, #0
 8007c84:	2181      	movs	r1, #129	; 0x81
 8007c86:	f7fa f9d8 	bl	800203a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c90:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007c94:	2200      	movs	r2, #0
 8007c96:	2101      	movs	r1, #1
 8007c98:	f7fa f9cf 	bl	800203a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2182      	movs	r1, #130	; 0x82
 8007caa:	f7fa f9c6 	bl	800203a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	20000e34 	.word	0x20000e34
 8007cbc:	40005c00 	.word	0x40005c00

08007cc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7f8 fdfb 	bl	80008d2 <HAL_PCD_Start>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 f954 	bl	8007f90 <USBD_Get_USB_Status>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	4608      	mov	r0, r1
 8007d00:	4611      	mov	r1, r2
 8007d02:	461a      	mov	r2, r3
 8007d04:	4603      	mov	r3, r0
 8007d06:	70fb      	strb	r3, [r7, #3]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	70bb      	strb	r3, [r7, #2]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d1e:	78bb      	ldrb	r3, [r7, #2]
 8007d20:	883a      	ldrh	r2, [r7, #0]
 8007d22:	78f9      	ldrb	r1, [r7, #3]
 8007d24:	f7f8 ff17 	bl	8000b56 <HAL_PCD_EP_Open>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 f92e 	bl	8007f90 <USBD_Get_USB_Status>
 8007d34:	4603      	mov	r3, r0
 8007d36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d38:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d5c:	78fa      	ldrb	r2, [r7, #3]
 8007d5e:	4611      	mov	r1, r2
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7f8 ff5e 	bl	8000c22 <HAL_PCD_EP_Close>
 8007d66:	4603      	mov	r3, r0
 8007d68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f000 f90f 	bl	8007f90 <USBD_Get_USB_Status>
 8007d72:	4603      	mov	r3, r0
 8007d74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d76:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d9a:	78fa      	ldrb	r2, [r7, #3]
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7f9 f81f 	bl	8000de2 <HAL_PCD_EP_SetStall>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 f8f0 	bl	8007f90 <USBD_Get_USB_Status>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dd8:	78fa      	ldrb	r2, [r7, #3]
 8007dda:	4611      	mov	r1, r2
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7f9 f852 	bl	8000e86 <HAL_PCD_EP_ClrStall>
 8007de2:	4603      	mov	r3, r0
 8007de4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 f8d1 	bl	8007f90 <USBD_Get_USB_Status>
 8007dee:	4603      	mov	r3, r0
 8007df0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	da0c      	bge.n	8007e32 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e18:	78fb      	ldrb	r3, [r7, #3]
 8007e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e1e:	68f9      	ldr	r1, [r7, #12]
 8007e20:	1c5a      	adds	r2, r3, #1
 8007e22:	4613      	mov	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	00db      	lsls	r3, r3, #3
 8007e2a:	440b      	add	r3, r1
 8007e2c:	3302      	adds	r3, #2
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	e00b      	b.n	8007e4a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e32:	78fb      	ldrb	r3, [r7, #3]
 8007e34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e38:	68f9      	ldr	r1, [r7, #12]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	00db      	lsls	r3, r3, #3
 8007e42:	440b      	add	r3, r1
 8007e44:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007e48:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
 8007e5e:	460b      	mov	r3, r1
 8007e60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e70:	78fa      	ldrb	r2, [r7, #3]
 8007e72:	4611      	mov	r1, r2
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7f8 fe49 	bl	8000b0c <HAL_PCD_SetAddress>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 f885 	bl	8007f90 <USBD_Get_USB_Status>
 8007e86:	4603      	mov	r3, r0
 8007e88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	607a      	str	r2, [r7, #4]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	72fb      	strb	r3, [r7, #11]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eb6:	893b      	ldrh	r3, [r7, #8]
 8007eb8:	7af9      	ldrb	r1, [r7, #11]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	f7f8 ff4e 	bl	8000d5c <HAL_PCD_EP_Transmit>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ec4:	7dfb      	ldrb	r3, [r7, #23]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 f862 	bl	8007f90 <USBD_Get_USB_Status>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ed0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3718      	adds	r7, #24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b086      	sub	sp, #24
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	60f8      	str	r0, [r7, #12]
 8007ee2:	607a      	str	r2, [r7, #4]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	72fb      	strb	r3, [r7, #11]
 8007eea:	4613      	mov	r3, r2
 8007eec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007efc:	893b      	ldrh	r3, [r7, #8]
 8007efe:	7af9      	ldrb	r1, [r7, #11]
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	f7f8 fed6 	bl	8000cb2 <HAL_PCD_EP_Receive>
 8007f06:	4603      	mov	r3, r0
 8007f08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 f83f 	bl	8007f90 <USBD_Get_USB_Status>
 8007f12:	4603      	mov	r3, r0
 8007f14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f16:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3718      	adds	r7, #24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f32:	78fa      	ldrb	r2, [r7, #3]
 8007f34:	4611      	mov	r1, r2
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7f8 fef8 	bl	8000d2c <HAL_PCD_EP_GetRxCount>
 8007f3c:	4603      	mov	r3, r0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
	...

08007f48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f50:	4b03      	ldr	r3, [pc, #12]	; (8007f60 <USBD_static_malloc+0x18>)
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	20001120 	.word	0x20001120

08007f64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]

}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	4603      	mov	r3, r0
 8007f98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f9e:	79fb      	ldrb	r3, [r7, #7]
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	d817      	bhi.n	8007fd4 <USBD_Get_USB_Status+0x44>
 8007fa4:	a201      	add	r2, pc, #4	; (adr r2, 8007fac <USBD_Get_USB_Status+0x1c>)
 8007fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007faa:	bf00      	nop
 8007fac:	08007fbd 	.word	0x08007fbd
 8007fb0:	08007fc3 	.word	0x08007fc3
 8007fb4:	08007fc9 	.word	0x08007fc9
 8007fb8:	08007fcf 	.word	0x08007fcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc0:	e00b      	b.n	8007fda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc6:	e008      	b.n	8007fda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	73fb      	strb	r3, [r7, #15]
    break;
 8007fcc:	e005      	b.n	8007fda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fce:	2302      	movs	r3, #2
 8007fd0:	73fb      	strb	r3, [r7, #15]
    break;
 8007fd2:	e002      	b.n	8007fda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fd8:	bf00      	nop
  }
  return usb_status;
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <__libc_init_array>:
 8007fe8:	b570      	push	{r4, r5, r6, lr}
 8007fea:	4d0d      	ldr	r5, [pc, #52]	; (8008020 <__libc_init_array+0x38>)
 8007fec:	4c0d      	ldr	r4, [pc, #52]	; (8008024 <__libc_init_array+0x3c>)
 8007fee:	1b64      	subs	r4, r4, r5
 8007ff0:	10a4      	asrs	r4, r4, #2
 8007ff2:	2600      	movs	r6, #0
 8007ff4:	42a6      	cmp	r6, r4
 8007ff6:	d109      	bne.n	800800c <__libc_init_array+0x24>
 8007ff8:	4d0b      	ldr	r5, [pc, #44]	; (8008028 <__libc_init_array+0x40>)
 8007ffa:	4c0c      	ldr	r4, [pc, #48]	; (800802c <__libc_init_array+0x44>)
 8007ffc:	f000 f82e 	bl	800805c <_init>
 8008000:	1b64      	subs	r4, r4, r5
 8008002:	10a4      	asrs	r4, r4, #2
 8008004:	2600      	movs	r6, #0
 8008006:	42a6      	cmp	r6, r4
 8008008:	d105      	bne.n	8008016 <__libc_init_array+0x2e>
 800800a:	bd70      	pop	{r4, r5, r6, pc}
 800800c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008010:	4798      	blx	r3
 8008012:	3601      	adds	r6, #1
 8008014:	e7ee      	b.n	8007ff4 <__libc_init_array+0xc>
 8008016:	f855 3b04 	ldr.w	r3, [r5], #4
 800801a:	4798      	blx	r3
 800801c:	3601      	adds	r6, #1
 800801e:	e7f2      	b.n	8008006 <__libc_init_array+0x1e>
 8008020:	080080ec 	.word	0x080080ec
 8008024:	080080ec 	.word	0x080080ec
 8008028:	080080ec 	.word	0x080080ec
 800802c:	080080f0 	.word	0x080080f0

08008030 <memcpy>:
 8008030:	440a      	add	r2, r1
 8008032:	4291      	cmp	r1, r2
 8008034:	f100 33ff 	add.w	r3, r0, #4294967295
 8008038:	d100      	bne.n	800803c <memcpy+0xc>
 800803a:	4770      	bx	lr
 800803c:	b510      	push	{r4, lr}
 800803e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008042:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008046:	4291      	cmp	r1, r2
 8008048:	d1f9      	bne.n	800803e <memcpy+0xe>
 800804a:	bd10      	pop	{r4, pc}

0800804c <memset>:
 800804c:	4402      	add	r2, r0
 800804e:	4603      	mov	r3, r0
 8008050:	4293      	cmp	r3, r2
 8008052:	d100      	bne.n	8008056 <memset+0xa>
 8008054:	4770      	bx	lr
 8008056:	f803 1b01 	strb.w	r1, [r3], #1
 800805a:	e7f9      	b.n	8008050 <memset+0x4>

0800805c <_init>:
 800805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805e:	bf00      	nop
 8008060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008062:	bc08      	pop	{r3}
 8008064:	469e      	mov	lr, r3
 8008066:	4770      	bx	lr

08008068 <_fini>:
 8008068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806a:	bf00      	nop
 800806c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800806e:	bc08      	pop	{r3}
 8008070:	469e      	mov	lr, r3
 8008072:	4770      	bx	lr
